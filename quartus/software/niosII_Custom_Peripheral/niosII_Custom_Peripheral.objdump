
niosII_Custom_Peripheral.elf:     file format elf32-littlenios2
niosII_Custom_Peripheral.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040244

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00005fd8 memsz 0x00005fd8 flags r-x
    LOAD off    0x00006ff8 vaddr 0x00045ff8 paddr 0x00047a68 align 2**12
         filesz 0x00001a70 memsz 0x00001a70 flags rw-
    LOAD off    0x000094d8 vaddr 0x000494d8 paddr 0x000494d8 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005ca4  00040244  00040244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000110  00045ee8  00045ee8  00006ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a70  00045ff8  00047a68  00006ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  000494d8  000494d8  000094d8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2 00000000  0004962c  0004962c  00008a68  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00008a68  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000ae8  00000000  00000000  00008a90  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00018c47  00000000  00000000  00009578  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006971  00000000  00000000  000221bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000724e  00000000  00000000  00028b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001728  00000000  00000000  0002fd80  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000028cd  00000000  00000000  000314a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004e07  00000000  00000000  00033d75  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00038b7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000728  00000000  00000000  00038be0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003ba16  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  0003ba19  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003ba23  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003ba24  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0003ba25  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0003ba29  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0003ba2d  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0003ba31  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0003ba3a  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0003ba43  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000c  00000000  00000000  0003ba4c  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000043  00000000  00000000  0003ba58  2**0
                  CONTENTS, READONLY
 29 .jdi          000058cf  00000000  00000000  0003ba9b  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0006e219  00000000  00000000  0004136a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040244 l    d  .text	00000000 .text
00045ee8 l    d  .rodata	00000000 .rodata
00045ff8 l    d  .rwdata	00000000 .rwdata
000494d8 l    d  .bss	00000000 .bss
0004962c l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../niosII_Custom_Peripheral_bsp//obj/HAL/src/crt0.o
0004028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
00045ff8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00040918 l     F .text	00000008 __fp_unlock
0004092c l     F .text	0000019c __sinit.part.1
00040ac8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
0004251c l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 alt_close.c
000435b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000436bc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000436e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000437d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000438b4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000439a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00043b74 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00047a58 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00043df0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00043f24 l     F .text	00000034 alt_dev_reg
000469cc l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00044218 l     F .text	0000020c altera_avalon_jtag_uart_irq
00044424 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00044a5c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00044e1c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00045290 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000453d0 l     F .text	0000003c alt_get_errno
0004540c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00049500 g     O .bss	00000004 alt_instruction_exception_handler
0004355c g     F .text	00000054 _isatty_r
00043ab0 g     F .text	0000007c alt_main
00040724 g     F .text	000000c0 _puts_r
0004952c g     O .bss	00000100 alt_irq
00043284 g     F .text	00000060 _lseek_r
00047a68 g       *ABS*	00000000 __flash_rwdata_start
0004962c g       *ABS*	00000000 __alt_heap_start
00042838 g     F .text	0000005c __sseek
00040c68 g     F .text	00000010 __sinit
00040ad0 g     F .text	00000068 __sfmoreglue
00043b50 g     F .text	00000024 __malloc_unlock
00041d34 g     F .text	0000015c memmove
00040c50 g     F .text	00000018 _cleanup
000457c8 g     F .text	00000024 altera_nios2_gen2_irq_init
00040000 g     F .entry	0000001c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
00043500 g     F .text	0000005c _fstat_r
000494e4 g     O .bss	00000004 errno
0004086c g     F .text	00000014 __srget
000427b4 g     F .text	00000008 __seofread
000494ec g     O .bss	00000004 alt_argv
0004fa2c g       *ABS*	00000000 _gp
00043dc0 g     F .text	00000030 usleep
0004684c g     O .rwdata	00000180 alt_fd_list
0004062c g     F .text	00000070 _getc_r
0004069c g     F .text	00000088 getc
000457ec g     F .text	00000090 alt_find_dev
00041bec g     F .text	00000148 memcpy
00040920 g     F .text	0000000c _cleanup_r
00045354 g     F .text	0000007c alt_io_redirect
00045ee8 g       *ABS*	00000000 __DTOR_END__
000407e4 g     F .text	00000014 puts
00045ab8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0004461c g     F .text	0000021c altera_avalon_jtag_uart_read
00040570 g     F .text	00000064 .hidden __udivsi3
00043810 g     F .text	000000a4 isatty
00045a28 g     F .text	00000090 alt_icache_flush
000494e0 g     O .bss	00000004 __malloc_top_pad
00040cb8 g     F .text	000004bc __sfvwrite_r
0004270c g     F .text	00000054 _sbrk_r
000434a0 g     F .text	00000060 _read_r
00047a50 g     O .rwdata	00000004 alt_max_fd
00047a2c g     O .rwdata	00000004 maxRange
00042aa4 g     F .text	000000f0 _fclose_r
00042e20 g     F .text	00000030 fflush
000494dc g     O .bss	00000004 __malloc_max_sbrked_mem
000439dc g     F .text	000000d4 lseek
00047a30 g     O .rwdata	00000004 _global_impure_ptr
00041fb8 g     F .text	00000564 _realloc_r
0004962c g       *ABS*	00000000 __bss_end
000451a0 g     F .text	000000f0 alt_iic_isr_register
000456c0 g     F .text	00000108 alt_tick
00040c88 g     F .text	00000018 __fp_lock_all
00045154 g     F .text	0000004c alt_ic_irq_enabled
00045624 g     F .text	0000009c alt_alarm_stop
000494f4 g     O .bss	00000004 alt_irq_active
000400fc g     F .exceptions	000000d4 alt_irq_handler
00046824 g     O .rwdata	00000028 alt_dev_null
00044dd4 g     F .text	00000048 alt_dcache_flush_all
00047a68 g       *ABS*	00000000 __ram_rwdata_end
00047a48 g     O .rwdata	00000008 alt_dev_list
00043e2c g     F .text	000000f8 write
00045ff8 g       *ABS*	00000000 __ram_rodata_end
00043724 g     F .text	000000b0 fstat
000405d4 g     F .text	00000058 .hidden __umodsi3
0004962c g       *ABS*	00000000 end
00044158 g     F .text	000000c0 altera_avalon_jtag_uart_init
000401d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00045ee8 g       *ABS*	00000000 __CTOR_LIST__
00067100 g       *ABS*	00000000 __alt_stack_pointer
00044ad4 g     F .text	0000007c alt_avalon_timer_sc_init
00044838 g     F .text	00000224 altera_avalon_jtag_uart_write
00040c78 g     F .text	00000004 __sfp_lock_acquire
00041b08 g     F .text	000000e4 memchr
00042f74 g     F .text	00000310 _free_r
00045d34 g     F .text	00000180 __call_exitprocs
000407f8 g     F .text	00000074 __srget_r
00047a38 g     O .rwdata	00000004 __malloc_sbrk_base
00040244 g     F .text	0000004c _start
000494f8 g     O .bss	00000004 _alt_tick_rate
000494fc g     O .bss	00000004 _alt_nticks
00043bb0 g     F .text	000000fc read
00043f90 g     F .text	00000064 alt_sys_init
00045c1c g     F .text	00000118 __register_exitproc
000444c4 g     F .text	00000068 altera_avalon_jtag_uart_close
00045ff8 g       *ABS*	00000000 __ram_rwdata_start
00045ee8 g       *ABS*	00000000 __ram_rodata_start
00049504 g     O .bss	00000028 __malloc_current_mallinfo
00043ff4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00045984 g     F .text	000000a4 alt_get_fd
00044c7c g     F .text	00000158 alt_busy_sleep
00042a50 g     F .text	00000054 _close_r
00045ba0 g     F .text	0000007c memcmp
000440b4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0004962c g       *ABS*	00000000 __alt_stack_base
00044104 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000428fc g     F .text	00000154 __swsetup_r
00040b38 g     F .text	00000118 __sfp
0004641c g     O .rwdata	00000408 __malloc_av_
00040c84 g     F .text	00000004 __sinit_lock_release
00042760 g     F .text	00000054 __sread
0004587c g     F .text	00000108 alt_find_file
00044e58 g     F .text	000000a4 alt_dev_llist_insert
00043b2c g     F .text	00000024 __malloc_lock
00043d10 g     F .text	000000b0 sbrk
00042dc4 g     F .text	0000005c _fflush_r
000494d8 g       *ABS*	00000000 __bss_start
00041e90 g     F .text	00000128 memset
00040310 g     F .text	00000168 main
000494f0 g     O .bss	00000004 alt_envp
000494d8 g     O .bss	00000004 __malloc_max_total_mem
00044054 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00042894 g     F .text	00000008 __sclose
00067100 g       *ABS*	00000000 __alt_heap_limit
00042b94 g     F .text	00000014 fclose
000412fc g     F .text	0000080c _malloc_r
00047a54 g     O .rwdata	00000004 alt_errno
00041174 g     F .text	000000c4 _fwalk
00040478 g     F .text	00000084 .hidden __divsi3
00042e50 g     F .text	00000124 _malloc_trim_r
00045ee8 g       *ABS*	00000000 __CTOR_END__
00045ee8 g       *ABS*	00000000 __flash_rodata_start
00045ee8 g       *ABS*	00000000 __DTOR_LIST__
00043f58 g     F .text	00000038 alt_irq_init
00043cac g     F .text	00000064 alt_release_fd
00045b54 g     F .text	00000014 atexit
0004289c g     F .text	00000060 _write_r
00047a34 g     O .rwdata	00000004 _impure_ptr
000494e8 g     O .bss	00000004 alt_argc
00042ba8 g     F .text	0000021c __sflush_r
00044f5c g     F .text	00000060 _do_dtors
00042538 g     F .text	000001d4 __srefill_r
00040020 g       .exceptions	00000000 alt_irq_entry
00040ca0 g     F .text	00000018 __fp_unlock_all
00047a40 g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2
00044ff0 g     F .text	00000050 alt_ic_isr_register
00047a68 g       *ABS*	00000000 _edata
0004962c g       *ABS*	00000000 _end
00040244 g       *ABS*	00000000 __ram_exceptions_end
0004452c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000450c8 g     F .text	0000008c alt_ic_irq_disable
000427bc g     F .text	0000007c __swrite
00047a3c g     O .rwdata	00000004 __malloc_trim_threshold
00040290 g     F .text	00000080 heartbeat
00045b68 g     F .text	00000038 exit
00041238 g     F .text	000000c4 _fwalk_reent
000404fc g     F .text	00000074 .hidden __modsi3
00067100 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00040c7c g     F .text	00000004 __sfp_lock_release
00045eb4 g     F .text	00000034 _exit
00044b50 g     F .text	0000012c alt_alarm_start
000432e4 g     F .text	000001bc __smakebuf_r
00040880 g     F .text	00000098 strlen
000454d0 g     F .text	00000154 open
00044fbc g     F .text	00000034 alt_icache_flush_all
00047a5c g     O .rwdata	00000004 alt_priority_mask
00045040 g     F .text	00000088 alt_ic_irq_enable
00047a60 g     O .rwdata	00000008 alt_alarm_list
00044efc g     F .text	00000060 _do_ctors
000435ec g     F .text	000000d0 close
0004391c g     F .text	00000084 alt_load
00040c80 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__alt_data_end+0xfffd8f04>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08409114 	ori	at,at,580
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__alt_mem_onchip_memory2-0x40000>

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   4008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401d00 	call	401d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0fffb17 	ldw	r3,-20(fp)
   40130:	e0bffc17 	ldw	r2,-16(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001426 	beq	r2,zero,4018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	00800174 	movhi	r2,5
   40140:	10a54b04 	addi	r2,r2,-27348
   40144:	e0fffd17 	ldw	r3,-12(fp)
   40148:	180690fa 	slli	r3,r3,3
   4014c:	10c5883a 	add	r2,r2,r3
   40150:	10c00017 	ldw	r3,0(r2)
   40154:	00800174 	movhi	r2,5
   40158:	10a54b04 	addi	r2,r2,-27348
   4015c:	e13ffd17 	ldw	r4,-12(fp)
   40160:	200890fa 	slli	r4,r4,3
   40164:	1105883a 	add	r2,r2,r4
   40168:	10800104 	addi	r2,r2,4
   4016c:	10800017 	ldw	r2,0(r2)
   40170:	1009883a 	mov	r4,r2
   40174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4017c:	0005313a 	rdctl	r2,ipending
   40180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40184:	e0bfff17 	ldw	r2,-4(fp)
   40188:	00000706 	br	401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4018c:	e0bffc17 	ldw	r2,-16(fp)
   40190:	1085883a 	add	r2,r2,r2
   40194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40198:	e0bffd17 	ldw	r2,-12(fp)
   4019c:	10800044 	addi	r2,r2,1
   401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a4:	003fe106 	br	4012c <__alt_data_end+0xfffd902c>

    active = alt_irq_pending ();
   401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   401ac:	e0bffb17 	ldw	r2,-20(fp)
   401b0:	103fdb1e 	bne	r2,zero,40120 <__alt_data_end+0xfffd9020>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401b4:	0001883a 	nop
}
   401b8:	0001883a 	nop
   401bc:	e037883a 	mov	sp,fp
   401c0:	dfc00117 	ldw	ra,4(sp)
   401c4:	df000017 	ldw	fp,0(sp)
   401c8:	dec00204 	addi	sp,sp,8
   401cc:	f800283a 	ret

000401d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401d0:	defffb04 	addi	sp,sp,-20
   401d4:	dfc00415 	stw	ra,16(sp)
   401d8:	df000315 	stw	fp,12(sp)
   401dc:	df000304 	addi	fp,sp,12
   401e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   401e4:	000531fa 	rdctl	r2,exception
   401e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   401ec:	e0bffd17 	ldw	r2,-12(fp)
   401f0:	10801f0c 	andi	r2,r2,124
   401f4:	1004d0ba 	srli	r2,r2,2
   401f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   401fc:	0005333a 	rdctl	r2,badaddr
   40200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   40204:	d0a6b517 	ldw	r2,-25900(gp)
   40208:	10000726 	beq	r2,zero,40228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   4020c:	d0a6b517 	ldw	r2,-25900(gp)
   40210:	e0fffd17 	ldw	r3,-12(fp)
   40214:	e1bffe17 	ldw	r6,-8(fp)
   40218:	e17fff17 	ldw	r5,-4(fp)
   4021c:	1809883a 	mov	r4,r3
   40220:	103ee83a 	callr	r2
   40224:	00000206 	br	40230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   4022c:	0005883a 	mov	r2,zero
}
   40230:	e037883a 	mov	sp,fp
   40234:	dfc00117 	ldw	ra,4(sp)
   40238:	df000017 	ldw	fp,0(sp)
   4023c:	dec00204 	addi	sp,sp,8
   40240:	f800283a 	ret

Disassembly of section .text:

00040244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   40244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   40248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   4024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   40250:	00bffd16 	blt	zero,r2,40248 <__alt_data_end+0xfffd9148>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40254:	06c001b4 	movhi	sp,6
    ori sp, sp, %lo(__alt_stack_pointer)
   40258:	dedc4014 	ori	sp,sp,28928
    movhi gp, %hi(_gp)
   4025c:	06800134 	movhi	gp,4
    ori gp, gp, %lo(_gp)
   40260:	d6be8b14 	ori	gp,gp,64044
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40264:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   40268:	10a53614 	ori	r2,r2,38104

    movhi r3, %hi(__bss_end)
   4026c:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   40270:	18e58b14 	ori	r3,r3,38444

    beq r2, r3, 1f
   40274:	10c00326 	beq	r2,r3,40284 <_start+0x40>

0:
    stw zero, (r2)
   40278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   4027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   40280:	10fffd36 	bltu	r2,r3,40278 <__alt_data_end+0xfffd9178>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40284:	004391c0 	call	4391c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40288:	0043ab00 	call	43ab0 <alt_main>

0004028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   4028c:	003fff06 	br	4028c <__alt_data_end+0xfffd918c>

00040290 <heartbeat>:
#include <unistd.h>


int maxRange = 255;

void heartbeat(int period) {
   40290:	defffb04 	addi	sp,sp,-20
   40294:	dfc00415 	stw	ra,16(sp)
   40298:	df000315 	stw	fp,12(sp)
   4029c:	df000304 	addi	fp,sp,12
   402a0:	e13fff15 	stw	r4,-4(fp)
  int value = 0;
   402a4:	e03ffd15 	stw	zero,-12(fp)
  int direction = 1;  // 1 for increasing, -1 for decreasing
   402a8:	00800044 	movi	r2,1
   402ac:	e0bffe15 	stw	r2,-8(fp)
  while (1) {
    //printf("Heartbeat value: %d\n", value);
	IOWR_ALTERA_AVALON_PWM_DUTY(AVALON_PWM_INST_BASE, value);
   402b0:	00800234 	movhi	r2,8
   402b4:	10842504 	addi	r2,r2,4244
   402b8:	e0fffd17 	ldw	r3,-12(fp)
   402bc:	10c00035 	stwio	r3,0(r2)
    value += direction;
   402c0:	e0fffd17 	ldw	r3,-12(fp)
   402c4:	e0bffe17 	ldw	r2,-8(fp)
   402c8:	1885883a 	add	r2,r3,r2
   402cc:	e0bffd15 	stw	r2,-12(fp)
    if (value >= maxRange || value <= 0) {
   402d0:	d0a00017 	ldw	r2,-32768(gp)
   402d4:	e0fffd17 	ldw	r3,-12(fp)
   402d8:	1880020e 	bge	r3,r2,402e4 <heartbeat+0x54>
   402dc:	e0bffd17 	ldw	r2,-12(fp)
   402e0:	00800316 	blt	zero,r2,402f0 <heartbeat+0x60>
      // Reverse direction at the limits
      direction *= -1;
   402e4:	e0bffe17 	ldw	r2,-8(fp)
   402e8:	0085c83a 	sub	r2,zero,r2
   402ec:	e0bffe15 	stw	r2,-8(fp)
    }
    usleep(period / (maxRange*2));  // Sleep for half the period
   402f0:	d0a00017 	ldw	r2,-32768(gp)
   402f4:	1085883a 	add	r2,r2,r2
   402f8:	100b883a 	mov	r5,r2
   402fc:	e13fff17 	ldw	r4,-4(fp)
   40300:	00404780 	call	40478 <__divsi3>
   40304:	1009883a 	mov	r4,r2
   40308:	0043dc00 	call	43dc0 <usleep>
  }
   4030c:	003fe806 	br	402b0 <__alt_data_end+0xfffd91b0>

00040310 <main>:
}

int main() {
   40310:	defffd04 	addi	sp,sp,-12
   40314:	dfc00215 	stw	ra,8(sp)
   40318:	df000115 	stw	fp,4(sp)
   4031c:	df000104 	addi	fp,sp,4
	int rx_char;

	printf("Application - PWM\n");
   40320:	01000134 	movhi	r4,4
   40324:	2117ba04 	addi	r4,r4,24296
   40328:	00407e40 	call	407e4 <puts>
	printf("\nEnter intensity LED between 1 and 4 (0 to exit, 5 for heart beat)\n");
   4032c:	01000134 	movhi	r4,4
   40330:	2117bf04 	addi	r4,r4,24316
   40334:	00407e40 	call	407e4 <puts>

	IOWR_ALTERA_AVALON_PWM_DIVIDER(AVALON_PWM_INST_BASE, 0xFF);
   40338:	00c03fc4 	movi	r3,255
   4033c:	00800234 	movhi	r2,8
   40340:	10842404 	addi	r2,r2,4240
   40344:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PWM_DUTY(AVALON_PWM_INST_BASE, 0xFF);
   40348:	00c03fc4 	movi	r3,255
   4034c:	00800234 	movhi	r2,8
   40350:	10842504 	addi	r2,r2,4244
   40354:	10c00035 	stwio	r3,0(r2)

	while (1) {
		rx_char = getc(stdin);
   40358:	d0a00217 	ldw	r2,-32760(gp)
   4035c:	10800117 	ldw	r2,4(r2)
   40360:	1009883a 	mov	r4,r2
   40364:	004069c0 	call	4069c <getc>
   40368:	e0bfff15 	stw	r2,-4(fp)

		switch (rx_char) {
   4036c:	e0bfff17 	ldw	r2,-4(fp)
   40370:	10bff404 	addi	r2,r2,-48
   40374:	10c001a8 	cmpgeui	r3,r2,6
   40378:	1800351e 	bne	r3,zero,40450 <main+0x140>
   4037c:	100690ba 	slli	r3,r2,2
   40380:	00800134 	movhi	r2,4
   40384:	1080e504 	addi	r2,r2,916
   40388:	1885883a 	add	r2,r3,r2
   4038c:	10800017 	ldw	r2,0(r2)
   40390:	1000683a 	jmp	r2
   40394:	0004043c 	xorhi	zero,zero,4112
   40398:	0004041c 	xori	zero,zero,4112
   4039c:	000403fc 	xorhi	zero,zero,4111
   403a0:	000403dc 	xori	zero,zero,4111
   403a4:	000403bc 	xorhi	zero,zero,4110
   403a8:	000403ac 	andhi	zero,zero,4110
		case '5':
			heartbeat(1000000);// Pulses every 1000000 microseconds (1 second)
   403ac:	010003f4 	movhi	r4,15
   403b0:	21109004 	addi	r4,r4,16960
   403b4:	00402900 	call	40290 <heartbeat>
			break;
   403b8:	00002906 	br	40460 <main+0x150>

		case '4':
			IOWR_ALTERA_AVALON_PWM_DUTY(AVALON_PWM_INST_BASE, 0xFF);
   403bc:	00c03fc4 	movi	r3,255
   403c0:	00800234 	movhi	r2,8
   403c4:	10842504 	addi	r2,r2,4244
   403c8:	10c00035 	stwio	r3,0(r2)
			printf("Intensity level 4\n");
   403cc:	01000134 	movhi	r4,4
   403d0:	2117d004 	addi	r4,r4,24384
   403d4:	00407e40 	call	407e4 <puts>
			break;
   403d8:	00002106 	br	40460 <main+0x150>

		case '3':
			IOWR_ALTERA_AVALON_PWM_DUTY(AVALON_PWM_INST_BASE, 0x80);
   403dc:	00c02004 	movi	r3,128
   403e0:	00800234 	movhi	r2,8
   403e4:	10842504 	addi	r2,r2,4244
   403e8:	10c00035 	stwio	r3,0(r2)
			printf("Intensity level 3\n");
   403ec:	01000134 	movhi	r4,4
   403f0:	2117d504 	addi	r4,r4,24404
   403f4:	00407e40 	call	407e4 <puts>
			break;
   403f8:	00001906 	br	40460 <main+0x150>

		case '2':
			IOWR_ALTERA_AVALON_PWM_DUTY(AVALON_PWM_INST_BASE, 0x30);
   403fc:	00c00c04 	movi	r3,48
   40400:	00800234 	movhi	r2,8
   40404:	10842504 	addi	r2,r2,4244
   40408:	10c00035 	stwio	r3,0(r2)
			printf("Intensity level 2\n");
   4040c:	01000134 	movhi	r4,4
   40410:	2117da04 	addi	r4,r4,24424
   40414:	00407e40 	call	407e4 <puts>
			break;
   40418:	00001106 	br	40460 <main+0x150>

		case '1':
			IOWR_ALTERA_AVALON_PWM_DUTY(AVALON_PWM_INST_BASE, 0x10);
   4041c:	00c00404 	movi	r3,16
   40420:	00800234 	movhi	r2,8
   40424:	10842504 	addi	r2,r2,4244
   40428:	10c00035 	stwio	r3,0(r2)
			printf("Intensity level 1\n");
   4042c:	01000134 	movhi	r4,4
   40430:	2117df04 	addi	r4,r4,24444
   40434:	00407e40 	call	407e4 <puts>
			break;
   40438:	00000906 	br	40460 <main+0x150>

		case '0':
			printf("\nBye bye ...\n");
   4043c:	01000134 	movhi	r4,4
   40440:	2117e404 	addi	r4,r4,24464
   40444:	00407e40 	call	407e4 <puts>
			return 0;
   40448:	0005883a 	mov	r2,zero
   4044c:	00000506 	br	40464 <main+0x154>
			break;

		default:
			printf("Enter intensity LED between 1 and 4\n");
   40450:	01000134 	movhi	r4,4
   40454:	2117e804 	addi	r4,r4,24480
   40458:	00407e40 	call	407e4 <puts>
			break;
   4045c:	0001883a 	nop
		}
	}
   40460:	003fbd06 	br	40358 <__alt_data_end+0xfffd9258>
	return 0;
}
   40464:	e037883a 	mov	sp,fp
   40468:	dfc00117 	ldw	ra,4(sp)
   4046c:	df000017 	ldw	fp,0(sp)
   40470:	dec00204 	addi	sp,sp,8
   40474:	f800283a 	ret

00040478 <__divsi3>:
   40478:	20001b16 	blt	r4,zero,404e8 <__divsi3+0x70>
   4047c:	000f883a 	mov	r7,zero
   40480:	28001616 	blt	r5,zero,404dc <__divsi3+0x64>
   40484:	200d883a 	mov	r6,r4
   40488:	29001a2e 	bgeu	r5,r4,404f4 <__divsi3+0x7c>
   4048c:	00800804 	movi	r2,32
   40490:	00c00044 	movi	r3,1
   40494:	00000106 	br	4049c <__divsi3+0x24>
   40498:	10000d26 	beq	r2,zero,404d0 <__divsi3+0x58>
   4049c:	294b883a 	add	r5,r5,r5
   404a0:	10bfffc4 	addi	r2,r2,-1
   404a4:	18c7883a 	add	r3,r3,r3
   404a8:	293ffb36 	bltu	r5,r4,40498 <__alt_data_end+0xfffd9398>
   404ac:	0005883a 	mov	r2,zero
   404b0:	18000726 	beq	r3,zero,404d0 <__divsi3+0x58>
   404b4:	0005883a 	mov	r2,zero
   404b8:	31400236 	bltu	r6,r5,404c4 <__divsi3+0x4c>
   404bc:	314dc83a 	sub	r6,r6,r5
   404c0:	10c4b03a 	or	r2,r2,r3
   404c4:	1806d07a 	srli	r3,r3,1
   404c8:	280ad07a 	srli	r5,r5,1
   404cc:	183ffa1e 	bne	r3,zero,404b8 <__alt_data_end+0xfffd93b8>
   404d0:	38000126 	beq	r7,zero,404d8 <__divsi3+0x60>
   404d4:	0085c83a 	sub	r2,zero,r2
   404d8:	f800283a 	ret
   404dc:	014bc83a 	sub	r5,zero,r5
   404e0:	39c0005c 	xori	r7,r7,1
   404e4:	003fe706 	br	40484 <__alt_data_end+0xfffd9384>
   404e8:	0109c83a 	sub	r4,zero,r4
   404ec:	01c00044 	movi	r7,1
   404f0:	003fe306 	br	40480 <__alt_data_end+0xfffd9380>
   404f4:	00c00044 	movi	r3,1
   404f8:	003fee06 	br	404b4 <__alt_data_end+0xfffd93b4>

000404fc <__modsi3>:
   404fc:	20001716 	blt	r4,zero,4055c <__modsi3+0x60>
   40500:	000f883a 	mov	r7,zero
   40504:	2005883a 	mov	r2,r4
   40508:	28001216 	blt	r5,zero,40554 <__modsi3+0x58>
   4050c:	2900162e 	bgeu	r5,r4,40568 <__modsi3+0x6c>
   40510:	01800804 	movi	r6,32
   40514:	00c00044 	movi	r3,1
   40518:	00000106 	br	40520 <__modsi3+0x24>
   4051c:	30000a26 	beq	r6,zero,40548 <__modsi3+0x4c>
   40520:	294b883a 	add	r5,r5,r5
   40524:	31bfffc4 	addi	r6,r6,-1
   40528:	18c7883a 	add	r3,r3,r3
   4052c:	293ffb36 	bltu	r5,r4,4051c <__alt_data_end+0xfffd941c>
   40530:	18000526 	beq	r3,zero,40548 <__modsi3+0x4c>
   40534:	1806d07a 	srli	r3,r3,1
   40538:	11400136 	bltu	r2,r5,40540 <__modsi3+0x44>
   4053c:	1145c83a 	sub	r2,r2,r5
   40540:	280ad07a 	srli	r5,r5,1
   40544:	183ffb1e 	bne	r3,zero,40534 <__alt_data_end+0xfffd9434>
   40548:	38000126 	beq	r7,zero,40550 <__modsi3+0x54>
   4054c:	0085c83a 	sub	r2,zero,r2
   40550:	f800283a 	ret
   40554:	014bc83a 	sub	r5,zero,r5
   40558:	003fec06 	br	4050c <__alt_data_end+0xfffd940c>
   4055c:	0109c83a 	sub	r4,zero,r4
   40560:	01c00044 	movi	r7,1
   40564:	003fe706 	br	40504 <__alt_data_end+0xfffd9404>
   40568:	00c00044 	movi	r3,1
   4056c:	003ff106 	br	40534 <__alt_data_end+0xfffd9434>

00040570 <__udivsi3>:
   40570:	200d883a 	mov	r6,r4
   40574:	2900152e 	bgeu	r5,r4,405cc <__udivsi3+0x5c>
   40578:	28001416 	blt	r5,zero,405cc <__udivsi3+0x5c>
   4057c:	00800804 	movi	r2,32
   40580:	00c00044 	movi	r3,1
   40584:	00000206 	br	40590 <__udivsi3+0x20>
   40588:	10000e26 	beq	r2,zero,405c4 <__udivsi3+0x54>
   4058c:	28000516 	blt	r5,zero,405a4 <__udivsi3+0x34>
   40590:	294b883a 	add	r5,r5,r5
   40594:	10bfffc4 	addi	r2,r2,-1
   40598:	18c7883a 	add	r3,r3,r3
   4059c:	293ffa36 	bltu	r5,r4,40588 <__alt_data_end+0xfffd9488>
   405a0:	18000826 	beq	r3,zero,405c4 <__udivsi3+0x54>
   405a4:	0005883a 	mov	r2,zero
   405a8:	31400236 	bltu	r6,r5,405b4 <__udivsi3+0x44>
   405ac:	314dc83a 	sub	r6,r6,r5
   405b0:	10c4b03a 	or	r2,r2,r3
   405b4:	1806d07a 	srli	r3,r3,1
   405b8:	280ad07a 	srli	r5,r5,1
   405bc:	183ffa1e 	bne	r3,zero,405a8 <__alt_data_end+0xfffd94a8>
   405c0:	f800283a 	ret
   405c4:	0005883a 	mov	r2,zero
   405c8:	f800283a 	ret
   405cc:	00c00044 	movi	r3,1
   405d0:	003ff406 	br	405a4 <__alt_data_end+0xfffd94a4>

000405d4 <__umodsi3>:
   405d4:	2005883a 	mov	r2,r4
   405d8:	2900122e 	bgeu	r5,r4,40624 <__umodsi3+0x50>
   405dc:	28001116 	blt	r5,zero,40624 <__umodsi3+0x50>
   405e0:	01800804 	movi	r6,32
   405e4:	00c00044 	movi	r3,1
   405e8:	00000206 	br	405f4 <__umodsi3+0x20>
   405ec:	30000c26 	beq	r6,zero,40620 <__umodsi3+0x4c>
   405f0:	28000516 	blt	r5,zero,40608 <__umodsi3+0x34>
   405f4:	294b883a 	add	r5,r5,r5
   405f8:	31bfffc4 	addi	r6,r6,-1
   405fc:	18c7883a 	add	r3,r3,r3
   40600:	293ffa36 	bltu	r5,r4,405ec <__alt_data_end+0xfffd94ec>
   40604:	18000626 	beq	r3,zero,40620 <__umodsi3+0x4c>
   40608:	1806d07a 	srli	r3,r3,1
   4060c:	11400136 	bltu	r2,r5,40614 <__umodsi3+0x40>
   40610:	1145c83a 	sub	r2,r2,r5
   40614:	280ad07a 	srli	r5,r5,1
   40618:	183ffb1e 	bne	r3,zero,40608 <__alt_data_end+0xfffd9508>
   4061c:	f800283a 	ret
   40620:	f800283a 	ret
   40624:	00c00044 	movi	r3,1
   40628:	003ff706 	br	40608 <__alt_data_end+0xfffd9508>

0004062c <_getc_r>:
   4062c:	defffd04 	addi	sp,sp,-12
   40630:	dc000115 	stw	r16,4(sp)
   40634:	dfc00215 	stw	ra,8(sp)
   40638:	2021883a 	mov	r16,r4
   4063c:	20000226 	beq	r4,zero,40648 <_getc_r+0x1c>
   40640:	20800e17 	ldw	r2,56(r4)
   40644:	10000c26 	beq	r2,zero,40678 <_getc_r+0x4c>
   40648:	28800117 	ldw	r2,4(r5)
   4064c:	10bfffc4 	addi	r2,r2,-1
   40650:	28800115 	stw	r2,4(r5)
   40654:	10000c16 	blt	r2,zero,40688 <_getc_r+0x5c>
   40658:	28800017 	ldw	r2,0(r5)
   4065c:	10c00044 	addi	r3,r2,1
   40660:	28c00015 	stw	r3,0(r5)
   40664:	10800003 	ldbu	r2,0(r2)
   40668:	dfc00217 	ldw	ra,8(sp)
   4066c:	dc000117 	ldw	r16,4(sp)
   40670:	dec00304 	addi	sp,sp,12
   40674:	f800283a 	ret
   40678:	d9400015 	stw	r5,0(sp)
   4067c:	0040c680 	call	40c68 <__sinit>
   40680:	d9400017 	ldw	r5,0(sp)
   40684:	003ff006 	br	40648 <__alt_data_end+0xfffd9548>
   40688:	8009883a 	mov	r4,r16
   4068c:	dfc00217 	ldw	ra,8(sp)
   40690:	dc000117 	ldw	r16,4(sp)
   40694:	dec00304 	addi	sp,sp,12
   40698:	00407f81 	jmpi	407f8 <__srget_r>

0004069c <getc>:
   4069c:	00800134 	movhi	r2,4
   406a0:	defffd04 	addi	sp,sp,-12
   406a4:	109e8d04 	addi	r2,r2,31284
   406a8:	dc400115 	stw	r17,4(sp)
   406ac:	14400017 	ldw	r17,0(r2)
   406b0:	dc000015 	stw	r16,0(sp)
   406b4:	dfc00215 	stw	ra,8(sp)
   406b8:	2021883a 	mov	r16,r4
   406bc:	88000226 	beq	r17,zero,406c8 <getc+0x2c>
   406c0:	88800e17 	ldw	r2,56(r17)
   406c4:	10000d26 	beq	r2,zero,406fc <getc+0x60>
   406c8:	80800117 	ldw	r2,4(r16)
   406cc:	10bfffc4 	addi	r2,r2,-1
   406d0:	80800115 	stw	r2,4(r16)
   406d4:	10000c16 	blt	r2,zero,40708 <getc+0x6c>
   406d8:	80800017 	ldw	r2,0(r16)
   406dc:	10c00044 	addi	r3,r2,1
   406e0:	80c00015 	stw	r3,0(r16)
   406e4:	10800003 	ldbu	r2,0(r2)
   406e8:	dfc00217 	ldw	ra,8(sp)
   406ec:	dc400117 	ldw	r17,4(sp)
   406f0:	dc000017 	ldw	r16,0(sp)
   406f4:	dec00304 	addi	sp,sp,12
   406f8:	f800283a 	ret
   406fc:	8809883a 	mov	r4,r17
   40700:	0040c680 	call	40c68 <__sinit>
   40704:	003ff006 	br	406c8 <__alt_data_end+0xfffd95c8>
   40708:	800b883a 	mov	r5,r16
   4070c:	8809883a 	mov	r4,r17
   40710:	dfc00217 	ldw	ra,8(sp)
   40714:	dc400117 	ldw	r17,4(sp)
   40718:	dc000017 	ldw	r16,0(sp)
   4071c:	dec00304 	addi	sp,sp,12
   40720:	00407f81 	jmpi	407f8 <__srget_r>

00040724 <_puts_r>:
   40724:	defff604 	addi	sp,sp,-40
   40728:	dc000715 	stw	r16,28(sp)
   4072c:	2021883a 	mov	r16,r4
   40730:	2809883a 	mov	r4,r5
   40734:	dc400815 	stw	r17,32(sp)
   40738:	dfc00915 	stw	ra,36(sp)
   4073c:	2823883a 	mov	r17,r5
   40740:	00408800 	call	40880 <strlen>
   40744:	10c00044 	addi	r3,r2,1
   40748:	d8800115 	stw	r2,4(sp)
   4074c:	00800134 	movhi	r2,4
   40750:	1097f204 	addi	r2,r2,24520
   40754:	d8800215 	stw	r2,8(sp)
   40758:	00800044 	movi	r2,1
   4075c:	d8800315 	stw	r2,12(sp)
   40760:	00800084 	movi	r2,2
   40764:	dc400015 	stw	r17,0(sp)
   40768:	d8c00615 	stw	r3,24(sp)
   4076c:	dec00415 	stw	sp,16(sp)
   40770:	d8800515 	stw	r2,20(sp)
   40774:	80000226 	beq	r16,zero,40780 <_puts_r+0x5c>
   40778:	80800e17 	ldw	r2,56(r16)
   4077c:	10001426 	beq	r2,zero,407d0 <_puts_r+0xac>
   40780:	81400217 	ldw	r5,8(r16)
   40784:	2880030b 	ldhu	r2,12(r5)
   40788:	10c8000c 	andi	r3,r2,8192
   4078c:	1800061e 	bne	r3,zero,407a8 <_puts_r+0x84>
   40790:	29001917 	ldw	r4,100(r5)
   40794:	00f7ffc4 	movi	r3,-8193
   40798:	10880014 	ori	r2,r2,8192
   4079c:	20c6703a 	and	r3,r4,r3
   407a0:	2880030d 	sth	r2,12(r5)
   407a4:	28c01915 	stw	r3,100(r5)
   407a8:	d9800404 	addi	r6,sp,16
   407ac:	8009883a 	mov	r4,r16
   407b0:	0040cb80 	call	40cb8 <__sfvwrite_r>
   407b4:	1000091e 	bne	r2,zero,407dc <_puts_r+0xb8>
   407b8:	00800284 	movi	r2,10
   407bc:	dfc00917 	ldw	ra,36(sp)
   407c0:	dc400817 	ldw	r17,32(sp)
   407c4:	dc000717 	ldw	r16,28(sp)
   407c8:	dec00a04 	addi	sp,sp,40
   407cc:	f800283a 	ret
   407d0:	8009883a 	mov	r4,r16
   407d4:	0040c680 	call	40c68 <__sinit>
   407d8:	003fe906 	br	40780 <__alt_data_end+0xfffd9680>
   407dc:	00bfffc4 	movi	r2,-1
   407e0:	003ff606 	br	407bc <__alt_data_end+0xfffd96bc>

000407e4 <puts>:
   407e4:	00800134 	movhi	r2,4
   407e8:	109e8d04 	addi	r2,r2,31284
   407ec:	200b883a 	mov	r5,r4
   407f0:	11000017 	ldw	r4,0(r2)
   407f4:	00407241 	jmpi	40724 <_puts_r>

000407f8 <__srget_r>:
   407f8:	defffd04 	addi	sp,sp,-12
   407fc:	dc400115 	stw	r17,4(sp)
   40800:	dc000015 	stw	r16,0(sp)
   40804:	dfc00215 	stw	ra,8(sp)
   40808:	2023883a 	mov	r17,r4
   4080c:	2821883a 	mov	r16,r5
   40810:	20000226 	beq	r4,zero,4081c <__srget_r+0x24>
   40814:	20800e17 	ldw	r2,56(r4)
   40818:	10001026 	beq	r2,zero,4085c <__srget_r+0x64>
   4081c:	800b883a 	mov	r5,r16
   40820:	8809883a 	mov	r4,r17
   40824:	00425380 	call	42538 <__srefill_r>
   40828:	10000e1e 	bne	r2,zero,40864 <__srget_r+0x6c>
   4082c:	80c00017 	ldw	r3,0(r16)
   40830:	80800117 	ldw	r2,4(r16)
   40834:	19000044 	addi	r4,r3,1
   40838:	10bfffc4 	addi	r2,r2,-1
   4083c:	80800115 	stw	r2,4(r16)
   40840:	81000015 	stw	r4,0(r16)
   40844:	18800003 	ldbu	r2,0(r3)
   40848:	dfc00217 	ldw	ra,8(sp)
   4084c:	dc400117 	ldw	r17,4(sp)
   40850:	dc000017 	ldw	r16,0(sp)
   40854:	dec00304 	addi	sp,sp,12
   40858:	f800283a 	ret
   4085c:	0040c680 	call	40c68 <__sinit>
   40860:	003fee06 	br	4081c <__alt_data_end+0xfffd971c>
   40864:	00bfffc4 	movi	r2,-1
   40868:	003ff706 	br	40848 <__alt_data_end+0xfffd9748>

0004086c <__srget>:
   4086c:	00800134 	movhi	r2,4
   40870:	109e8d04 	addi	r2,r2,31284
   40874:	200b883a 	mov	r5,r4
   40878:	11000017 	ldw	r4,0(r2)
   4087c:	00407f81 	jmpi	407f8 <__srget_r>

00040880 <strlen>:
   40880:	208000cc 	andi	r2,r4,3
   40884:	10002026 	beq	r2,zero,40908 <strlen+0x88>
   40888:	20800007 	ldb	r2,0(r4)
   4088c:	10002026 	beq	r2,zero,40910 <strlen+0x90>
   40890:	2005883a 	mov	r2,r4
   40894:	00000206 	br	408a0 <strlen+0x20>
   40898:	10c00007 	ldb	r3,0(r2)
   4089c:	18001826 	beq	r3,zero,40900 <strlen+0x80>
   408a0:	10800044 	addi	r2,r2,1
   408a4:	10c000cc 	andi	r3,r2,3
   408a8:	183ffb1e 	bne	r3,zero,40898 <__alt_data_end+0xfffd9798>
   408ac:	10c00017 	ldw	r3,0(r2)
   408b0:	01ffbff4 	movhi	r7,65279
   408b4:	39ffbfc4 	addi	r7,r7,-257
   408b8:	00ca303a 	nor	r5,zero,r3
   408bc:	01a02074 	movhi	r6,32897
   408c0:	19c7883a 	add	r3,r3,r7
   408c4:	31a02004 	addi	r6,r6,-32640
   408c8:	1946703a 	and	r3,r3,r5
   408cc:	1986703a 	and	r3,r3,r6
   408d0:	1800091e 	bne	r3,zero,408f8 <strlen+0x78>
   408d4:	10800104 	addi	r2,r2,4
   408d8:	10c00017 	ldw	r3,0(r2)
   408dc:	19cb883a 	add	r5,r3,r7
   408e0:	00c6303a 	nor	r3,zero,r3
   408e4:	28c6703a 	and	r3,r5,r3
   408e8:	1986703a 	and	r3,r3,r6
   408ec:	183ff926 	beq	r3,zero,408d4 <__alt_data_end+0xfffd97d4>
   408f0:	00000106 	br	408f8 <strlen+0x78>
   408f4:	10800044 	addi	r2,r2,1
   408f8:	10c00007 	ldb	r3,0(r2)
   408fc:	183ffd1e 	bne	r3,zero,408f4 <__alt_data_end+0xfffd97f4>
   40900:	1105c83a 	sub	r2,r2,r4
   40904:	f800283a 	ret
   40908:	2005883a 	mov	r2,r4
   4090c:	003fe706 	br	408ac <__alt_data_end+0xfffd97ac>
   40910:	0005883a 	mov	r2,zero
   40914:	f800283a 	ret

00040918 <__fp_unlock>:
   40918:	0005883a 	mov	r2,zero
   4091c:	f800283a 	ret

00040920 <_cleanup_r>:
   40920:	01400134 	movhi	r5,4
   40924:	294aa904 	addi	r5,r5,10916
   40928:	00412381 	jmpi	41238 <_fwalk_reent>

0004092c <__sinit.part.1>:
   4092c:	defff704 	addi	sp,sp,-36
   40930:	00c00134 	movhi	r3,4
   40934:	dfc00815 	stw	ra,32(sp)
   40938:	ddc00715 	stw	r23,28(sp)
   4093c:	dd800615 	stw	r22,24(sp)
   40940:	dd400515 	stw	r21,20(sp)
   40944:	dd000415 	stw	r20,16(sp)
   40948:	dcc00315 	stw	r19,12(sp)
   4094c:	dc800215 	stw	r18,8(sp)
   40950:	dc400115 	stw	r17,4(sp)
   40954:	dc000015 	stw	r16,0(sp)
   40958:	18c24804 	addi	r3,r3,2336
   4095c:	24000117 	ldw	r16,4(r4)
   40960:	20c00f15 	stw	r3,60(r4)
   40964:	2080bb04 	addi	r2,r4,748
   40968:	00c000c4 	movi	r3,3
   4096c:	20c0b915 	stw	r3,740(r4)
   40970:	2080ba15 	stw	r2,744(r4)
   40974:	2000b815 	stw	zero,736(r4)
   40978:	05c00204 	movi	r23,8
   4097c:	00800104 	movi	r2,4
   40980:	2025883a 	mov	r18,r4
   40984:	b80d883a 	mov	r6,r23
   40988:	81001704 	addi	r4,r16,92
   4098c:	000b883a 	mov	r5,zero
   40990:	80000015 	stw	zero,0(r16)
   40994:	80000115 	stw	zero,4(r16)
   40998:	80000215 	stw	zero,8(r16)
   4099c:	8080030d 	sth	r2,12(r16)
   409a0:	80001915 	stw	zero,100(r16)
   409a4:	8000038d 	sth	zero,14(r16)
   409a8:	80000415 	stw	zero,16(r16)
   409ac:	80000515 	stw	zero,20(r16)
   409b0:	80000615 	stw	zero,24(r16)
   409b4:	0041e900 	call	41e90 <memset>
   409b8:	05800134 	movhi	r22,4
   409bc:	94400217 	ldw	r17,8(r18)
   409c0:	05400134 	movhi	r21,4
   409c4:	05000134 	movhi	r20,4
   409c8:	04c00134 	movhi	r19,4
   409cc:	b589d804 	addi	r22,r22,10080
   409d0:	ad49ef04 	addi	r21,r21,10172
   409d4:	a50a0e04 	addi	r20,r20,10296
   409d8:	9cca2504 	addi	r19,r19,10388
   409dc:	85800815 	stw	r22,32(r16)
   409e0:	85400915 	stw	r21,36(r16)
   409e4:	85000a15 	stw	r20,40(r16)
   409e8:	84c00b15 	stw	r19,44(r16)
   409ec:	84000715 	stw	r16,28(r16)
   409f0:	00800284 	movi	r2,10
   409f4:	8880030d 	sth	r2,12(r17)
   409f8:	00800044 	movi	r2,1
   409fc:	b80d883a 	mov	r6,r23
   40a00:	89001704 	addi	r4,r17,92
   40a04:	000b883a 	mov	r5,zero
   40a08:	88000015 	stw	zero,0(r17)
   40a0c:	88000115 	stw	zero,4(r17)
   40a10:	88000215 	stw	zero,8(r17)
   40a14:	88001915 	stw	zero,100(r17)
   40a18:	8880038d 	sth	r2,14(r17)
   40a1c:	88000415 	stw	zero,16(r17)
   40a20:	88000515 	stw	zero,20(r17)
   40a24:	88000615 	stw	zero,24(r17)
   40a28:	0041e900 	call	41e90 <memset>
   40a2c:	94000317 	ldw	r16,12(r18)
   40a30:	00800484 	movi	r2,18
   40a34:	8c400715 	stw	r17,28(r17)
   40a38:	8d800815 	stw	r22,32(r17)
   40a3c:	8d400915 	stw	r21,36(r17)
   40a40:	8d000a15 	stw	r20,40(r17)
   40a44:	8cc00b15 	stw	r19,44(r17)
   40a48:	8080030d 	sth	r2,12(r16)
   40a4c:	00800084 	movi	r2,2
   40a50:	80000015 	stw	zero,0(r16)
   40a54:	80000115 	stw	zero,4(r16)
   40a58:	80000215 	stw	zero,8(r16)
   40a5c:	80001915 	stw	zero,100(r16)
   40a60:	8080038d 	sth	r2,14(r16)
   40a64:	80000415 	stw	zero,16(r16)
   40a68:	80000515 	stw	zero,20(r16)
   40a6c:	80000615 	stw	zero,24(r16)
   40a70:	b80d883a 	mov	r6,r23
   40a74:	000b883a 	mov	r5,zero
   40a78:	81001704 	addi	r4,r16,92
   40a7c:	0041e900 	call	41e90 <memset>
   40a80:	00800044 	movi	r2,1
   40a84:	84000715 	stw	r16,28(r16)
   40a88:	85800815 	stw	r22,32(r16)
   40a8c:	85400915 	stw	r21,36(r16)
   40a90:	85000a15 	stw	r20,40(r16)
   40a94:	84c00b15 	stw	r19,44(r16)
   40a98:	90800e15 	stw	r2,56(r18)
   40a9c:	dfc00817 	ldw	ra,32(sp)
   40aa0:	ddc00717 	ldw	r23,28(sp)
   40aa4:	dd800617 	ldw	r22,24(sp)
   40aa8:	dd400517 	ldw	r21,20(sp)
   40aac:	dd000417 	ldw	r20,16(sp)
   40ab0:	dcc00317 	ldw	r19,12(sp)
   40ab4:	dc800217 	ldw	r18,8(sp)
   40ab8:	dc400117 	ldw	r17,4(sp)
   40abc:	dc000017 	ldw	r16,0(sp)
   40ac0:	dec00904 	addi	sp,sp,36
   40ac4:	f800283a 	ret

00040ac8 <__fp_lock>:
   40ac8:	0005883a 	mov	r2,zero
   40acc:	f800283a 	ret

00040ad0 <__sfmoreglue>:
   40ad0:	defffc04 	addi	sp,sp,-16
   40ad4:	dc400115 	stw	r17,4(sp)
   40ad8:	2c7fffc4 	addi	r17,r5,-1
   40adc:	8c401a24 	muli	r17,r17,104
   40ae0:	dc800215 	stw	r18,8(sp)
   40ae4:	2825883a 	mov	r18,r5
   40ae8:	89401d04 	addi	r5,r17,116
   40aec:	dc000015 	stw	r16,0(sp)
   40af0:	dfc00315 	stw	ra,12(sp)
   40af4:	00412fc0 	call	412fc <_malloc_r>
   40af8:	1021883a 	mov	r16,r2
   40afc:	10000726 	beq	r2,zero,40b1c <__sfmoreglue+0x4c>
   40b00:	11000304 	addi	r4,r2,12
   40b04:	10000015 	stw	zero,0(r2)
   40b08:	14800115 	stw	r18,4(r2)
   40b0c:	11000215 	stw	r4,8(r2)
   40b10:	89801a04 	addi	r6,r17,104
   40b14:	000b883a 	mov	r5,zero
   40b18:	0041e900 	call	41e90 <memset>
   40b1c:	8005883a 	mov	r2,r16
   40b20:	dfc00317 	ldw	ra,12(sp)
   40b24:	dc800217 	ldw	r18,8(sp)
   40b28:	dc400117 	ldw	r17,4(sp)
   40b2c:	dc000017 	ldw	r16,0(sp)
   40b30:	dec00404 	addi	sp,sp,16
   40b34:	f800283a 	ret

00040b38 <__sfp>:
   40b38:	defffb04 	addi	sp,sp,-20
   40b3c:	dc000015 	stw	r16,0(sp)
   40b40:	04000134 	movhi	r16,4
   40b44:	841e8c04 	addi	r16,r16,31280
   40b48:	dcc00315 	stw	r19,12(sp)
   40b4c:	2027883a 	mov	r19,r4
   40b50:	81000017 	ldw	r4,0(r16)
   40b54:	dfc00415 	stw	ra,16(sp)
   40b58:	dc800215 	stw	r18,8(sp)
   40b5c:	20800e17 	ldw	r2,56(r4)
   40b60:	dc400115 	stw	r17,4(sp)
   40b64:	1000021e 	bne	r2,zero,40b70 <__sfp+0x38>
   40b68:	004092c0 	call	4092c <__sinit.part.1>
   40b6c:	81000017 	ldw	r4,0(r16)
   40b70:	2480b804 	addi	r18,r4,736
   40b74:	047fffc4 	movi	r17,-1
   40b78:	91000117 	ldw	r4,4(r18)
   40b7c:	94000217 	ldw	r16,8(r18)
   40b80:	213fffc4 	addi	r4,r4,-1
   40b84:	20000a16 	blt	r4,zero,40bb0 <__sfp+0x78>
   40b88:	8080030f 	ldh	r2,12(r16)
   40b8c:	10000c26 	beq	r2,zero,40bc0 <__sfp+0x88>
   40b90:	80c01d04 	addi	r3,r16,116
   40b94:	00000206 	br	40ba0 <__sfp+0x68>
   40b98:	18bfe60f 	ldh	r2,-104(r3)
   40b9c:	10000826 	beq	r2,zero,40bc0 <__sfp+0x88>
   40ba0:	213fffc4 	addi	r4,r4,-1
   40ba4:	1c3ffd04 	addi	r16,r3,-12
   40ba8:	18c01a04 	addi	r3,r3,104
   40bac:	247ffa1e 	bne	r4,r17,40b98 <__alt_data_end+0xfffd9a98>
   40bb0:	90800017 	ldw	r2,0(r18)
   40bb4:	10001d26 	beq	r2,zero,40c2c <__sfp+0xf4>
   40bb8:	1025883a 	mov	r18,r2
   40bbc:	003fee06 	br	40b78 <__alt_data_end+0xfffd9a78>
   40bc0:	00bfffc4 	movi	r2,-1
   40bc4:	8080038d 	sth	r2,14(r16)
   40bc8:	00800044 	movi	r2,1
   40bcc:	8080030d 	sth	r2,12(r16)
   40bd0:	80001915 	stw	zero,100(r16)
   40bd4:	80000015 	stw	zero,0(r16)
   40bd8:	80000215 	stw	zero,8(r16)
   40bdc:	80000115 	stw	zero,4(r16)
   40be0:	80000415 	stw	zero,16(r16)
   40be4:	80000515 	stw	zero,20(r16)
   40be8:	80000615 	stw	zero,24(r16)
   40bec:	01800204 	movi	r6,8
   40bf0:	000b883a 	mov	r5,zero
   40bf4:	81001704 	addi	r4,r16,92
   40bf8:	0041e900 	call	41e90 <memset>
   40bfc:	8005883a 	mov	r2,r16
   40c00:	80000c15 	stw	zero,48(r16)
   40c04:	80000d15 	stw	zero,52(r16)
   40c08:	80001115 	stw	zero,68(r16)
   40c0c:	80001215 	stw	zero,72(r16)
   40c10:	dfc00417 	ldw	ra,16(sp)
   40c14:	dcc00317 	ldw	r19,12(sp)
   40c18:	dc800217 	ldw	r18,8(sp)
   40c1c:	dc400117 	ldw	r17,4(sp)
   40c20:	dc000017 	ldw	r16,0(sp)
   40c24:	dec00504 	addi	sp,sp,20
   40c28:	f800283a 	ret
   40c2c:	01400104 	movi	r5,4
   40c30:	9809883a 	mov	r4,r19
   40c34:	0040ad00 	call	40ad0 <__sfmoreglue>
   40c38:	90800015 	stw	r2,0(r18)
   40c3c:	103fde1e 	bne	r2,zero,40bb8 <__alt_data_end+0xfffd9ab8>
   40c40:	00800304 	movi	r2,12
   40c44:	98800015 	stw	r2,0(r19)
   40c48:	0005883a 	mov	r2,zero
   40c4c:	003ff006 	br	40c10 <__alt_data_end+0xfffd9b10>

00040c50 <_cleanup>:
   40c50:	00800134 	movhi	r2,4
   40c54:	109e8c04 	addi	r2,r2,31280
   40c58:	11000017 	ldw	r4,0(r2)
   40c5c:	01400134 	movhi	r5,4
   40c60:	294aa904 	addi	r5,r5,10916
   40c64:	00412381 	jmpi	41238 <_fwalk_reent>

00040c68 <__sinit>:
   40c68:	20800e17 	ldw	r2,56(r4)
   40c6c:	10000126 	beq	r2,zero,40c74 <__sinit+0xc>
   40c70:	f800283a 	ret
   40c74:	004092c1 	jmpi	4092c <__sinit.part.1>

00040c78 <__sfp_lock_acquire>:
   40c78:	f800283a 	ret

00040c7c <__sfp_lock_release>:
   40c7c:	f800283a 	ret

00040c80 <__sinit_lock_acquire>:
   40c80:	f800283a 	ret

00040c84 <__sinit_lock_release>:
   40c84:	f800283a 	ret

00040c88 <__fp_lock_all>:
   40c88:	00800134 	movhi	r2,4
   40c8c:	109e8d04 	addi	r2,r2,31284
   40c90:	11000017 	ldw	r4,0(r2)
   40c94:	01400134 	movhi	r5,4
   40c98:	2942b204 	addi	r5,r5,2760
   40c9c:	00411741 	jmpi	41174 <_fwalk>

00040ca0 <__fp_unlock_all>:
   40ca0:	00800134 	movhi	r2,4
   40ca4:	109e8d04 	addi	r2,r2,31284
   40ca8:	11000017 	ldw	r4,0(r2)
   40cac:	01400134 	movhi	r5,4
   40cb0:	29424604 	addi	r5,r5,2328
   40cb4:	00411741 	jmpi	41174 <_fwalk>

00040cb8 <__sfvwrite_r>:
   40cb8:	30800217 	ldw	r2,8(r6)
   40cbc:	10006726 	beq	r2,zero,40e5c <__sfvwrite_r+0x1a4>
   40cc0:	28c0030b 	ldhu	r3,12(r5)
   40cc4:	defff404 	addi	sp,sp,-48
   40cc8:	dd400715 	stw	r21,28(sp)
   40ccc:	dd000615 	stw	r20,24(sp)
   40cd0:	dc000215 	stw	r16,8(sp)
   40cd4:	dfc00b15 	stw	ra,44(sp)
   40cd8:	df000a15 	stw	fp,40(sp)
   40cdc:	ddc00915 	stw	r23,36(sp)
   40ce0:	dd800815 	stw	r22,32(sp)
   40ce4:	dcc00515 	stw	r19,20(sp)
   40ce8:	dc800415 	stw	r18,16(sp)
   40cec:	dc400315 	stw	r17,12(sp)
   40cf0:	1880020c 	andi	r2,r3,8
   40cf4:	2821883a 	mov	r16,r5
   40cf8:	202b883a 	mov	r21,r4
   40cfc:	3029883a 	mov	r20,r6
   40d00:	10002726 	beq	r2,zero,40da0 <__sfvwrite_r+0xe8>
   40d04:	28800417 	ldw	r2,16(r5)
   40d08:	10002526 	beq	r2,zero,40da0 <__sfvwrite_r+0xe8>
   40d0c:	1880008c 	andi	r2,r3,2
   40d10:	a4400017 	ldw	r17,0(r20)
   40d14:	10002a26 	beq	r2,zero,40dc0 <__sfvwrite_r+0x108>
   40d18:	05a00034 	movhi	r22,32768
   40d1c:	0027883a 	mov	r19,zero
   40d20:	0025883a 	mov	r18,zero
   40d24:	b5bf0004 	addi	r22,r22,-1024
   40d28:	980d883a 	mov	r6,r19
   40d2c:	a809883a 	mov	r4,r21
   40d30:	90004626 	beq	r18,zero,40e4c <__sfvwrite_r+0x194>
   40d34:	900f883a 	mov	r7,r18
   40d38:	b480022e 	bgeu	r22,r18,40d44 <__sfvwrite_r+0x8c>
   40d3c:	01e00034 	movhi	r7,32768
   40d40:	39ff0004 	addi	r7,r7,-1024
   40d44:	80800917 	ldw	r2,36(r16)
   40d48:	81400717 	ldw	r5,28(r16)
   40d4c:	103ee83a 	callr	r2
   40d50:	0080570e 	bge	zero,r2,40eb0 <__sfvwrite_r+0x1f8>
   40d54:	a0c00217 	ldw	r3,8(r20)
   40d58:	98a7883a 	add	r19,r19,r2
   40d5c:	90a5c83a 	sub	r18,r18,r2
   40d60:	1885c83a 	sub	r2,r3,r2
   40d64:	a0800215 	stw	r2,8(r20)
   40d68:	103fef1e 	bne	r2,zero,40d28 <__alt_data_end+0xfffd9c28>
   40d6c:	0005883a 	mov	r2,zero
   40d70:	dfc00b17 	ldw	ra,44(sp)
   40d74:	df000a17 	ldw	fp,40(sp)
   40d78:	ddc00917 	ldw	r23,36(sp)
   40d7c:	dd800817 	ldw	r22,32(sp)
   40d80:	dd400717 	ldw	r21,28(sp)
   40d84:	dd000617 	ldw	r20,24(sp)
   40d88:	dcc00517 	ldw	r19,20(sp)
   40d8c:	dc800417 	ldw	r18,16(sp)
   40d90:	dc400317 	ldw	r17,12(sp)
   40d94:	dc000217 	ldw	r16,8(sp)
   40d98:	dec00c04 	addi	sp,sp,48
   40d9c:	f800283a 	ret
   40da0:	800b883a 	mov	r5,r16
   40da4:	a809883a 	mov	r4,r21
   40da8:	00428fc0 	call	428fc <__swsetup_r>
   40dac:	1000eb1e 	bne	r2,zero,4115c <__sfvwrite_r+0x4a4>
   40db0:	80c0030b 	ldhu	r3,12(r16)
   40db4:	a4400017 	ldw	r17,0(r20)
   40db8:	1880008c 	andi	r2,r3,2
   40dbc:	103fd61e 	bne	r2,zero,40d18 <__alt_data_end+0xfffd9c18>
   40dc0:	1880004c 	andi	r2,r3,1
   40dc4:	10003f1e 	bne	r2,zero,40ec4 <__sfvwrite_r+0x20c>
   40dc8:	0039883a 	mov	fp,zero
   40dcc:	0025883a 	mov	r18,zero
   40dd0:	90001a26 	beq	r18,zero,40e3c <__sfvwrite_r+0x184>
   40dd4:	1880800c 	andi	r2,r3,512
   40dd8:	84c00217 	ldw	r19,8(r16)
   40ddc:	10002126 	beq	r2,zero,40e64 <__sfvwrite_r+0x1ac>
   40de0:	982f883a 	mov	r23,r19
   40de4:	94c09336 	bltu	r18,r19,41034 <__sfvwrite_r+0x37c>
   40de8:	1881200c 	andi	r2,r3,1152
   40dec:	10009e1e 	bne	r2,zero,41068 <__sfvwrite_r+0x3b0>
   40df0:	81000017 	ldw	r4,0(r16)
   40df4:	b80d883a 	mov	r6,r23
   40df8:	e00b883a 	mov	r5,fp
   40dfc:	0041d340 	call	41d34 <memmove>
   40e00:	80c00217 	ldw	r3,8(r16)
   40e04:	81000017 	ldw	r4,0(r16)
   40e08:	9005883a 	mov	r2,r18
   40e0c:	1ce7c83a 	sub	r19,r3,r19
   40e10:	25cf883a 	add	r7,r4,r23
   40e14:	84c00215 	stw	r19,8(r16)
   40e18:	81c00015 	stw	r7,0(r16)
   40e1c:	a0c00217 	ldw	r3,8(r20)
   40e20:	e0b9883a 	add	fp,fp,r2
   40e24:	90a5c83a 	sub	r18,r18,r2
   40e28:	18a7c83a 	sub	r19,r3,r2
   40e2c:	a4c00215 	stw	r19,8(r20)
   40e30:	983fce26 	beq	r19,zero,40d6c <__alt_data_end+0xfffd9c6c>
   40e34:	80c0030b 	ldhu	r3,12(r16)
   40e38:	903fe61e 	bne	r18,zero,40dd4 <__alt_data_end+0xfffd9cd4>
   40e3c:	8f000017 	ldw	fp,0(r17)
   40e40:	8c800117 	ldw	r18,4(r17)
   40e44:	8c400204 	addi	r17,r17,8
   40e48:	003fe106 	br	40dd0 <__alt_data_end+0xfffd9cd0>
   40e4c:	8cc00017 	ldw	r19,0(r17)
   40e50:	8c800117 	ldw	r18,4(r17)
   40e54:	8c400204 	addi	r17,r17,8
   40e58:	003fb306 	br	40d28 <__alt_data_end+0xfffd9c28>
   40e5c:	0005883a 	mov	r2,zero
   40e60:	f800283a 	ret
   40e64:	81000017 	ldw	r4,0(r16)
   40e68:	80800417 	ldw	r2,16(r16)
   40e6c:	11005736 	bltu	r2,r4,40fcc <__sfvwrite_r+0x314>
   40e70:	85c00517 	ldw	r23,20(r16)
   40e74:	95c05536 	bltu	r18,r23,40fcc <__sfvwrite_r+0x314>
   40e78:	00a00034 	movhi	r2,32768
   40e7c:	10bfffc4 	addi	r2,r2,-1
   40e80:	9009883a 	mov	r4,r18
   40e84:	1480012e 	bgeu	r2,r18,40e8c <__sfvwrite_r+0x1d4>
   40e88:	1009883a 	mov	r4,r2
   40e8c:	b80b883a 	mov	r5,r23
   40e90:	00404780 	call	40478 <__divsi3>
   40e94:	15cf383a 	mul	r7,r2,r23
   40e98:	81400717 	ldw	r5,28(r16)
   40e9c:	80800917 	ldw	r2,36(r16)
   40ea0:	e00d883a 	mov	r6,fp
   40ea4:	a809883a 	mov	r4,r21
   40ea8:	103ee83a 	callr	r2
   40eac:	00bfdb16 	blt	zero,r2,40e1c <__alt_data_end+0xfffd9d1c>
   40eb0:	8080030b 	ldhu	r2,12(r16)
   40eb4:	10801014 	ori	r2,r2,64
   40eb8:	8080030d 	sth	r2,12(r16)
   40ebc:	00bfffc4 	movi	r2,-1
   40ec0:	003fab06 	br	40d70 <__alt_data_end+0xfffd9c70>
   40ec4:	0027883a 	mov	r19,zero
   40ec8:	0011883a 	mov	r8,zero
   40ecc:	0039883a 	mov	fp,zero
   40ed0:	0025883a 	mov	r18,zero
   40ed4:	90001f26 	beq	r18,zero,40f54 <__sfvwrite_r+0x29c>
   40ed8:	40005a26 	beq	r8,zero,41044 <__sfvwrite_r+0x38c>
   40edc:	982d883a 	mov	r22,r19
   40ee0:	94c0012e 	bgeu	r18,r19,40ee8 <__sfvwrite_r+0x230>
   40ee4:	902d883a 	mov	r22,r18
   40ee8:	81000017 	ldw	r4,0(r16)
   40eec:	80800417 	ldw	r2,16(r16)
   40ef0:	b02f883a 	mov	r23,r22
   40ef4:	81c00517 	ldw	r7,20(r16)
   40ef8:	1100032e 	bgeu	r2,r4,40f08 <__sfvwrite_r+0x250>
   40efc:	80c00217 	ldw	r3,8(r16)
   40f00:	38c7883a 	add	r3,r7,r3
   40f04:	1d801816 	blt	r3,r22,40f68 <__sfvwrite_r+0x2b0>
   40f08:	b1c03e16 	blt	r22,r7,41004 <__sfvwrite_r+0x34c>
   40f0c:	80800917 	ldw	r2,36(r16)
   40f10:	81400717 	ldw	r5,28(r16)
   40f14:	e00d883a 	mov	r6,fp
   40f18:	da000115 	stw	r8,4(sp)
   40f1c:	a809883a 	mov	r4,r21
   40f20:	103ee83a 	callr	r2
   40f24:	102f883a 	mov	r23,r2
   40f28:	da000117 	ldw	r8,4(sp)
   40f2c:	00bfe00e 	bge	zero,r2,40eb0 <__alt_data_end+0xfffd9db0>
   40f30:	9de7c83a 	sub	r19,r19,r23
   40f34:	98001f26 	beq	r19,zero,40fb4 <__sfvwrite_r+0x2fc>
   40f38:	a0800217 	ldw	r2,8(r20)
   40f3c:	e5f9883a 	add	fp,fp,r23
   40f40:	95e5c83a 	sub	r18,r18,r23
   40f44:	15efc83a 	sub	r23,r2,r23
   40f48:	a5c00215 	stw	r23,8(r20)
   40f4c:	b83f8726 	beq	r23,zero,40d6c <__alt_data_end+0xfffd9c6c>
   40f50:	903fe11e 	bne	r18,zero,40ed8 <__alt_data_end+0xfffd9dd8>
   40f54:	8f000017 	ldw	fp,0(r17)
   40f58:	8c800117 	ldw	r18,4(r17)
   40f5c:	0011883a 	mov	r8,zero
   40f60:	8c400204 	addi	r17,r17,8
   40f64:	003fdb06 	br	40ed4 <__alt_data_end+0xfffd9dd4>
   40f68:	180d883a 	mov	r6,r3
   40f6c:	e00b883a 	mov	r5,fp
   40f70:	da000115 	stw	r8,4(sp)
   40f74:	d8c00015 	stw	r3,0(sp)
   40f78:	0041d340 	call	41d34 <memmove>
   40f7c:	d8c00017 	ldw	r3,0(sp)
   40f80:	80800017 	ldw	r2,0(r16)
   40f84:	800b883a 	mov	r5,r16
   40f88:	a809883a 	mov	r4,r21
   40f8c:	10c5883a 	add	r2,r2,r3
   40f90:	80800015 	stw	r2,0(r16)
   40f94:	d8c00015 	stw	r3,0(sp)
   40f98:	0042dc40 	call	42dc4 <_fflush_r>
   40f9c:	d8c00017 	ldw	r3,0(sp)
   40fa0:	da000117 	ldw	r8,4(sp)
   40fa4:	103fc21e 	bne	r2,zero,40eb0 <__alt_data_end+0xfffd9db0>
   40fa8:	182f883a 	mov	r23,r3
   40fac:	9de7c83a 	sub	r19,r19,r23
   40fb0:	983fe11e 	bne	r19,zero,40f38 <__alt_data_end+0xfffd9e38>
   40fb4:	800b883a 	mov	r5,r16
   40fb8:	a809883a 	mov	r4,r21
   40fbc:	0042dc40 	call	42dc4 <_fflush_r>
   40fc0:	103fbb1e 	bne	r2,zero,40eb0 <__alt_data_end+0xfffd9db0>
   40fc4:	0011883a 	mov	r8,zero
   40fc8:	003fdb06 	br	40f38 <__alt_data_end+0xfffd9e38>
   40fcc:	94c0012e 	bgeu	r18,r19,40fd4 <__sfvwrite_r+0x31c>
   40fd0:	9027883a 	mov	r19,r18
   40fd4:	980d883a 	mov	r6,r19
   40fd8:	e00b883a 	mov	r5,fp
   40fdc:	0041d340 	call	41d34 <memmove>
   40fe0:	80800217 	ldw	r2,8(r16)
   40fe4:	80c00017 	ldw	r3,0(r16)
   40fe8:	14c5c83a 	sub	r2,r2,r19
   40fec:	1cc7883a 	add	r3,r3,r19
   40ff0:	80800215 	stw	r2,8(r16)
   40ff4:	80c00015 	stw	r3,0(r16)
   40ff8:	10004326 	beq	r2,zero,41108 <__sfvwrite_r+0x450>
   40ffc:	9805883a 	mov	r2,r19
   41000:	003f8606 	br	40e1c <__alt_data_end+0xfffd9d1c>
   41004:	b00d883a 	mov	r6,r22
   41008:	e00b883a 	mov	r5,fp
   4100c:	da000115 	stw	r8,4(sp)
   41010:	0041d340 	call	41d34 <memmove>
   41014:	80800217 	ldw	r2,8(r16)
   41018:	80c00017 	ldw	r3,0(r16)
   4101c:	da000117 	ldw	r8,4(sp)
   41020:	1585c83a 	sub	r2,r2,r22
   41024:	1dad883a 	add	r22,r3,r22
   41028:	80800215 	stw	r2,8(r16)
   4102c:	85800015 	stw	r22,0(r16)
   41030:	003fbf06 	br	40f30 <__alt_data_end+0xfffd9e30>
   41034:	81000017 	ldw	r4,0(r16)
   41038:	9027883a 	mov	r19,r18
   4103c:	902f883a 	mov	r23,r18
   41040:	003f6c06 	br	40df4 <__alt_data_end+0xfffd9cf4>
   41044:	900d883a 	mov	r6,r18
   41048:	01400284 	movi	r5,10
   4104c:	e009883a 	mov	r4,fp
   41050:	0041b080 	call	41b08 <memchr>
   41054:	10003e26 	beq	r2,zero,41150 <__sfvwrite_r+0x498>
   41058:	10800044 	addi	r2,r2,1
   4105c:	1727c83a 	sub	r19,r2,fp
   41060:	02000044 	movi	r8,1
   41064:	003f9d06 	br	40edc <__alt_data_end+0xfffd9ddc>
   41068:	80800517 	ldw	r2,20(r16)
   4106c:	81400417 	ldw	r5,16(r16)
   41070:	81c00017 	ldw	r7,0(r16)
   41074:	10a7883a 	add	r19,r2,r2
   41078:	9885883a 	add	r2,r19,r2
   4107c:	1026d7fa 	srli	r19,r2,31
   41080:	396dc83a 	sub	r22,r7,r5
   41084:	b1000044 	addi	r4,r22,1
   41088:	9885883a 	add	r2,r19,r2
   4108c:	1027d07a 	srai	r19,r2,1
   41090:	2485883a 	add	r2,r4,r18
   41094:	980d883a 	mov	r6,r19
   41098:	9880022e 	bgeu	r19,r2,410a4 <__sfvwrite_r+0x3ec>
   4109c:	1027883a 	mov	r19,r2
   410a0:	100d883a 	mov	r6,r2
   410a4:	18c1000c 	andi	r3,r3,1024
   410a8:	18001c26 	beq	r3,zero,4111c <__sfvwrite_r+0x464>
   410ac:	300b883a 	mov	r5,r6
   410b0:	a809883a 	mov	r4,r21
   410b4:	00412fc0 	call	412fc <_malloc_r>
   410b8:	102f883a 	mov	r23,r2
   410bc:	10002926 	beq	r2,zero,41164 <__sfvwrite_r+0x4ac>
   410c0:	81400417 	ldw	r5,16(r16)
   410c4:	b00d883a 	mov	r6,r22
   410c8:	1009883a 	mov	r4,r2
   410cc:	0041bec0 	call	41bec <memcpy>
   410d0:	8080030b 	ldhu	r2,12(r16)
   410d4:	00fedfc4 	movi	r3,-1153
   410d8:	10c4703a 	and	r2,r2,r3
   410dc:	10802014 	ori	r2,r2,128
   410e0:	8080030d 	sth	r2,12(r16)
   410e4:	bd89883a 	add	r4,r23,r22
   410e8:	9d8fc83a 	sub	r7,r19,r22
   410ec:	85c00415 	stw	r23,16(r16)
   410f0:	84c00515 	stw	r19,20(r16)
   410f4:	81000015 	stw	r4,0(r16)
   410f8:	9027883a 	mov	r19,r18
   410fc:	81c00215 	stw	r7,8(r16)
   41100:	902f883a 	mov	r23,r18
   41104:	003f3b06 	br	40df4 <__alt_data_end+0xfffd9cf4>
   41108:	800b883a 	mov	r5,r16
   4110c:	a809883a 	mov	r4,r21
   41110:	0042dc40 	call	42dc4 <_fflush_r>
   41114:	103fb926 	beq	r2,zero,40ffc <__alt_data_end+0xfffd9efc>
   41118:	003f6506 	br	40eb0 <__alt_data_end+0xfffd9db0>
   4111c:	a809883a 	mov	r4,r21
   41120:	0041fb80 	call	41fb8 <_realloc_r>
   41124:	102f883a 	mov	r23,r2
   41128:	103fee1e 	bne	r2,zero,410e4 <__alt_data_end+0xfffd9fe4>
   4112c:	81400417 	ldw	r5,16(r16)
   41130:	a809883a 	mov	r4,r21
   41134:	0042f740 	call	42f74 <_free_r>
   41138:	8080030b 	ldhu	r2,12(r16)
   4113c:	00ffdfc4 	movi	r3,-129
   41140:	1884703a 	and	r2,r3,r2
   41144:	00c00304 	movi	r3,12
   41148:	a8c00015 	stw	r3,0(r21)
   4114c:	003f5906 	br	40eb4 <__alt_data_end+0xfffd9db4>
   41150:	94c00044 	addi	r19,r18,1
   41154:	02000044 	movi	r8,1
   41158:	003f6006 	br	40edc <__alt_data_end+0xfffd9ddc>
   4115c:	00bfffc4 	movi	r2,-1
   41160:	003f0306 	br	40d70 <__alt_data_end+0xfffd9c70>
   41164:	00800304 	movi	r2,12
   41168:	a8800015 	stw	r2,0(r21)
   4116c:	8080030b 	ldhu	r2,12(r16)
   41170:	003f5006 	br	40eb4 <__alt_data_end+0xfffd9db4>

00041174 <_fwalk>:
   41174:	defff704 	addi	sp,sp,-36
   41178:	dd000415 	stw	r20,16(sp)
   4117c:	dfc00815 	stw	ra,32(sp)
   41180:	ddc00715 	stw	r23,28(sp)
   41184:	dd800615 	stw	r22,24(sp)
   41188:	dd400515 	stw	r21,20(sp)
   4118c:	dcc00315 	stw	r19,12(sp)
   41190:	dc800215 	stw	r18,8(sp)
   41194:	dc400115 	stw	r17,4(sp)
   41198:	dc000015 	stw	r16,0(sp)
   4119c:	2500b804 	addi	r20,r4,736
   411a0:	a0002326 	beq	r20,zero,41230 <_fwalk+0xbc>
   411a4:	282b883a 	mov	r21,r5
   411a8:	002f883a 	mov	r23,zero
   411ac:	05800044 	movi	r22,1
   411b0:	04ffffc4 	movi	r19,-1
   411b4:	a4400117 	ldw	r17,4(r20)
   411b8:	a4800217 	ldw	r18,8(r20)
   411bc:	8c7fffc4 	addi	r17,r17,-1
   411c0:	88000d16 	blt	r17,zero,411f8 <_fwalk+0x84>
   411c4:	94000304 	addi	r16,r18,12
   411c8:	94800384 	addi	r18,r18,14
   411cc:	8080000b 	ldhu	r2,0(r16)
   411d0:	8c7fffc4 	addi	r17,r17,-1
   411d4:	813ffd04 	addi	r4,r16,-12
   411d8:	b080042e 	bgeu	r22,r2,411ec <_fwalk+0x78>
   411dc:	9080000f 	ldh	r2,0(r18)
   411e0:	14c00226 	beq	r2,r19,411ec <_fwalk+0x78>
   411e4:	a83ee83a 	callr	r21
   411e8:	b8aeb03a 	or	r23,r23,r2
   411ec:	84001a04 	addi	r16,r16,104
   411f0:	94801a04 	addi	r18,r18,104
   411f4:	8cfff51e 	bne	r17,r19,411cc <__alt_data_end+0xfffda0cc>
   411f8:	a5000017 	ldw	r20,0(r20)
   411fc:	a03fed1e 	bne	r20,zero,411b4 <__alt_data_end+0xfffda0b4>
   41200:	b805883a 	mov	r2,r23
   41204:	dfc00817 	ldw	ra,32(sp)
   41208:	ddc00717 	ldw	r23,28(sp)
   4120c:	dd800617 	ldw	r22,24(sp)
   41210:	dd400517 	ldw	r21,20(sp)
   41214:	dd000417 	ldw	r20,16(sp)
   41218:	dcc00317 	ldw	r19,12(sp)
   4121c:	dc800217 	ldw	r18,8(sp)
   41220:	dc400117 	ldw	r17,4(sp)
   41224:	dc000017 	ldw	r16,0(sp)
   41228:	dec00904 	addi	sp,sp,36
   4122c:	f800283a 	ret
   41230:	002f883a 	mov	r23,zero
   41234:	003ff206 	br	41200 <__alt_data_end+0xfffda100>

00041238 <_fwalk_reent>:
   41238:	defff704 	addi	sp,sp,-36
   4123c:	dd000415 	stw	r20,16(sp)
   41240:	dfc00815 	stw	ra,32(sp)
   41244:	ddc00715 	stw	r23,28(sp)
   41248:	dd800615 	stw	r22,24(sp)
   4124c:	dd400515 	stw	r21,20(sp)
   41250:	dcc00315 	stw	r19,12(sp)
   41254:	dc800215 	stw	r18,8(sp)
   41258:	dc400115 	stw	r17,4(sp)
   4125c:	dc000015 	stw	r16,0(sp)
   41260:	2500b804 	addi	r20,r4,736
   41264:	a0002326 	beq	r20,zero,412f4 <_fwalk_reent+0xbc>
   41268:	282b883a 	mov	r21,r5
   4126c:	2027883a 	mov	r19,r4
   41270:	002f883a 	mov	r23,zero
   41274:	05800044 	movi	r22,1
   41278:	04bfffc4 	movi	r18,-1
   4127c:	a4400117 	ldw	r17,4(r20)
   41280:	a4000217 	ldw	r16,8(r20)
   41284:	8c7fffc4 	addi	r17,r17,-1
   41288:	88000c16 	blt	r17,zero,412bc <_fwalk_reent+0x84>
   4128c:	84000304 	addi	r16,r16,12
   41290:	8080000b 	ldhu	r2,0(r16)
   41294:	8c7fffc4 	addi	r17,r17,-1
   41298:	817ffd04 	addi	r5,r16,-12
   4129c:	b080052e 	bgeu	r22,r2,412b4 <_fwalk_reent+0x7c>
   412a0:	8080008f 	ldh	r2,2(r16)
   412a4:	9809883a 	mov	r4,r19
   412a8:	14800226 	beq	r2,r18,412b4 <_fwalk_reent+0x7c>
   412ac:	a83ee83a 	callr	r21
   412b0:	b8aeb03a 	or	r23,r23,r2
   412b4:	84001a04 	addi	r16,r16,104
   412b8:	8cbff51e 	bne	r17,r18,41290 <__alt_data_end+0xfffda190>
   412bc:	a5000017 	ldw	r20,0(r20)
   412c0:	a03fee1e 	bne	r20,zero,4127c <__alt_data_end+0xfffda17c>
   412c4:	b805883a 	mov	r2,r23
   412c8:	dfc00817 	ldw	ra,32(sp)
   412cc:	ddc00717 	ldw	r23,28(sp)
   412d0:	dd800617 	ldw	r22,24(sp)
   412d4:	dd400517 	ldw	r21,20(sp)
   412d8:	dd000417 	ldw	r20,16(sp)
   412dc:	dcc00317 	ldw	r19,12(sp)
   412e0:	dc800217 	ldw	r18,8(sp)
   412e4:	dc400117 	ldw	r17,4(sp)
   412e8:	dc000017 	ldw	r16,0(sp)
   412ec:	dec00904 	addi	sp,sp,36
   412f0:	f800283a 	ret
   412f4:	002f883a 	mov	r23,zero
   412f8:	003ff206 	br	412c4 <__alt_data_end+0xfffda1c4>

000412fc <_malloc_r>:
   412fc:	defff504 	addi	sp,sp,-44
   41300:	dc800315 	stw	r18,12(sp)
   41304:	dfc00a15 	stw	ra,40(sp)
   41308:	df000915 	stw	fp,36(sp)
   4130c:	ddc00815 	stw	r23,32(sp)
   41310:	dd800715 	stw	r22,28(sp)
   41314:	dd400615 	stw	r21,24(sp)
   41318:	dd000515 	stw	r20,20(sp)
   4131c:	dcc00415 	stw	r19,16(sp)
   41320:	dc400215 	stw	r17,8(sp)
   41324:	dc000115 	stw	r16,4(sp)
   41328:	288002c4 	addi	r2,r5,11
   4132c:	00c00584 	movi	r3,22
   41330:	2025883a 	mov	r18,r4
   41334:	18807f2e 	bgeu	r3,r2,41534 <_malloc_r+0x238>
   41338:	047ffe04 	movi	r17,-8
   4133c:	1462703a 	and	r17,r2,r17
   41340:	8800a316 	blt	r17,zero,415d0 <_malloc_r+0x2d4>
   41344:	8940a236 	bltu	r17,r5,415d0 <_malloc_r+0x2d4>
   41348:	0043b2c0 	call	43b2c <__malloc_lock>
   4134c:	00807dc4 	movi	r2,503
   41350:	1441e92e 	bgeu	r2,r17,41af8 <_malloc_r+0x7fc>
   41354:	8804d27a 	srli	r2,r17,9
   41358:	1000a126 	beq	r2,zero,415e0 <_malloc_r+0x2e4>
   4135c:	00c00104 	movi	r3,4
   41360:	18811e36 	bltu	r3,r2,417dc <_malloc_r+0x4e0>
   41364:	8804d1ba 	srli	r2,r17,6
   41368:	12000e44 	addi	r8,r2,57
   4136c:	11c00e04 	addi	r7,r2,56
   41370:	4209883a 	add	r4,r8,r8
   41374:	04c00134 	movhi	r19,4
   41378:	2109883a 	add	r4,r4,r4
   4137c:	9cd90704 	addi	r19,r19,25628
   41380:	2109883a 	add	r4,r4,r4
   41384:	9909883a 	add	r4,r19,r4
   41388:	24000117 	ldw	r16,4(r4)
   4138c:	213ffe04 	addi	r4,r4,-8
   41390:	24009726 	beq	r4,r16,415f0 <_malloc_r+0x2f4>
   41394:	80800117 	ldw	r2,4(r16)
   41398:	01bfff04 	movi	r6,-4
   4139c:	014003c4 	movi	r5,15
   413a0:	1184703a 	and	r2,r2,r6
   413a4:	1447c83a 	sub	r3,r2,r17
   413a8:	28c00716 	blt	r5,r3,413c8 <_malloc_r+0xcc>
   413ac:	1800920e 	bge	r3,zero,415f8 <_malloc_r+0x2fc>
   413b0:	84000317 	ldw	r16,12(r16)
   413b4:	24008e26 	beq	r4,r16,415f0 <_malloc_r+0x2f4>
   413b8:	80800117 	ldw	r2,4(r16)
   413bc:	1184703a 	and	r2,r2,r6
   413c0:	1447c83a 	sub	r3,r2,r17
   413c4:	28fff90e 	bge	r5,r3,413ac <__alt_data_end+0xfffda2ac>
   413c8:	3809883a 	mov	r4,r7
   413cc:	01800134 	movhi	r6,4
   413d0:	9c000417 	ldw	r16,16(r19)
   413d4:	31990704 	addi	r6,r6,25628
   413d8:	32000204 	addi	r8,r6,8
   413dc:	82013426 	beq	r16,r8,418b0 <_malloc_r+0x5b4>
   413e0:	80c00117 	ldw	r3,4(r16)
   413e4:	00bfff04 	movi	r2,-4
   413e8:	188e703a 	and	r7,r3,r2
   413ec:	3c45c83a 	sub	r2,r7,r17
   413f0:	00c003c4 	movi	r3,15
   413f4:	18811f16 	blt	r3,r2,41874 <_malloc_r+0x578>
   413f8:	32000515 	stw	r8,20(r6)
   413fc:	32000415 	stw	r8,16(r6)
   41400:	10007f0e 	bge	r2,zero,41600 <_malloc_r+0x304>
   41404:	00807fc4 	movi	r2,511
   41408:	11c0fd36 	bltu	r2,r7,41800 <_malloc_r+0x504>
   4140c:	3806d0fa 	srli	r3,r7,3
   41410:	01c00044 	movi	r7,1
   41414:	30800117 	ldw	r2,4(r6)
   41418:	19400044 	addi	r5,r3,1
   4141c:	294b883a 	add	r5,r5,r5
   41420:	1807d0ba 	srai	r3,r3,2
   41424:	294b883a 	add	r5,r5,r5
   41428:	294b883a 	add	r5,r5,r5
   4142c:	298b883a 	add	r5,r5,r6
   41430:	38c6983a 	sll	r3,r7,r3
   41434:	29c00017 	ldw	r7,0(r5)
   41438:	2a7ffe04 	addi	r9,r5,-8
   4143c:	1886b03a 	or	r3,r3,r2
   41440:	82400315 	stw	r9,12(r16)
   41444:	81c00215 	stw	r7,8(r16)
   41448:	30c00115 	stw	r3,4(r6)
   4144c:	2c000015 	stw	r16,0(r5)
   41450:	3c000315 	stw	r16,12(r7)
   41454:	2005d0ba 	srai	r2,r4,2
   41458:	01400044 	movi	r5,1
   4145c:	288a983a 	sll	r5,r5,r2
   41460:	19406f36 	bltu	r3,r5,41620 <_malloc_r+0x324>
   41464:	28c4703a 	and	r2,r5,r3
   41468:	10000a1e 	bne	r2,zero,41494 <_malloc_r+0x198>
   4146c:	00bfff04 	movi	r2,-4
   41470:	294b883a 	add	r5,r5,r5
   41474:	2088703a 	and	r4,r4,r2
   41478:	28c4703a 	and	r2,r5,r3
   4147c:	21000104 	addi	r4,r4,4
   41480:	1000041e 	bne	r2,zero,41494 <_malloc_r+0x198>
   41484:	294b883a 	add	r5,r5,r5
   41488:	28c4703a 	and	r2,r5,r3
   4148c:	21000104 	addi	r4,r4,4
   41490:	103ffc26 	beq	r2,zero,41484 <__alt_data_end+0xfffda384>
   41494:	02bfff04 	movi	r10,-4
   41498:	024003c4 	movi	r9,15
   4149c:	21800044 	addi	r6,r4,1
   414a0:	318d883a 	add	r6,r6,r6
   414a4:	318d883a 	add	r6,r6,r6
   414a8:	318d883a 	add	r6,r6,r6
   414ac:	998d883a 	add	r6,r19,r6
   414b0:	333ffe04 	addi	r12,r6,-8
   414b4:	2017883a 	mov	r11,r4
   414b8:	31800104 	addi	r6,r6,4
   414bc:	34000017 	ldw	r16,0(r6)
   414c0:	31fffd04 	addi	r7,r6,-12
   414c4:	81c0041e 	bne	r16,r7,414d8 <_malloc_r+0x1dc>
   414c8:	0000fb06 	br	418b8 <_malloc_r+0x5bc>
   414cc:	1801030e 	bge	r3,zero,418dc <_malloc_r+0x5e0>
   414d0:	84000317 	ldw	r16,12(r16)
   414d4:	81c0f826 	beq	r16,r7,418b8 <_malloc_r+0x5bc>
   414d8:	80800117 	ldw	r2,4(r16)
   414dc:	1284703a 	and	r2,r2,r10
   414e0:	1447c83a 	sub	r3,r2,r17
   414e4:	48fff90e 	bge	r9,r3,414cc <__alt_data_end+0xfffda3cc>
   414e8:	80800317 	ldw	r2,12(r16)
   414ec:	81000217 	ldw	r4,8(r16)
   414f0:	89400054 	ori	r5,r17,1
   414f4:	81400115 	stw	r5,4(r16)
   414f8:	20800315 	stw	r2,12(r4)
   414fc:	11000215 	stw	r4,8(r2)
   41500:	8463883a 	add	r17,r16,r17
   41504:	9c400515 	stw	r17,20(r19)
   41508:	9c400415 	stw	r17,16(r19)
   4150c:	18800054 	ori	r2,r3,1
   41510:	88800115 	stw	r2,4(r17)
   41514:	8a000315 	stw	r8,12(r17)
   41518:	8a000215 	stw	r8,8(r17)
   4151c:	88e3883a 	add	r17,r17,r3
   41520:	88c00015 	stw	r3,0(r17)
   41524:	9009883a 	mov	r4,r18
   41528:	0043b500 	call	43b50 <__malloc_unlock>
   4152c:	80800204 	addi	r2,r16,8
   41530:	00001b06 	br	415a0 <_malloc_r+0x2a4>
   41534:	04400404 	movi	r17,16
   41538:	89402536 	bltu	r17,r5,415d0 <_malloc_r+0x2d4>
   4153c:	0043b2c0 	call	43b2c <__malloc_lock>
   41540:	00800184 	movi	r2,6
   41544:	01000084 	movi	r4,2
   41548:	04c00134 	movhi	r19,4
   4154c:	1085883a 	add	r2,r2,r2
   41550:	9cd90704 	addi	r19,r19,25628
   41554:	1085883a 	add	r2,r2,r2
   41558:	9885883a 	add	r2,r19,r2
   4155c:	14000117 	ldw	r16,4(r2)
   41560:	10fffe04 	addi	r3,r2,-8
   41564:	80c0d926 	beq	r16,r3,418cc <_malloc_r+0x5d0>
   41568:	80c00117 	ldw	r3,4(r16)
   4156c:	81000317 	ldw	r4,12(r16)
   41570:	00bfff04 	movi	r2,-4
   41574:	1884703a 	and	r2,r3,r2
   41578:	81400217 	ldw	r5,8(r16)
   4157c:	8085883a 	add	r2,r16,r2
   41580:	10c00117 	ldw	r3,4(r2)
   41584:	29000315 	stw	r4,12(r5)
   41588:	21400215 	stw	r5,8(r4)
   4158c:	18c00054 	ori	r3,r3,1
   41590:	10c00115 	stw	r3,4(r2)
   41594:	9009883a 	mov	r4,r18
   41598:	0043b500 	call	43b50 <__malloc_unlock>
   4159c:	80800204 	addi	r2,r16,8
   415a0:	dfc00a17 	ldw	ra,40(sp)
   415a4:	df000917 	ldw	fp,36(sp)
   415a8:	ddc00817 	ldw	r23,32(sp)
   415ac:	dd800717 	ldw	r22,28(sp)
   415b0:	dd400617 	ldw	r21,24(sp)
   415b4:	dd000517 	ldw	r20,20(sp)
   415b8:	dcc00417 	ldw	r19,16(sp)
   415bc:	dc800317 	ldw	r18,12(sp)
   415c0:	dc400217 	ldw	r17,8(sp)
   415c4:	dc000117 	ldw	r16,4(sp)
   415c8:	dec00b04 	addi	sp,sp,44
   415cc:	f800283a 	ret
   415d0:	00800304 	movi	r2,12
   415d4:	90800015 	stw	r2,0(r18)
   415d8:	0005883a 	mov	r2,zero
   415dc:	003ff006 	br	415a0 <__alt_data_end+0xfffda4a0>
   415e0:	01002004 	movi	r4,128
   415e4:	02001004 	movi	r8,64
   415e8:	01c00fc4 	movi	r7,63
   415ec:	003f6106 	br	41374 <__alt_data_end+0xfffda274>
   415f0:	4009883a 	mov	r4,r8
   415f4:	003f7506 	br	413cc <__alt_data_end+0xfffda2cc>
   415f8:	81000317 	ldw	r4,12(r16)
   415fc:	003fde06 	br	41578 <__alt_data_end+0xfffda478>
   41600:	81c5883a 	add	r2,r16,r7
   41604:	11400117 	ldw	r5,4(r2)
   41608:	9009883a 	mov	r4,r18
   4160c:	29400054 	ori	r5,r5,1
   41610:	11400115 	stw	r5,4(r2)
   41614:	0043b500 	call	43b50 <__malloc_unlock>
   41618:	80800204 	addi	r2,r16,8
   4161c:	003fe006 	br	415a0 <__alt_data_end+0xfffda4a0>
   41620:	9c000217 	ldw	r16,8(r19)
   41624:	00bfff04 	movi	r2,-4
   41628:	85800117 	ldw	r22,4(r16)
   4162c:	b0ac703a 	and	r22,r22,r2
   41630:	b4400336 	bltu	r22,r17,41640 <_malloc_r+0x344>
   41634:	b445c83a 	sub	r2,r22,r17
   41638:	00c003c4 	movi	r3,15
   4163c:	18805d16 	blt	r3,r2,417b4 <_malloc_r+0x4b8>
   41640:	05c00134 	movhi	r23,4
   41644:	00800174 	movhi	r2,5
   41648:	10a53804 	addi	r2,r2,-27424
   4164c:	bdde8e04 	addi	r23,r23,31288
   41650:	15400017 	ldw	r21,0(r2)
   41654:	b8c00017 	ldw	r3,0(r23)
   41658:	00bfffc4 	movi	r2,-1
   4165c:	858d883a 	add	r6,r16,r22
   41660:	8d6b883a 	add	r21,r17,r21
   41664:	1880ea26 	beq	r3,r2,41a10 <_malloc_r+0x714>
   41668:	ad4403c4 	addi	r21,r21,4111
   4166c:	00bc0004 	movi	r2,-4096
   41670:	a8aa703a 	and	r21,r21,r2
   41674:	a80b883a 	mov	r5,r21
   41678:	9009883a 	mov	r4,r18
   4167c:	d9800015 	stw	r6,0(sp)
   41680:	004270c0 	call	4270c <_sbrk_r>
   41684:	1029883a 	mov	r20,r2
   41688:	00bfffc4 	movi	r2,-1
   4168c:	d9800017 	ldw	r6,0(sp)
   41690:	a080e826 	beq	r20,r2,41a34 <_malloc_r+0x738>
   41694:	a180a636 	bltu	r20,r6,41930 <_malloc_r+0x634>
   41698:	07000174 	movhi	fp,5
   4169c:	e7254104 	addi	fp,fp,-27388
   416a0:	e0800017 	ldw	r2,0(fp)
   416a4:	a887883a 	add	r3,r21,r2
   416a8:	e0c00015 	stw	r3,0(fp)
   416ac:	3500e626 	beq	r6,r20,41a48 <_malloc_r+0x74c>
   416b0:	b9000017 	ldw	r4,0(r23)
   416b4:	00bfffc4 	movi	r2,-1
   416b8:	2080ee26 	beq	r4,r2,41a74 <_malloc_r+0x778>
   416bc:	a185c83a 	sub	r2,r20,r6
   416c0:	10c5883a 	add	r2,r2,r3
   416c4:	e0800015 	stw	r2,0(fp)
   416c8:	a0c001cc 	andi	r3,r20,7
   416cc:	1800bc26 	beq	r3,zero,419c0 <_malloc_r+0x6c4>
   416d0:	a0e9c83a 	sub	r20,r20,r3
   416d4:	00840204 	movi	r2,4104
   416d8:	a5000204 	addi	r20,r20,8
   416dc:	10c7c83a 	sub	r3,r2,r3
   416e0:	a545883a 	add	r2,r20,r21
   416e4:	1083ffcc 	andi	r2,r2,4095
   416e8:	18abc83a 	sub	r21,r3,r2
   416ec:	a80b883a 	mov	r5,r21
   416f0:	9009883a 	mov	r4,r18
   416f4:	004270c0 	call	4270c <_sbrk_r>
   416f8:	00ffffc4 	movi	r3,-1
   416fc:	10c0e126 	beq	r2,r3,41a84 <_malloc_r+0x788>
   41700:	1505c83a 	sub	r2,r2,r20
   41704:	1545883a 	add	r2,r2,r21
   41708:	10800054 	ori	r2,r2,1
   4170c:	e0c00017 	ldw	r3,0(fp)
   41710:	9d000215 	stw	r20,8(r19)
   41714:	a0800115 	stw	r2,4(r20)
   41718:	a8c7883a 	add	r3,r21,r3
   4171c:	e0c00015 	stw	r3,0(fp)
   41720:	84c00e26 	beq	r16,r19,4175c <_malloc_r+0x460>
   41724:	018003c4 	movi	r6,15
   41728:	3580a72e 	bgeu	r6,r22,419c8 <_malloc_r+0x6cc>
   4172c:	81400117 	ldw	r5,4(r16)
   41730:	013ffe04 	movi	r4,-8
   41734:	b0bffd04 	addi	r2,r22,-12
   41738:	1104703a 	and	r2,r2,r4
   4173c:	2900004c 	andi	r4,r5,1
   41740:	2088b03a 	or	r4,r4,r2
   41744:	81000115 	stw	r4,4(r16)
   41748:	01400144 	movi	r5,5
   4174c:	8089883a 	add	r4,r16,r2
   41750:	21400115 	stw	r5,4(r4)
   41754:	21400215 	stw	r5,8(r4)
   41758:	3080cd36 	bltu	r6,r2,41a90 <_malloc_r+0x794>
   4175c:	00800174 	movhi	r2,5
   41760:	10a53704 	addi	r2,r2,-27428
   41764:	11000017 	ldw	r4,0(r2)
   41768:	20c0012e 	bgeu	r4,r3,41770 <_malloc_r+0x474>
   4176c:	10c00015 	stw	r3,0(r2)
   41770:	00800174 	movhi	r2,5
   41774:	10a53604 	addi	r2,r2,-27432
   41778:	11000017 	ldw	r4,0(r2)
   4177c:	9c000217 	ldw	r16,8(r19)
   41780:	20c0012e 	bgeu	r4,r3,41788 <_malloc_r+0x48c>
   41784:	10c00015 	stw	r3,0(r2)
   41788:	80c00117 	ldw	r3,4(r16)
   4178c:	00bfff04 	movi	r2,-4
   41790:	1886703a 	and	r3,r3,r2
   41794:	1c45c83a 	sub	r2,r3,r17
   41798:	1c400236 	bltu	r3,r17,417a4 <_malloc_r+0x4a8>
   4179c:	00c003c4 	movi	r3,15
   417a0:	18800416 	blt	r3,r2,417b4 <_malloc_r+0x4b8>
   417a4:	9009883a 	mov	r4,r18
   417a8:	0043b500 	call	43b50 <__malloc_unlock>
   417ac:	0005883a 	mov	r2,zero
   417b0:	003f7b06 	br	415a0 <__alt_data_end+0xfffda4a0>
   417b4:	88c00054 	ori	r3,r17,1
   417b8:	80c00115 	stw	r3,4(r16)
   417bc:	8463883a 	add	r17,r16,r17
   417c0:	10800054 	ori	r2,r2,1
   417c4:	9c400215 	stw	r17,8(r19)
   417c8:	88800115 	stw	r2,4(r17)
   417cc:	9009883a 	mov	r4,r18
   417d0:	0043b500 	call	43b50 <__malloc_unlock>
   417d4:	80800204 	addi	r2,r16,8
   417d8:	003f7106 	br	415a0 <__alt_data_end+0xfffda4a0>
   417dc:	00c00504 	movi	r3,20
   417e0:	18804a2e 	bgeu	r3,r2,4190c <_malloc_r+0x610>
   417e4:	00c01504 	movi	r3,84
   417e8:	18806e36 	bltu	r3,r2,419a4 <_malloc_r+0x6a8>
   417ec:	8804d33a 	srli	r2,r17,12
   417f0:	12001bc4 	addi	r8,r2,111
   417f4:	11c01b84 	addi	r7,r2,110
   417f8:	4209883a 	add	r4,r8,r8
   417fc:	003edd06 	br	41374 <__alt_data_end+0xfffda274>
   41800:	3804d27a 	srli	r2,r7,9
   41804:	00c00104 	movi	r3,4
   41808:	1880442e 	bgeu	r3,r2,4191c <_malloc_r+0x620>
   4180c:	00c00504 	movi	r3,20
   41810:	18808136 	bltu	r3,r2,41a18 <_malloc_r+0x71c>
   41814:	11401704 	addi	r5,r2,92
   41818:	10c016c4 	addi	r3,r2,91
   4181c:	294b883a 	add	r5,r5,r5
   41820:	294b883a 	add	r5,r5,r5
   41824:	294b883a 	add	r5,r5,r5
   41828:	994b883a 	add	r5,r19,r5
   4182c:	28800017 	ldw	r2,0(r5)
   41830:	01800134 	movhi	r6,4
   41834:	297ffe04 	addi	r5,r5,-8
   41838:	31990704 	addi	r6,r6,25628
   4183c:	28806526 	beq	r5,r2,419d4 <_malloc_r+0x6d8>
   41840:	01bfff04 	movi	r6,-4
   41844:	10c00117 	ldw	r3,4(r2)
   41848:	1986703a 	and	r3,r3,r6
   4184c:	38c0022e 	bgeu	r7,r3,41858 <_malloc_r+0x55c>
   41850:	10800217 	ldw	r2,8(r2)
   41854:	28bffb1e 	bne	r5,r2,41844 <__alt_data_end+0xfffda744>
   41858:	11400317 	ldw	r5,12(r2)
   4185c:	98c00117 	ldw	r3,4(r19)
   41860:	81400315 	stw	r5,12(r16)
   41864:	80800215 	stw	r2,8(r16)
   41868:	2c000215 	stw	r16,8(r5)
   4186c:	14000315 	stw	r16,12(r2)
   41870:	003ef806 	br	41454 <__alt_data_end+0xfffda354>
   41874:	88c00054 	ori	r3,r17,1
   41878:	80c00115 	stw	r3,4(r16)
   4187c:	8463883a 	add	r17,r16,r17
   41880:	34400515 	stw	r17,20(r6)
   41884:	34400415 	stw	r17,16(r6)
   41888:	10c00054 	ori	r3,r2,1
   4188c:	8a000315 	stw	r8,12(r17)
   41890:	8a000215 	stw	r8,8(r17)
   41894:	88c00115 	stw	r3,4(r17)
   41898:	88a3883a 	add	r17,r17,r2
   4189c:	88800015 	stw	r2,0(r17)
   418a0:	9009883a 	mov	r4,r18
   418a4:	0043b500 	call	43b50 <__malloc_unlock>
   418a8:	80800204 	addi	r2,r16,8
   418ac:	003f3c06 	br	415a0 <__alt_data_end+0xfffda4a0>
   418b0:	30c00117 	ldw	r3,4(r6)
   418b4:	003ee706 	br	41454 <__alt_data_end+0xfffda354>
   418b8:	5ac00044 	addi	r11,r11,1
   418bc:	588000cc 	andi	r2,r11,3
   418c0:	31800204 	addi	r6,r6,8
   418c4:	103efd1e 	bne	r2,zero,414bc <__alt_data_end+0xfffda3bc>
   418c8:	00002406 	br	4195c <_malloc_r+0x660>
   418cc:	14000317 	ldw	r16,12(r2)
   418d0:	143f251e 	bne	r2,r16,41568 <__alt_data_end+0xfffda468>
   418d4:	21000084 	addi	r4,r4,2
   418d8:	003ebc06 	br	413cc <__alt_data_end+0xfffda2cc>
   418dc:	8085883a 	add	r2,r16,r2
   418e0:	10c00117 	ldw	r3,4(r2)
   418e4:	81000317 	ldw	r4,12(r16)
   418e8:	81400217 	ldw	r5,8(r16)
   418ec:	18c00054 	ori	r3,r3,1
   418f0:	10c00115 	stw	r3,4(r2)
   418f4:	29000315 	stw	r4,12(r5)
   418f8:	21400215 	stw	r5,8(r4)
   418fc:	9009883a 	mov	r4,r18
   41900:	0043b500 	call	43b50 <__malloc_unlock>
   41904:	80800204 	addi	r2,r16,8
   41908:	003f2506 	br	415a0 <__alt_data_end+0xfffda4a0>
   4190c:	12001704 	addi	r8,r2,92
   41910:	11c016c4 	addi	r7,r2,91
   41914:	4209883a 	add	r4,r8,r8
   41918:	003e9606 	br	41374 <__alt_data_end+0xfffda274>
   4191c:	3804d1ba 	srli	r2,r7,6
   41920:	11400e44 	addi	r5,r2,57
   41924:	10c00e04 	addi	r3,r2,56
   41928:	294b883a 	add	r5,r5,r5
   4192c:	003fbc06 	br	41820 <__alt_data_end+0xfffda720>
   41930:	84ff5926 	beq	r16,r19,41698 <__alt_data_end+0xfffda598>
   41934:	00800134 	movhi	r2,4
   41938:	10990704 	addi	r2,r2,25628
   4193c:	14000217 	ldw	r16,8(r2)
   41940:	00bfff04 	movi	r2,-4
   41944:	80c00117 	ldw	r3,4(r16)
   41948:	1886703a 	and	r3,r3,r2
   4194c:	003f9106 	br	41794 <__alt_data_end+0xfffda694>
   41950:	60800217 	ldw	r2,8(r12)
   41954:	213fffc4 	addi	r4,r4,-1
   41958:	1300651e 	bne	r2,r12,41af0 <_malloc_r+0x7f4>
   4195c:	208000cc 	andi	r2,r4,3
   41960:	633ffe04 	addi	r12,r12,-8
   41964:	103ffa1e 	bne	r2,zero,41950 <__alt_data_end+0xfffda850>
   41968:	98800117 	ldw	r2,4(r19)
   4196c:	0146303a 	nor	r3,zero,r5
   41970:	1884703a 	and	r2,r3,r2
   41974:	98800115 	stw	r2,4(r19)
   41978:	294b883a 	add	r5,r5,r5
   4197c:	117f2836 	bltu	r2,r5,41620 <__alt_data_end+0xfffda520>
   41980:	283f2726 	beq	r5,zero,41620 <__alt_data_end+0xfffda520>
   41984:	2886703a 	and	r3,r5,r2
   41988:	5809883a 	mov	r4,r11
   4198c:	183ec31e 	bne	r3,zero,4149c <__alt_data_end+0xfffda39c>
   41990:	294b883a 	add	r5,r5,r5
   41994:	2886703a 	and	r3,r5,r2
   41998:	21000104 	addi	r4,r4,4
   4199c:	183ffc26 	beq	r3,zero,41990 <__alt_data_end+0xfffda890>
   419a0:	003ebe06 	br	4149c <__alt_data_end+0xfffda39c>
   419a4:	00c05504 	movi	r3,340
   419a8:	18801236 	bltu	r3,r2,419f4 <_malloc_r+0x6f8>
   419ac:	8804d3fa 	srli	r2,r17,15
   419b0:	12001e04 	addi	r8,r2,120
   419b4:	11c01dc4 	addi	r7,r2,119
   419b8:	4209883a 	add	r4,r8,r8
   419bc:	003e6d06 	br	41374 <__alt_data_end+0xfffda274>
   419c0:	00c40004 	movi	r3,4096
   419c4:	003f4606 	br	416e0 <__alt_data_end+0xfffda5e0>
   419c8:	00800044 	movi	r2,1
   419cc:	a0800115 	stw	r2,4(r20)
   419d0:	003f7406 	br	417a4 <__alt_data_end+0xfffda6a4>
   419d4:	1805d0ba 	srai	r2,r3,2
   419d8:	01c00044 	movi	r7,1
   419dc:	30c00117 	ldw	r3,4(r6)
   419e0:	388e983a 	sll	r7,r7,r2
   419e4:	2805883a 	mov	r2,r5
   419e8:	38c6b03a 	or	r3,r7,r3
   419ec:	30c00115 	stw	r3,4(r6)
   419f0:	003f9b06 	br	41860 <__alt_data_end+0xfffda760>
   419f4:	00c15504 	movi	r3,1364
   419f8:	18801a36 	bltu	r3,r2,41a64 <_malloc_r+0x768>
   419fc:	8804d4ba 	srli	r2,r17,18
   41a00:	12001f44 	addi	r8,r2,125
   41a04:	11c01f04 	addi	r7,r2,124
   41a08:	4209883a 	add	r4,r8,r8
   41a0c:	003e5906 	br	41374 <__alt_data_end+0xfffda274>
   41a10:	ad400404 	addi	r21,r21,16
   41a14:	003f1706 	br	41674 <__alt_data_end+0xfffda574>
   41a18:	00c01504 	movi	r3,84
   41a1c:	18802336 	bltu	r3,r2,41aac <_malloc_r+0x7b0>
   41a20:	3804d33a 	srli	r2,r7,12
   41a24:	11401bc4 	addi	r5,r2,111
   41a28:	10c01b84 	addi	r3,r2,110
   41a2c:	294b883a 	add	r5,r5,r5
   41a30:	003f7b06 	br	41820 <__alt_data_end+0xfffda720>
   41a34:	9c000217 	ldw	r16,8(r19)
   41a38:	00bfff04 	movi	r2,-4
   41a3c:	80c00117 	ldw	r3,4(r16)
   41a40:	1886703a 	and	r3,r3,r2
   41a44:	003f5306 	br	41794 <__alt_data_end+0xfffda694>
   41a48:	3083ffcc 	andi	r2,r6,4095
   41a4c:	103f181e 	bne	r2,zero,416b0 <__alt_data_end+0xfffda5b0>
   41a50:	99000217 	ldw	r4,8(r19)
   41a54:	b545883a 	add	r2,r22,r21
   41a58:	10800054 	ori	r2,r2,1
   41a5c:	20800115 	stw	r2,4(r4)
   41a60:	003f3e06 	br	4175c <__alt_data_end+0xfffda65c>
   41a64:	01003f84 	movi	r4,254
   41a68:	02001fc4 	movi	r8,127
   41a6c:	01c01f84 	movi	r7,126
   41a70:	003e4006 	br	41374 <__alt_data_end+0xfffda274>
   41a74:	00800134 	movhi	r2,4
   41a78:	109e8e04 	addi	r2,r2,31288
   41a7c:	15000015 	stw	r20,0(r2)
   41a80:	003f1106 	br	416c8 <__alt_data_end+0xfffda5c8>
   41a84:	00800044 	movi	r2,1
   41a88:	002b883a 	mov	r21,zero
   41a8c:	003f1f06 	br	4170c <__alt_data_end+0xfffda60c>
   41a90:	81400204 	addi	r5,r16,8
   41a94:	9009883a 	mov	r4,r18
   41a98:	0042f740 	call	42f74 <_free_r>
   41a9c:	00800174 	movhi	r2,5
   41aa0:	10a54104 	addi	r2,r2,-27388
   41aa4:	10c00017 	ldw	r3,0(r2)
   41aa8:	003f2c06 	br	4175c <__alt_data_end+0xfffda65c>
   41aac:	00c05504 	movi	r3,340
   41ab0:	18800536 	bltu	r3,r2,41ac8 <_malloc_r+0x7cc>
   41ab4:	3804d3fa 	srli	r2,r7,15
   41ab8:	11401e04 	addi	r5,r2,120
   41abc:	10c01dc4 	addi	r3,r2,119
   41ac0:	294b883a 	add	r5,r5,r5
   41ac4:	003f5606 	br	41820 <__alt_data_end+0xfffda720>
   41ac8:	00c15504 	movi	r3,1364
   41acc:	18800536 	bltu	r3,r2,41ae4 <_malloc_r+0x7e8>
   41ad0:	3804d4ba 	srli	r2,r7,18
   41ad4:	11401f44 	addi	r5,r2,125
   41ad8:	10c01f04 	addi	r3,r2,124
   41adc:	294b883a 	add	r5,r5,r5
   41ae0:	003f4f06 	br	41820 <__alt_data_end+0xfffda720>
   41ae4:	01403f84 	movi	r5,254
   41ae8:	00c01f84 	movi	r3,126
   41aec:	003f4c06 	br	41820 <__alt_data_end+0xfffda720>
   41af0:	98800117 	ldw	r2,4(r19)
   41af4:	003fa006 	br	41978 <__alt_data_end+0xfffda878>
   41af8:	8808d0fa 	srli	r4,r17,3
   41afc:	20800044 	addi	r2,r4,1
   41b00:	1085883a 	add	r2,r2,r2
   41b04:	003e9006 	br	41548 <__alt_data_end+0xfffda448>

00041b08 <memchr>:
   41b08:	208000cc 	andi	r2,r4,3
   41b0c:	280f883a 	mov	r7,r5
   41b10:	10003426 	beq	r2,zero,41be4 <memchr+0xdc>
   41b14:	30bfffc4 	addi	r2,r6,-1
   41b18:	30001a26 	beq	r6,zero,41b84 <memchr+0x7c>
   41b1c:	20c00003 	ldbu	r3,0(r4)
   41b20:	29803fcc 	andi	r6,r5,255
   41b24:	30c0051e 	bne	r6,r3,41b3c <memchr+0x34>
   41b28:	00001806 	br	41b8c <memchr+0x84>
   41b2c:	10001526 	beq	r2,zero,41b84 <memchr+0x7c>
   41b30:	20c00003 	ldbu	r3,0(r4)
   41b34:	10bfffc4 	addi	r2,r2,-1
   41b38:	30c01426 	beq	r6,r3,41b8c <memchr+0x84>
   41b3c:	21000044 	addi	r4,r4,1
   41b40:	20c000cc 	andi	r3,r4,3
   41b44:	183ff91e 	bne	r3,zero,41b2c <__alt_data_end+0xfffdaa2c>
   41b48:	020000c4 	movi	r8,3
   41b4c:	40801136 	bltu	r8,r2,41b94 <memchr+0x8c>
   41b50:	10000c26 	beq	r2,zero,41b84 <memchr+0x7c>
   41b54:	20c00003 	ldbu	r3,0(r4)
   41b58:	29403fcc 	andi	r5,r5,255
   41b5c:	28c00b26 	beq	r5,r3,41b8c <memchr+0x84>
   41b60:	20c00044 	addi	r3,r4,1
   41b64:	39803fcc 	andi	r6,r7,255
   41b68:	2089883a 	add	r4,r4,r2
   41b6c:	00000306 	br	41b7c <memchr+0x74>
   41b70:	18c00044 	addi	r3,r3,1
   41b74:	197fffc3 	ldbu	r5,-1(r3)
   41b78:	31400526 	beq	r6,r5,41b90 <memchr+0x88>
   41b7c:	1805883a 	mov	r2,r3
   41b80:	20fffb1e 	bne	r4,r3,41b70 <__alt_data_end+0xfffdaa70>
   41b84:	0005883a 	mov	r2,zero
   41b88:	f800283a 	ret
   41b8c:	2005883a 	mov	r2,r4
   41b90:	f800283a 	ret
   41b94:	28c03fcc 	andi	r3,r5,255
   41b98:	1812923a 	slli	r9,r3,8
   41b9c:	02ffbff4 	movhi	r11,65279
   41ba0:	02a02074 	movhi	r10,32897
   41ba4:	48d2b03a 	or	r9,r9,r3
   41ba8:	4806943a 	slli	r3,r9,16
   41bac:	5affbfc4 	addi	r11,r11,-257
   41bb0:	52a02004 	addi	r10,r10,-32640
   41bb4:	48d2b03a 	or	r9,r9,r3
   41bb8:	20c00017 	ldw	r3,0(r4)
   41bbc:	48c6f03a 	xor	r3,r9,r3
   41bc0:	1acd883a 	add	r6,r3,r11
   41bc4:	00c6303a 	nor	r3,zero,r3
   41bc8:	30c6703a 	and	r3,r6,r3
   41bcc:	1a86703a 	and	r3,r3,r10
   41bd0:	183fe01e 	bne	r3,zero,41b54 <__alt_data_end+0xfffdaa54>
   41bd4:	10bfff04 	addi	r2,r2,-4
   41bd8:	21000104 	addi	r4,r4,4
   41bdc:	40bff636 	bltu	r8,r2,41bb8 <__alt_data_end+0xfffdaab8>
   41be0:	003fdb06 	br	41b50 <__alt_data_end+0xfffdaa50>
   41be4:	3005883a 	mov	r2,r6
   41be8:	003fd706 	br	41b48 <__alt_data_end+0xfffdaa48>

00041bec <memcpy>:
   41bec:	defffd04 	addi	sp,sp,-12
   41bf0:	dfc00215 	stw	ra,8(sp)
   41bf4:	dc400115 	stw	r17,4(sp)
   41bf8:	dc000015 	stw	r16,0(sp)
   41bfc:	00c003c4 	movi	r3,15
   41c00:	2005883a 	mov	r2,r4
   41c04:	1980452e 	bgeu	r3,r6,41d1c <memcpy+0x130>
   41c08:	2906b03a 	or	r3,r5,r4
   41c0c:	18c000cc 	andi	r3,r3,3
   41c10:	1800441e 	bne	r3,zero,41d24 <memcpy+0x138>
   41c14:	347ffc04 	addi	r17,r6,-16
   41c18:	8822d13a 	srli	r17,r17,4
   41c1c:	28c00104 	addi	r3,r5,4
   41c20:	23400104 	addi	r13,r4,4
   41c24:	8820913a 	slli	r16,r17,4
   41c28:	2b000204 	addi	r12,r5,8
   41c2c:	22c00204 	addi	r11,r4,8
   41c30:	84000504 	addi	r16,r16,20
   41c34:	2a800304 	addi	r10,r5,12
   41c38:	22400304 	addi	r9,r4,12
   41c3c:	2c21883a 	add	r16,r5,r16
   41c40:	2811883a 	mov	r8,r5
   41c44:	200f883a 	mov	r7,r4
   41c48:	41000017 	ldw	r4,0(r8)
   41c4c:	1fc00017 	ldw	ra,0(r3)
   41c50:	63c00017 	ldw	r15,0(r12)
   41c54:	39000015 	stw	r4,0(r7)
   41c58:	53800017 	ldw	r14,0(r10)
   41c5c:	6fc00015 	stw	ra,0(r13)
   41c60:	5bc00015 	stw	r15,0(r11)
   41c64:	4b800015 	stw	r14,0(r9)
   41c68:	18c00404 	addi	r3,r3,16
   41c6c:	39c00404 	addi	r7,r7,16
   41c70:	42000404 	addi	r8,r8,16
   41c74:	6b400404 	addi	r13,r13,16
   41c78:	63000404 	addi	r12,r12,16
   41c7c:	5ac00404 	addi	r11,r11,16
   41c80:	52800404 	addi	r10,r10,16
   41c84:	4a400404 	addi	r9,r9,16
   41c88:	1c3fef1e 	bne	r3,r16,41c48 <__alt_data_end+0xfffdab48>
   41c8c:	89c00044 	addi	r7,r17,1
   41c90:	380e913a 	slli	r7,r7,4
   41c94:	310003cc 	andi	r4,r6,15
   41c98:	02c000c4 	movi	r11,3
   41c9c:	11c7883a 	add	r3,r2,r7
   41ca0:	29cb883a 	add	r5,r5,r7
   41ca4:	5900212e 	bgeu	r11,r4,41d2c <memcpy+0x140>
   41ca8:	1813883a 	mov	r9,r3
   41cac:	2811883a 	mov	r8,r5
   41cb0:	200f883a 	mov	r7,r4
   41cb4:	42800017 	ldw	r10,0(r8)
   41cb8:	4a400104 	addi	r9,r9,4
   41cbc:	39ffff04 	addi	r7,r7,-4
   41cc0:	4abfff15 	stw	r10,-4(r9)
   41cc4:	42000104 	addi	r8,r8,4
   41cc8:	59fffa36 	bltu	r11,r7,41cb4 <__alt_data_end+0xfffdabb4>
   41ccc:	213fff04 	addi	r4,r4,-4
   41cd0:	2008d0ba 	srli	r4,r4,2
   41cd4:	318000cc 	andi	r6,r6,3
   41cd8:	21000044 	addi	r4,r4,1
   41cdc:	2109883a 	add	r4,r4,r4
   41ce0:	2109883a 	add	r4,r4,r4
   41ce4:	1907883a 	add	r3,r3,r4
   41ce8:	290b883a 	add	r5,r5,r4
   41cec:	30000626 	beq	r6,zero,41d08 <memcpy+0x11c>
   41cf0:	198d883a 	add	r6,r3,r6
   41cf4:	29c00003 	ldbu	r7,0(r5)
   41cf8:	18c00044 	addi	r3,r3,1
   41cfc:	29400044 	addi	r5,r5,1
   41d00:	19ffffc5 	stb	r7,-1(r3)
   41d04:	19bffb1e 	bne	r3,r6,41cf4 <__alt_data_end+0xfffdabf4>
   41d08:	dfc00217 	ldw	ra,8(sp)
   41d0c:	dc400117 	ldw	r17,4(sp)
   41d10:	dc000017 	ldw	r16,0(sp)
   41d14:	dec00304 	addi	sp,sp,12
   41d18:	f800283a 	ret
   41d1c:	2007883a 	mov	r3,r4
   41d20:	003ff206 	br	41cec <__alt_data_end+0xfffdabec>
   41d24:	2007883a 	mov	r3,r4
   41d28:	003ff106 	br	41cf0 <__alt_data_end+0xfffdabf0>
   41d2c:	200d883a 	mov	r6,r4
   41d30:	003fee06 	br	41cec <__alt_data_end+0xfffdabec>

00041d34 <memmove>:
   41d34:	2005883a 	mov	r2,r4
   41d38:	29000b2e 	bgeu	r5,r4,41d68 <memmove+0x34>
   41d3c:	298f883a 	add	r7,r5,r6
   41d40:	21c0092e 	bgeu	r4,r7,41d68 <memmove+0x34>
   41d44:	2187883a 	add	r3,r4,r6
   41d48:	198bc83a 	sub	r5,r3,r6
   41d4c:	30004826 	beq	r6,zero,41e70 <memmove+0x13c>
   41d50:	39ffffc4 	addi	r7,r7,-1
   41d54:	39000003 	ldbu	r4,0(r7)
   41d58:	18ffffc4 	addi	r3,r3,-1
   41d5c:	19000005 	stb	r4,0(r3)
   41d60:	28fffb1e 	bne	r5,r3,41d50 <__alt_data_end+0xfffdac50>
   41d64:	f800283a 	ret
   41d68:	00c003c4 	movi	r3,15
   41d6c:	1980412e 	bgeu	r3,r6,41e74 <memmove+0x140>
   41d70:	2886b03a 	or	r3,r5,r2
   41d74:	18c000cc 	andi	r3,r3,3
   41d78:	1800401e 	bne	r3,zero,41e7c <memmove+0x148>
   41d7c:	33fffc04 	addi	r15,r6,-16
   41d80:	781ed13a 	srli	r15,r15,4
   41d84:	28c00104 	addi	r3,r5,4
   41d88:	13400104 	addi	r13,r2,4
   41d8c:	781c913a 	slli	r14,r15,4
   41d90:	2b000204 	addi	r12,r5,8
   41d94:	12c00204 	addi	r11,r2,8
   41d98:	73800504 	addi	r14,r14,20
   41d9c:	2a800304 	addi	r10,r5,12
   41da0:	12400304 	addi	r9,r2,12
   41da4:	2b9d883a 	add	r14,r5,r14
   41da8:	2811883a 	mov	r8,r5
   41dac:	100f883a 	mov	r7,r2
   41db0:	41000017 	ldw	r4,0(r8)
   41db4:	39c00404 	addi	r7,r7,16
   41db8:	18c00404 	addi	r3,r3,16
   41dbc:	393ffc15 	stw	r4,-16(r7)
   41dc0:	193ffc17 	ldw	r4,-16(r3)
   41dc4:	6b400404 	addi	r13,r13,16
   41dc8:	5ac00404 	addi	r11,r11,16
   41dcc:	693ffc15 	stw	r4,-16(r13)
   41dd0:	61000017 	ldw	r4,0(r12)
   41dd4:	4a400404 	addi	r9,r9,16
   41dd8:	42000404 	addi	r8,r8,16
   41ddc:	593ffc15 	stw	r4,-16(r11)
   41de0:	51000017 	ldw	r4,0(r10)
   41de4:	63000404 	addi	r12,r12,16
   41de8:	52800404 	addi	r10,r10,16
   41dec:	493ffc15 	stw	r4,-16(r9)
   41df0:	1bbfef1e 	bne	r3,r14,41db0 <__alt_data_end+0xfffdacb0>
   41df4:	79000044 	addi	r4,r15,1
   41df8:	2008913a 	slli	r4,r4,4
   41dfc:	328003cc 	andi	r10,r6,15
   41e00:	02c000c4 	movi	r11,3
   41e04:	1107883a 	add	r3,r2,r4
   41e08:	290b883a 	add	r5,r5,r4
   41e0c:	5a801e2e 	bgeu	r11,r10,41e88 <memmove+0x154>
   41e10:	1813883a 	mov	r9,r3
   41e14:	2811883a 	mov	r8,r5
   41e18:	500f883a 	mov	r7,r10
   41e1c:	41000017 	ldw	r4,0(r8)
   41e20:	4a400104 	addi	r9,r9,4
   41e24:	39ffff04 	addi	r7,r7,-4
   41e28:	493fff15 	stw	r4,-4(r9)
   41e2c:	42000104 	addi	r8,r8,4
   41e30:	59fffa36 	bltu	r11,r7,41e1c <__alt_data_end+0xfffdad1c>
   41e34:	513fff04 	addi	r4,r10,-4
   41e38:	2008d0ba 	srli	r4,r4,2
   41e3c:	318000cc 	andi	r6,r6,3
   41e40:	21000044 	addi	r4,r4,1
   41e44:	2109883a 	add	r4,r4,r4
   41e48:	2109883a 	add	r4,r4,r4
   41e4c:	1907883a 	add	r3,r3,r4
   41e50:	290b883a 	add	r5,r5,r4
   41e54:	30000b26 	beq	r6,zero,41e84 <memmove+0x150>
   41e58:	198d883a 	add	r6,r3,r6
   41e5c:	29c00003 	ldbu	r7,0(r5)
   41e60:	18c00044 	addi	r3,r3,1
   41e64:	29400044 	addi	r5,r5,1
   41e68:	19ffffc5 	stb	r7,-1(r3)
   41e6c:	19bffb1e 	bne	r3,r6,41e5c <__alt_data_end+0xfffdad5c>
   41e70:	f800283a 	ret
   41e74:	1007883a 	mov	r3,r2
   41e78:	003ff606 	br	41e54 <__alt_data_end+0xfffdad54>
   41e7c:	1007883a 	mov	r3,r2
   41e80:	003ff506 	br	41e58 <__alt_data_end+0xfffdad58>
   41e84:	f800283a 	ret
   41e88:	500d883a 	mov	r6,r10
   41e8c:	003ff106 	br	41e54 <__alt_data_end+0xfffdad54>

00041e90 <memset>:
   41e90:	20c000cc 	andi	r3,r4,3
   41e94:	2005883a 	mov	r2,r4
   41e98:	18004426 	beq	r3,zero,41fac <memset+0x11c>
   41e9c:	31ffffc4 	addi	r7,r6,-1
   41ea0:	30004026 	beq	r6,zero,41fa4 <memset+0x114>
   41ea4:	2813883a 	mov	r9,r5
   41ea8:	200d883a 	mov	r6,r4
   41eac:	2007883a 	mov	r3,r4
   41eb0:	00000406 	br	41ec4 <memset+0x34>
   41eb4:	3a3fffc4 	addi	r8,r7,-1
   41eb8:	31800044 	addi	r6,r6,1
   41ebc:	38003926 	beq	r7,zero,41fa4 <memset+0x114>
   41ec0:	400f883a 	mov	r7,r8
   41ec4:	18c00044 	addi	r3,r3,1
   41ec8:	32400005 	stb	r9,0(r6)
   41ecc:	1a0000cc 	andi	r8,r3,3
   41ed0:	403ff81e 	bne	r8,zero,41eb4 <__alt_data_end+0xfffdadb4>
   41ed4:	010000c4 	movi	r4,3
   41ed8:	21c02d2e 	bgeu	r4,r7,41f90 <memset+0x100>
   41edc:	29003fcc 	andi	r4,r5,255
   41ee0:	200c923a 	slli	r6,r4,8
   41ee4:	3108b03a 	or	r4,r6,r4
   41ee8:	200c943a 	slli	r6,r4,16
   41eec:	218cb03a 	or	r6,r4,r6
   41ef0:	010003c4 	movi	r4,15
   41ef4:	21c0182e 	bgeu	r4,r7,41f58 <memset+0xc8>
   41ef8:	3b3ffc04 	addi	r12,r7,-16
   41efc:	6018d13a 	srli	r12,r12,4
   41f00:	1a000104 	addi	r8,r3,4
   41f04:	1ac00204 	addi	r11,r3,8
   41f08:	6008913a 	slli	r4,r12,4
   41f0c:	1a800304 	addi	r10,r3,12
   41f10:	1813883a 	mov	r9,r3
   41f14:	21000504 	addi	r4,r4,20
   41f18:	1909883a 	add	r4,r3,r4
   41f1c:	49800015 	stw	r6,0(r9)
   41f20:	41800015 	stw	r6,0(r8)
   41f24:	59800015 	stw	r6,0(r11)
   41f28:	51800015 	stw	r6,0(r10)
   41f2c:	42000404 	addi	r8,r8,16
   41f30:	4a400404 	addi	r9,r9,16
   41f34:	5ac00404 	addi	r11,r11,16
   41f38:	52800404 	addi	r10,r10,16
   41f3c:	413ff71e 	bne	r8,r4,41f1c <__alt_data_end+0xfffdae1c>
   41f40:	63000044 	addi	r12,r12,1
   41f44:	6018913a 	slli	r12,r12,4
   41f48:	39c003cc 	andi	r7,r7,15
   41f4c:	010000c4 	movi	r4,3
   41f50:	1b07883a 	add	r3,r3,r12
   41f54:	21c00e2e 	bgeu	r4,r7,41f90 <memset+0x100>
   41f58:	1813883a 	mov	r9,r3
   41f5c:	3811883a 	mov	r8,r7
   41f60:	010000c4 	movi	r4,3
   41f64:	49800015 	stw	r6,0(r9)
   41f68:	423fff04 	addi	r8,r8,-4
   41f6c:	4a400104 	addi	r9,r9,4
   41f70:	223ffc36 	bltu	r4,r8,41f64 <__alt_data_end+0xfffdae64>
   41f74:	393fff04 	addi	r4,r7,-4
   41f78:	2008d0ba 	srli	r4,r4,2
   41f7c:	39c000cc 	andi	r7,r7,3
   41f80:	21000044 	addi	r4,r4,1
   41f84:	2109883a 	add	r4,r4,r4
   41f88:	2109883a 	add	r4,r4,r4
   41f8c:	1907883a 	add	r3,r3,r4
   41f90:	38000526 	beq	r7,zero,41fa8 <memset+0x118>
   41f94:	19cf883a 	add	r7,r3,r7
   41f98:	19400005 	stb	r5,0(r3)
   41f9c:	18c00044 	addi	r3,r3,1
   41fa0:	38fffd1e 	bne	r7,r3,41f98 <__alt_data_end+0xfffdae98>
   41fa4:	f800283a 	ret
   41fa8:	f800283a 	ret
   41fac:	2007883a 	mov	r3,r4
   41fb0:	300f883a 	mov	r7,r6
   41fb4:	003fc706 	br	41ed4 <__alt_data_end+0xfffdadd4>

00041fb8 <_realloc_r>:
   41fb8:	defff604 	addi	sp,sp,-40
   41fbc:	dc800215 	stw	r18,8(sp)
   41fc0:	dfc00915 	stw	ra,36(sp)
   41fc4:	df000815 	stw	fp,32(sp)
   41fc8:	ddc00715 	stw	r23,28(sp)
   41fcc:	dd800615 	stw	r22,24(sp)
   41fd0:	dd400515 	stw	r21,20(sp)
   41fd4:	dd000415 	stw	r20,16(sp)
   41fd8:	dcc00315 	stw	r19,12(sp)
   41fdc:	dc400115 	stw	r17,4(sp)
   41fe0:	dc000015 	stw	r16,0(sp)
   41fe4:	3025883a 	mov	r18,r6
   41fe8:	2800b726 	beq	r5,zero,422c8 <_realloc_r+0x310>
   41fec:	282b883a 	mov	r21,r5
   41ff0:	2029883a 	mov	r20,r4
   41ff4:	0043b2c0 	call	43b2c <__malloc_lock>
   41ff8:	a8bfff17 	ldw	r2,-4(r21)
   41ffc:	043fff04 	movi	r16,-4
   42000:	90c002c4 	addi	r3,r18,11
   42004:	01000584 	movi	r4,22
   42008:	acfffe04 	addi	r19,r21,-8
   4200c:	1420703a 	and	r16,r2,r16
   42010:	20c0332e 	bgeu	r4,r3,420e0 <_realloc_r+0x128>
   42014:	047ffe04 	movi	r17,-8
   42018:	1c62703a 	and	r17,r3,r17
   4201c:	8807883a 	mov	r3,r17
   42020:	88005816 	blt	r17,zero,42184 <_realloc_r+0x1cc>
   42024:	8c805736 	bltu	r17,r18,42184 <_realloc_r+0x1cc>
   42028:	80c0300e 	bge	r16,r3,420ec <_realloc_r+0x134>
   4202c:	07000134 	movhi	fp,4
   42030:	e7190704 	addi	fp,fp,25628
   42034:	e1c00217 	ldw	r7,8(fp)
   42038:	9c09883a 	add	r4,r19,r16
   4203c:	22000117 	ldw	r8,4(r4)
   42040:	21c06326 	beq	r4,r7,421d0 <_realloc_r+0x218>
   42044:	017fff84 	movi	r5,-2
   42048:	414a703a 	and	r5,r8,r5
   4204c:	214b883a 	add	r5,r4,r5
   42050:	29800117 	ldw	r6,4(r5)
   42054:	3180004c 	andi	r6,r6,1
   42058:	30003f26 	beq	r6,zero,42158 <_realloc_r+0x1a0>
   4205c:	1080004c 	andi	r2,r2,1
   42060:	10008326 	beq	r2,zero,42270 <_realloc_r+0x2b8>
   42064:	900b883a 	mov	r5,r18
   42068:	a009883a 	mov	r4,r20
   4206c:	00412fc0 	call	412fc <_malloc_r>
   42070:	1025883a 	mov	r18,r2
   42074:	10011e26 	beq	r2,zero,424f0 <_realloc_r+0x538>
   42078:	a93fff17 	ldw	r4,-4(r21)
   4207c:	10fffe04 	addi	r3,r2,-8
   42080:	00bfff84 	movi	r2,-2
   42084:	2084703a 	and	r2,r4,r2
   42088:	9885883a 	add	r2,r19,r2
   4208c:	1880ee26 	beq	r3,r2,42448 <_realloc_r+0x490>
   42090:	81bfff04 	addi	r6,r16,-4
   42094:	00800904 	movi	r2,36
   42098:	1180b836 	bltu	r2,r6,4237c <_realloc_r+0x3c4>
   4209c:	00c004c4 	movi	r3,19
   420a0:	19809636 	bltu	r3,r6,422fc <_realloc_r+0x344>
   420a4:	9005883a 	mov	r2,r18
   420a8:	a807883a 	mov	r3,r21
   420ac:	19000017 	ldw	r4,0(r3)
   420b0:	11000015 	stw	r4,0(r2)
   420b4:	19000117 	ldw	r4,4(r3)
   420b8:	11000115 	stw	r4,4(r2)
   420bc:	18c00217 	ldw	r3,8(r3)
   420c0:	10c00215 	stw	r3,8(r2)
   420c4:	a80b883a 	mov	r5,r21
   420c8:	a009883a 	mov	r4,r20
   420cc:	0042f740 	call	42f74 <_free_r>
   420d0:	a009883a 	mov	r4,r20
   420d4:	0043b500 	call	43b50 <__malloc_unlock>
   420d8:	9005883a 	mov	r2,r18
   420dc:	00001206 	br	42128 <_realloc_r+0x170>
   420e0:	00c00404 	movi	r3,16
   420e4:	1823883a 	mov	r17,r3
   420e8:	003fce06 	br	42024 <__alt_data_end+0xfffdaf24>
   420ec:	a825883a 	mov	r18,r21
   420f0:	8445c83a 	sub	r2,r16,r17
   420f4:	00c003c4 	movi	r3,15
   420f8:	18802636 	bltu	r3,r2,42194 <_realloc_r+0x1dc>
   420fc:	99800117 	ldw	r6,4(r19)
   42100:	9c07883a 	add	r3,r19,r16
   42104:	3180004c 	andi	r6,r6,1
   42108:	3420b03a 	or	r16,r6,r16
   4210c:	9c000115 	stw	r16,4(r19)
   42110:	18800117 	ldw	r2,4(r3)
   42114:	10800054 	ori	r2,r2,1
   42118:	18800115 	stw	r2,4(r3)
   4211c:	a009883a 	mov	r4,r20
   42120:	0043b500 	call	43b50 <__malloc_unlock>
   42124:	9005883a 	mov	r2,r18
   42128:	dfc00917 	ldw	ra,36(sp)
   4212c:	df000817 	ldw	fp,32(sp)
   42130:	ddc00717 	ldw	r23,28(sp)
   42134:	dd800617 	ldw	r22,24(sp)
   42138:	dd400517 	ldw	r21,20(sp)
   4213c:	dd000417 	ldw	r20,16(sp)
   42140:	dcc00317 	ldw	r19,12(sp)
   42144:	dc800217 	ldw	r18,8(sp)
   42148:	dc400117 	ldw	r17,4(sp)
   4214c:	dc000017 	ldw	r16,0(sp)
   42150:	dec00a04 	addi	sp,sp,40
   42154:	f800283a 	ret
   42158:	017fff04 	movi	r5,-4
   4215c:	414a703a 	and	r5,r8,r5
   42160:	814d883a 	add	r6,r16,r5
   42164:	30c01f16 	blt	r6,r3,421e4 <_realloc_r+0x22c>
   42168:	20800317 	ldw	r2,12(r4)
   4216c:	20c00217 	ldw	r3,8(r4)
   42170:	a825883a 	mov	r18,r21
   42174:	3021883a 	mov	r16,r6
   42178:	18800315 	stw	r2,12(r3)
   4217c:	10c00215 	stw	r3,8(r2)
   42180:	003fdb06 	br	420f0 <__alt_data_end+0xfffdaff0>
   42184:	00800304 	movi	r2,12
   42188:	a0800015 	stw	r2,0(r20)
   4218c:	0005883a 	mov	r2,zero
   42190:	003fe506 	br	42128 <__alt_data_end+0xfffdb028>
   42194:	98c00117 	ldw	r3,4(r19)
   42198:	9c4b883a 	add	r5,r19,r17
   4219c:	11000054 	ori	r4,r2,1
   421a0:	18c0004c 	andi	r3,r3,1
   421a4:	1c62b03a 	or	r17,r3,r17
   421a8:	9c400115 	stw	r17,4(r19)
   421ac:	29000115 	stw	r4,4(r5)
   421b0:	2885883a 	add	r2,r5,r2
   421b4:	10c00117 	ldw	r3,4(r2)
   421b8:	29400204 	addi	r5,r5,8
   421bc:	a009883a 	mov	r4,r20
   421c0:	18c00054 	ori	r3,r3,1
   421c4:	10c00115 	stw	r3,4(r2)
   421c8:	0042f740 	call	42f74 <_free_r>
   421cc:	003fd306 	br	4211c <__alt_data_end+0xfffdb01c>
   421d0:	017fff04 	movi	r5,-4
   421d4:	414a703a 	and	r5,r8,r5
   421d8:	89800404 	addi	r6,r17,16
   421dc:	8151883a 	add	r8,r16,r5
   421e0:	4180590e 	bge	r8,r6,42348 <_realloc_r+0x390>
   421e4:	1080004c 	andi	r2,r2,1
   421e8:	103f9e1e 	bne	r2,zero,42064 <__alt_data_end+0xfffdaf64>
   421ec:	adbffe17 	ldw	r22,-8(r21)
   421f0:	00bfff04 	movi	r2,-4
   421f4:	9dadc83a 	sub	r22,r19,r22
   421f8:	b1800117 	ldw	r6,4(r22)
   421fc:	3084703a 	and	r2,r6,r2
   42200:	20002026 	beq	r4,zero,42284 <_realloc_r+0x2cc>
   42204:	80af883a 	add	r23,r16,r2
   42208:	b96f883a 	add	r23,r23,r5
   4220c:	21c05f26 	beq	r4,r7,4238c <_realloc_r+0x3d4>
   42210:	b8c01c16 	blt	r23,r3,42284 <_realloc_r+0x2cc>
   42214:	20800317 	ldw	r2,12(r4)
   42218:	20c00217 	ldw	r3,8(r4)
   4221c:	81bfff04 	addi	r6,r16,-4
   42220:	01000904 	movi	r4,36
   42224:	18800315 	stw	r2,12(r3)
   42228:	10c00215 	stw	r3,8(r2)
   4222c:	b0c00217 	ldw	r3,8(r22)
   42230:	b0800317 	ldw	r2,12(r22)
   42234:	b4800204 	addi	r18,r22,8
   42238:	18800315 	stw	r2,12(r3)
   4223c:	10c00215 	stw	r3,8(r2)
   42240:	21801b36 	bltu	r4,r6,422b0 <_realloc_r+0x2f8>
   42244:	008004c4 	movi	r2,19
   42248:	1180352e 	bgeu	r2,r6,42320 <_realloc_r+0x368>
   4224c:	a8800017 	ldw	r2,0(r21)
   42250:	b0800215 	stw	r2,8(r22)
   42254:	a8800117 	ldw	r2,4(r21)
   42258:	b0800315 	stw	r2,12(r22)
   4225c:	008006c4 	movi	r2,27
   42260:	11807f36 	bltu	r2,r6,42460 <_realloc_r+0x4a8>
   42264:	b0800404 	addi	r2,r22,16
   42268:	ad400204 	addi	r21,r21,8
   4226c:	00002d06 	br	42324 <_realloc_r+0x36c>
   42270:	adbffe17 	ldw	r22,-8(r21)
   42274:	00bfff04 	movi	r2,-4
   42278:	9dadc83a 	sub	r22,r19,r22
   4227c:	b1000117 	ldw	r4,4(r22)
   42280:	2084703a 	and	r2,r4,r2
   42284:	b03f7726 	beq	r22,zero,42064 <__alt_data_end+0xfffdaf64>
   42288:	80af883a 	add	r23,r16,r2
   4228c:	b8ff7516 	blt	r23,r3,42064 <__alt_data_end+0xfffdaf64>
   42290:	b0800317 	ldw	r2,12(r22)
   42294:	b0c00217 	ldw	r3,8(r22)
   42298:	81bfff04 	addi	r6,r16,-4
   4229c:	01000904 	movi	r4,36
   422a0:	18800315 	stw	r2,12(r3)
   422a4:	10c00215 	stw	r3,8(r2)
   422a8:	b4800204 	addi	r18,r22,8
   422ac:	21bfe52e 	bgeu	r4,r6,42244 <__alt_data_end+0xfffdb144>
   422b0:	a80b883a 	mov	r5,r21
   422b4:	9009883a 	mov	r4,r18
   422b8:	0041d340 	call	41d34 <memmove>
   422bc:	b821883a 	mov	r16,r23
   422c0:	b027883a 	mov	r19,r22
   422c4:	003f8a06 	br	420f0 <__alt_data_end+0xfffdaff0>
   422c8:	300b883a 	mov	r5,r6
   422cc:	dfc00917 	ldw	ra,36(sp)
   422d0:	df000817 	ldw	fp,32(sp)
   422d4:	ddc00717 	ldw	r23,28(sp)
   422d8:	dd800617 	ldw	r22,24(sp)
   422dc:	dd400517 	ldw	r21,20(sp)
   422e0:	dd000417 	ldw	r20,16(sp)
   422e4:	dcc00317 	ldw	r19,12(sp)
   422e8:	dc800217 	ldw	r18,8(sp)
   422ec:	dc400117 	ldw	r17,4(sp)
   422f0:	dc000017 	ldw	r16,0(sp)
   422f4:	dec00a04 	addi	sp,sp,40
   422f8:	00412fc1 	jmpi	412fc <_malloc_r>
   422fc:	a8c00017 	ldw	r3,0(r21)
   42300:	90c00015 	stw	r3,0(r18)
   42304:	a8c00117 	ldw	r3,4(r21)
   42308:	90c00115 	stw	r3,4(r18)
   4230c:	00c006c4 	movi	r3,27
   42310:	19804536 	bltu	r3,r6,42428 <_realloc_r+0x470>
   42314:	90800204 	addi	r2,r18,8
   42318:	a8c00204 	addi	r3,r21,8
   4231c:	003f6306 	br	420ac <__alt_data_end+0xfffdafac>
   42320:	9005883a 	mov	r2,r18
   42324:	a8c00017 	ldw	r3,0(r21)
   42328:	b821883a 	mov	r16,r23
   4232c:	b027883a 	mov	r19,r22
   42330:	10c00015 	stw	r3,0(r2)
   42334:	a8c00117 	ldw	r3,4(r21)
   42338:	10c00115 	stw	r3,4(r2)
   4233c:	a8c00217 	ldw	r3,8(r21)
   42340:	10c00215 	stw	r3,8(r2)
   42344:	003f6a06 	br	420f0 <__alt_data_end+0xfffdaff0>
   42348:	9c67883a 	add	r19,r19,r17
   4234c:	4445c83a 	sub	r2,r8,r17
   42350:	e4c00215 	stw	r19,8(fp)
   42354:	10800054 	ori	r2,r2,1
   42358:	98800115 	stw	r2,4(r19)
   4235c:	a8bfff17 	ldw	r2,-4(r21)
   42360:	a009883a 	mov	r4,r20
   42364:	1080004c 	andi	r2,r2,1
   42368:	1462b03a 	or	r17,r2,r17
   4236c:	ac7fff15 	stw	r17,-4(r21)
   42370:	0043b500 	call	43b50 <__malloc_unlock>
   42374:	a805883a 	mov	r2,r21
   42378:	003f6b06 	br	42128 <__alt_data_end+0xfffdb028>
   4237c:	a80b883a 	mov	r5,r21
   42380:	9009883a 	mov	r4,r18
   42384:	0041d340 	call	41d34 <memmove>
   42388:	003f4e06 	br	420c4 <__alt_data_end+0xfffdafc4>
   4238c:	89000404 	addi	r4,r17,16
   42390:	b93fbc16 	blt	r23,r4,42284 <__alt_data_end+0xfffdb184>
   42394:	b0800317 	ldw	r2,12(r22)
   42398:	b0c00217 	ldw	r3,8(r22)
   4239c:	81bfff04 	addi	r6,r16,-4
   423a0:	01000904 	movi	r4,36
   423a4:	18800315 	stw	r2,12(r3)
   423a8:	10c00215 	stw	r3,8(r2)
   423ac:	b4800204 	addi	r18,r22,8
   423b0:	21804336 	bltu	r4,r6,424c0 <_realloc_r+0x508>
   423b4:	008004c4 	movi	r2,19
   423b8:	11803f2e 	bgeu	r2,r6,424b8 <_realloc_r+0x500>
   423bc:	a8800017 	ldw	r2,0(r21)
   423c0:	b0800215 	stw	r2,8(r22)
   423c4:	a8800117 	ldw	r2,4(r21)
   423c8:	b0800315 	stw	r2,12(r22)
   423cc:	008006c4 	movi	r2,27
   423d0:	11803f36 	bltu	r2,r6,424d0 <_realloc_r+0x518>
   423d4:	b0800404 	addi	r2,r22,16
   423d8:	ad400204 	addi	r21,r21,8
   423dc:	a8c00017 	ldw	r3,0(r21)
   423e0:	10c00015 	stw	r3,0(r2)
   423e4:	a8c00117 	ldw	r3,4(r21)
   423e8:	10c00115 	stw	r3,4(r2)
   423ec:	a8c00217 	ldw	r3,8(r21)
   423f0:	10c00215 	stw	r3,8(r2)
   423f4:	b447883a 	add	r3,r22,r17
   423f8:	bc45c83a 	sub	r2,r23,r17
   423fc:	e0c00215 	stw	r3,8(fp)
   42400:	10800054 	ori	r2,r2,1
   42404:	18800115 	stw	r2,4(r3)
   42408:	b0800117 	ldw	r2,4(r22)
   4240c:	a009883a 	mov	r4,r20
   42410:	1080004c 	andi	r2,r2,1
   42414:	1462b03a 	or	r17,r2,r17
   42418:	b4400115 	stw	r17,4(r22)
   4241c:	0043b500 	call	43b50 <__malloc_unlock>
   42420:	9005883a 	mov	r2,r18
   42424:	003f4006 	br	42128 <__alt_data_end+0xfffdb028>
   42428:	a8c00217 	ldw	r3,8(r21)
   4242c:	90c00215 	stw	r3,8(r18)
   42430:	a8c00317 	ldw	r3,12(r21)
   42434:	90c00315 	stw	r3,12(r18)
   42438:	30801126 	beq	r6,r2,42480 <_realloc_r+0x4c8>
   4243c:	90800404 	addi	r2,r18,16
   42440:	a8c00404 	addi	r3,r21,16
   42444:	003f1906 	br	420ac <__alt_data_end+0xfffdafac>
   42448:	90ffff17 	ldw	r3,-4(r18)
   4244c:	00bfff04 	movi	r2,-4
   42450:	a825883a 	mov	r18,r21
   42454:	1884703a 	and	r2,r3,r2
   42458:	80a1883a 	add	r16,r16,r2
   4245c:	003f2406 	br	420f0 <__alt_data_end+0xfffdaff0>
   42460:	a8800217 	ldw	r2,8(r21)
   42464:	b0800415 	stw	r2,16(r22)
   42468:	a8800317 	ldw	r2,12(r21)
   4246c:	b0800515 	stw	r2,20(r22)
   42470:	31000a26 	beq	r6,r4,4249c <_realloc_r+0x4e4>
   42474:	b0800604 	addi	r2,r22,24
   42478:	ad400404 	addi	r21,r21,16
   4247c:	003fa906 	br	42324 <__alt_data_end+0xfffdb224>
   42480:	a9000417 	ldw	r4,16(r21)
   42484:	90800604 	addi	r2,r18,24
   42488:	a8c00604 	addi	r3,r21,24
   4248c:	91000415 	stw	r4,16(r18)
   42490:	a9000517 	ldw	r4,20(r21)
   42494:	91000515 	stw	r4,20(r18)
   42498:	003f0406 	br	420ac <__alt_data_end+0xfffdafac>
   4249c:	a8c00417 	ldw	r3,16(r21)
   424a0:	ad400604 	addi	r21,r21,24
   424a4:	b0800804 	addi	r2,r22,32
   424a8:	b0c00615 	stw	r3,24(r22)
   424ac:	a8ffff17 	ldw	r3,-4(r21)
   424b0:	b0c00715 	stw	r3,28(r22)
   424b4:	003f9b06 	br	42324 <__alt_data_end+0xfffdb224>
   424b8:	9005883a 	mov	r2,r18
   424bc:	003fc706 	br	423dc <__alt_data_end+0xfffdb2dc>
   424c0:	a80b883a 	mov	r5,r21
   424c4:	9009883a 	mov	r4,r18
   424c8:	0041d340 	call	41d34 <memmove>
   424cc:	003fc906 	br	423f4 <__alt_data_end+0xfffdb2f4>
   424d0:	a8800217 	ldw	r2,8(r21)
   424d4:	b0800415 	stw	r2,16(r22)
   424d8:	a8800317 	ldw	r2,12(r21)
   424dc:	b0800515 	stw	r2,20(r22)
   424e0:	31000726 	beq	r6,r4,42500 <_realloc_r+0x548>
   424e4:	b0800604 	addi	r2,r22,24
   424e8:	ad400404 	addi	r21,r21,16
   424ec:	003fbb06 	br	423dc <__alt_data_end+0xfffdb2dc>
   424f0:	a009883a 	mov	r4,r20
   424f4:	0043b500 	call	43b50 <__malloc_unlock>
   424f8:	0005883a 	mov	r2,zero
   424fc:	003f0a06 	br	42128 <__alt_data_end+0xfffdb028>
   42500:	a8c00417 	ldw	r3,16(r21)
   42504:	ad400604 	addi	r21,r21,24
   42508:	b0800804 	addi	r2,r22,32
   4250c:	b0c00615 	stw	r3,24(r22)
   42510:	a8ffff17 	ldw	r3,-4(r21)
   42514:	b0c00715 	stw	r3,28(r22)
   42518:	003fb006 	br	423dc <__alt_data_end+0xfffdb2dc>

0004251c <lflush>:
   4251c:	2080030b 	ldhu	r2,12(r4)
   42520:	00c00244 	movi	r3,9
   42524:	1080024c 	andi	r2,r2,9
   42528:	10c00226 	beq	r2,r3,42534 <lflush+0x18>
   4252c:	0005883a 	mov	r2,zero
   42530:	f800283a 	ret
   42534:	0042e201 	jmpi	42e20 <fflush>

00042538 <__srefill_r>:
   42538:	defffc04 	addi	sp,sp,-16
   4253c:	dc400115 	stw	r17,4(sp)
   42540:	dc000015 	stw	r16,0(sp)
   42544:	dfc00315 	stw	ra,12(sp)
   42548:	dc800215 	stw	r18,8(sp)
   4254c:	2023883a 	mov	r17,r4
   42550:	2821883a 	mov	r16,r5
   42554:	20000226 	beq	r4,zero,42560 <__srefill_r+0x28>
   42558:	20800e17 	ldw	r2,56(r4)
   4255c:	10003c26 	beq	r2,zero,42650 <__srefill_r+0x118>
   42560:	80c0030b 	ldhu	r3,12(r16)
   42564:	1908000c 	andi	r4,r3,8192
   42568:	1805883a 	mov	r2,r3
   4256c:	2000071e 	bne	r4,zero,4258c <__srefill_r+0x54>
   42570:	81001917 	ldw	r4,100(r16)
   42574:	18880014 	ori	r2,r3,8192
   42578:	00f7ffc4 	movi	r3,-8193
   4257c:	20c8703a 	and	r4,r4,r3
   42580:	8080030d 	sth	r2,12(r16)
   42584:	1007883a 	mov	r3,r2
   42588:	81001915 	stw	r4,100(r16)
   4258c:	80000115 	stw	zero,4(r16)
   42590:	1100080c 	andi	r4,r2,32
   42594:	2000571e 	bne	r4,zero,426f4 <__srefill_r+0x1bc>
   42598:	1100010c 	andi	r4,r2,4
   4259c:	20001f26 	beq	r4,zero,4261c <__srefill_r+0xe4>
   425a0:	81400c17 	ldw	r5,48(r16)
   425a4:	28000826 	beq	r5,zero,425c8 <__srefill_r+0x90>
   425a8:	80801004 	addi	r2,r16,64
   425ac:	28800226 	beq	r5,r2,425b8 <__srefill_r+0x80>
   425b0:	8809883a 	mov	r4,r17
   425b4:	0042f740 	call	42f74 <_free_r>
   425b8:	80800f17 	ldw	r2,60(r16)
   425bc:	80000c15 	stw	zero,48(r16)
   425c0:	80800115 	stw	r2,4(r16)
   425c4:	1000391e 	bne	r2,zero,426ac <__srefill_r+0x174>
   425c8:	80800417 	ldw	r2,16(r16)
   425cc:	10004b26 	beq	r2,zero,426fc <__srefill_r+0x1c4>
   425d0:	8480030b 	ldhu	r18,12(r16)
   425d4:	908000cc 	andi	r2,r18,3
   425d8:	10001f1e 	bne	r2,zero,42658 <__srefill_r+0x120>
   425dc:	81800417 	ldw	r6,16(r16)
   425e0:	80800817 	ldw	r2,32(r16)
   425e4:	81c00517 	ldw	r7,20(r16)
   425e8:	81400717 	ldw	r5,28(r16)
   425ec:	81800015 	stw	r6,0(r16)
   425f0:	8809883a 	mov	r4,r17
   425f4:	103ee83a 	callr	r2
   425f8:	80800115 	stw	r2,4(r16)
   425fc:	00800e0e 	bge	zero,r2,42638 <__srefill_r+0x100>
   42600:	0005883a 	mov	r2,zero
   42604:	dfc00317 	ldw	ra,12(sp)
   42608:	dc800217 	ldw	r18,8(sp)
   4260c:	dc400117 	ldw	r17,4(sp)
   42610:	dc000017 	ldw	r16,0(sp)
   42614:	dec00404 	addi	sp,sp,16
   42618:	f800283a 	ret
   4261c:	1100040c 	andi	r4,r2,16
   42620:	20003026 	beq	r4,zero,426e4 <__srefill_r+0x1ac>
   42624:	1080020c 	andi	r2,r2,8
   42628:	1000241e 	bne	r2,zero,426bc <__srefill_r+0x184>
   4262c:	18c00114 	ori	r3,r3,4
   42630:	80c0030d 	sth	r3,12(r16)
   42634:	003fe406 	br	425c8 <__alt_data_end+0xfffdb4c8>
   42638:	80c0030b 	ldhu	r3,12(r16)
   4263c:	1000161e 	bne	r2,zero,42698 <__srefill_r+0x160>
   42640:	18c00814 	ori	r3,r3,32
   42644:	00bfffc4 	movi	r2,-1
   42648:	80c0030d 	sth	r3,12(r16)
   4264c:	003fed06 	br	42604 <__alt_data_end+0xfffdb504>
   42650:	0040c680 	call	40c68 <__sinit>
   42654:	003fc206 	br	42560 <__alt_data_end+0xfffdb460>
   42658:	00800134 	movhi	r2,4
   4265c:	109e8c04 	addi	r2,r2,31280
   42660:	11000017 	ldw	r4,0(r2)
   42664:	01400134 	movhi	r5,4
   42668:	00800044 	movi	r2,1
   4266c:	29494704 	addi	r5,r5,9500
   42670:	8080030d 	sth	r2,12(r16)
   42674:	00411740 	call	41174 <_fwalk>
   42678:	00800244 	movi	r2,9
   4267c:	8480030d 	sth	r18,12(r16)
   42680:	9480024c 	andi	r18,r18,9
   42684:	90bfd51e 	bne	r18,r2,425dc <__alt_data_end+0xfffdb4dc>
   42688:	800b883a 	mov	r5,r16
   4268c:	8809883a 	mov	r4,r17
   42690:	0042ba80 	call	42ba8 <__sflush_r>
   42694:	003fd106 	br	425dc <__alt_data_end+0xfffdb4dc>
   42698:	18c01014 	ori	r3,r3,64
   4269c:	80000115 	stw	zero,4(r16)
   426a0:	00bfffc4 	movi	r2,-1
   426a4:	80c0030d 	sth	r3,12(r16)
   426a8:	003fd606 	br	42604 <__alt_data_end+0xfffdb504>
   426ac:	80c00e17 	ldw	r3,56(r16)
   426b0:	0005883a 	mov	r2,zero
   426b4:	80c00015 	stw	r3,0(r16)
   426b8:	003fd206 	br	42604 <__alt_data_end+0xfffdb504>
   426bc:	800b883a 	mov	r5,r16
   426c0:	8809883a 	mov	r4,r17
   426c4:	0042dc40 	call	42dc4 <_fflush_r>
   426c8:	10000a1e 	bne	r2,zero,426f4 <__srefill_r+0x1bc>
   426cc:	8080030b 	ldhu	r2,12(r16)
   426d0:	00fffdc4 	movi	r3,-9
   426d4:	80000215 	stw	zero,8(r16)
   426d8:	1886703a 	and	r3,r3,r2
   426dc:	80000615 	stw	zero,24(r16)
   426e0:	003fd206 	br	4262c <__alt_data_end+0xfffdb52c>
   426e4:	00800244 	movi	r2,9
   426e8:	88800015 	stw	r2,0(r17)
   426ec:	18c01014 	ori	r3,r3,64
   426f0:	80c0030d 	sth	r3,12(r16)
   426f4:	00bfffc4 	movi	r2,-1
   426f8:	003fc206 	br	42604 <__alt_data_end+0xfffdb504>
   426fc:	800b883a 	mov	r5,r16
   42700:	8809883a 	mov	r4,r17
   42704:	00432e40 	call	432e4 <__smakebuf_r>
   42708:	003fb106 	br	425d0 <__alt_data_end+0xfffdb4d0>

0004270c <_sbrk_r>:
   4270c:	defffd04 	addi	sp,sp,-12
   42710:	dc000015 	stw	r16,0(sp)
   42714:	04000174 	movhi	r16,5
   42718:	dc400115 	stw	r17,4(sp)
   4271c:	84253904 	addi	r16,r16,-27420
   42720:	2023883a 	mov	r17,r4
   42724:	2809883a 	mov	r4,r5
   42728:	dfc00215 	stw	ra,8(sp)
   4272c:	80000015 	stw	zero,0(r16)
   42730:	0043d100 	call	43d10 <sbrk>
   42734:	00ffffc4 	movi	r3,-1
   42738:	10c00526 	beq	r2,r3,42750 <_sbrk_r+0x44>
   4273c:	dfc00217 	ldw	ra,8(sp)
   42740:	dc400117 	ldw	r17,4(sp)
   42744:	dc000017 	ldw	r16,0(sp)
   42748:	dec00304 	addi	sp,sp,12
   4274c:	f800283a 	ret
   42750:	80c00017 	ldw	r3,0(r16)
   42754:	183ff926 	beq	r3,zero,4273c <__alt_data_end+0xfffdb63c>
   42758:	88c00015 	stw	r3,0(r17)
   4275c:	003ff706 	br	4273c <__alt_data_end+0xfffdb63c>

00042760 <__sread>:
   42760:	defffe04 	addi	sp,sp,-8
   42764:	dc000015 	stw	r16,0(sp)
   42768:	2821883a 	mov	r16,r5
   4276c:	2940038f 	ldh	r5,14(r5)
   42770:	dfc00115 	stw	ra,4(sp)
   42774:	00434a00 	call	434a0 <_read_r>
   42778:	10000716 	blt	r2,zero,42798 <__sread+0x38>
   4277c:	80c01417 	ldw	r3,80(r16)
   42780:	1887883a 	add	r3,r3,r2
   42784:	80c01415 	stw	r3,80(r16)
   42788:	dfc00117 	ldw	ra,4(sp)
   4278c:	dc000017 	ldw	r16,0(sp)
   42790:	dec00204 	addi	sp,sp,8
   42794:	f800283a 	ret
   42798:	80c0030b 	ldhu	r3,12(r16)
   4279c:	18fbffcc 	andi	r3,r3,61439
   427a0:	80c0030d 	sth	r3,12(r16)
   427a4:	dfc00117 	ldw	ra,4(sp)
   427a8:	dc000017 	ldw	r16,0(sp)
   427ac:	dec00204 	addi	sp,sp,8
   427b0:	f800283a 	ret

000427b4 <__seofread>:
   427b4:	0005883a 	mov	r2,zero
   427b8:	f800283a 	ret

000427bc <__swrite>:
   427bc:	2880030b 	ldhu	r2,12(r5)
   427c0:	defffb04 	addi	sp,sp,-20
   427c4:	dcc00315 	stw	r19,12(sp)
   427c8:	dc800215 	stw	r18,8(sp)
   427cc:	dc400115 	stw	r17,4(sp)
   427d0:	dc000015 	stw	r16,0(sp)
   427d4:	dfc00415 	stw	ra,16(sp)
   427d8:	10c0400c 	andi	r3,r2,256
   427dc:	2821883a 	mov	r16,r5
   427e0:	2023883a 	mov	r17,r4
   427e4:	3025883a 	mov	r18,r6
   427e8:	3827883a 	mov	r19,r7
   427ec:	18000526 	beq	r3,zero,42804 <__swrite+0x48>
   427f0:	2940038f 	ldh	r5,14(r5)
   427f4:	01c00084 	movi	r7,2
   427f8:	000d883a 	mov	r6,zero
   427fc:	00432840 	call	43284 <_lseek_r>
   42800:	8080030b 	ldhu	r2,12(r16)
   42804:	8140038f 	ldh	r5,14(r16)
   42808:	10bbffcc 	andi	r2,r2,61439
   4280c:	980f883a 	mov	r7,r19
   42810:	900d883a 	mov	r6,r18
   42814:	8809883a 	mov	r4,r17
   42818:	8080030d 	sth	r2,12(r16)
   4281c:	dfc00417 	ldw	ra,16(sp)
   42820:	dcc00317 	ldw	r19,12(sp)
   42824:	dc800217 	ldw	r18,8(sp)
   42828:	dc400117 	ldw	r17,4(sp)
   4282c:	dc000017 	ldw	r16,0(sp)
   42830:	dec00504 	addi	sp,sp,20
   42834:	004289c1 	jmpi	4289c <_write_r>

00042838 <__sseek>:
   42838:	defffe04 	addi	sp,sp,-8
   4283c:	dc000015 	stw	r16,0(sp)
   42840:	2821883a 	mov	r16,r5
   42844:	2940038f 	ldh	r5,14(r5)
   42848:	dfc00115 	stw	ra,4(sp)
   4284c:	00432840 	call	43284 <_lseek_r>
   42850:	00ffffc4 	movi	r3,-1
   42854:	10c00826 	beq	r2,r3,42878 <__sseek+0x40>
   42858:	80c0030b 	ldhu	r3,12(r16)
   4285c:	80801415 	stw	r2,80(r16)
   42860:	18c40014 	ori	r3,r3,4096
   42864:	80c0030d 	sth	r3,12(r16)
   42868:	dfc00117 	ldw	ra,4(sp)
   4286c:	dc000017 	ldw	r16,0(sp)
   42870:	dec00204 	addi	sp,sp,8
   42874:	f800283a 	ret
   42878:	80c0030b 	ldhu	r3,12(r16)
   4287c:	18fbffcc 	andi	r3,r3,61439
   42880:	80c0030d 	sth	r3,12(r16)
   42884:	dfc00117 	ldw	ra,4(sp)
   42888:	dc000017 	ldw	r16,0(sp)
   4288c:	dec00204 	addi	sp,sp,8
   42890:	f800283a 	ret

00042894 <__sclose>:
   42894:	2940038f 	ldh	r5,14(r5)
   42898:	0042a501 	jmpi	42a50 <_close_r>

0004289c <_write_r>:
   4289c:	defffd04 	addi	sp,sp,-12
   428a0:	2805883a 	mov	r2,r5
   428a4:	dc000015 	stw	r16,0(sp)
   428a8:	04000174 	movhi	r16,5
   428ac:	dc400115 	stw	r17,4(sp)
   428b0:	300b883a 	mov	r5,r6
   428b4:	84253904 	addi	r16,r16,-27420
   428b8:	2023883a 	mov	r17,r4
   428bc:	380d883a 	mov	r6,r7
   428c0:	1009883a 	mov	r4,r2
   428c4:	dfc00215 	stw	ra,8(sp)
   428c8:	80000015 	stw	zero,0(r16)
   428cc:	0043e2c0 	call	43e2c <write>
   428d0:	00ffffc4 	movi	r3,-1
   428d4:	10c00526 	beq	r2,r3,428ec <_write_r+0x50>
   428d8:	dfc00217 	ldw	ra,8(sp)
   428dc:	dc400117 	ldw	r17,4(sp)
   428e0:	dc000017 	ldw	r16,0(sp)
   428e4:	dec00304 	addi	sp,sp,12
   428e8:	f800283a 	ret
   428ec:	80c00017 	ldw	r3,0(r16)
   428f0:	183ff926 	beq	r3,zero,428d8 <__alt_data_end+0xfffdb7d8>
   428f4:	88c00015 	stw	r3,0(r17)
   428f8:	003ff706 	br	428d8 <__alt_data_end+0xfffdb7d8>

000428fc <__swsetup_r>:
   428fc:	00800134 	movhi	r2,4
   42900:	defffd04 	addi	sp,sp,-12
   42904:	109e8d04 	addi	r2,r2,31284
   42908:	dc400115 	stw	r17,4(sp)
   4290c:	2023883a 	mov	r17,r4
   42910:	11000017 	ldw	r4,0(r2)
   42914:	dc000015 	stw	r16,0(sp)
   42918:	dfc00215 	stw	ra,8(sp)
   4291c:	2821883a 	mov	r16,r5
   42920:	20000226 	beq	r4,zero,4292c <__swsetup_r+0x30>
   42924:	20800e17 	ldw	r2,56(r4)
   42928:	10003126 	beq	r2,zero,429f0 <__swsetup_r+0xf4>
   4292c:	8080030b 	ldhu	r2,12(r16)
   42930:	10c0020c 	andi	r3,r2,8
   42934:	1009883a 	mov	r4,r2
   42938:	18000f26 	beq	r3,zero,42978 <__swsetup_r+0x7c>
   4293c:	80c00417 	ldw	r3,16(r16)
   42940:	18001526 	beq	r3,zero,42998 <__swsetup_r+0x9c>
   42944:	1100004c 	andi	r4,r2,1
   42948:	20001c1e 	bne	r4,zero,429bc <__swsetup_r+0xc0>
   4294c:	1080008c 	andi	r2,r2,2
   42950:	1000291e 	bne	r2,zero,429f8 <__swsetup_r+0xfc>
   42954:	80800517 	ldw	r2,20(r16)
   42958:	80800215 	stw	r2,8(r16)
   4295c:	18001c26 	beq	r3,zero,429d0 <__swsetup_r+0xd4>
   42960:	0005883a 	mov	r2,zero
   42964:	dfc00217 	ldw	ra,8(sp)
   42968:	dc400117 	ldw	r17,4(sp)
   4296c:	dc000017 	ldw	r16,0(sp)
   42970:	dec00304 	addi	sp,sp,12
   42974:	f800283a 	ret
   42978:	2080040c 	andi	r2,r4,16
   4297c:	10002e26 	beq	r2,zero,42a38 <__swsetup_r+0x13c>
   42980:	2080010c 	andi	r2,r4,4
   42984:	10001e1e 	bne	r2,zero,42a00 <__swsetup_r+0x104>
   42988:	80c00417 	ldw	r3,16(r16)
   4298c:	20800214 	ori	r2,r4,8
   42990:	8080030d 	sth	r2,12(r16)
   42994:	183feb1e 	bne	r3,zero,42944 <__alt_data_end+0xfffdb844>
   42998:	1100a00c 	andi	r4,r2,640
   4299c:	01408004 	movi	r5,512
   429a0:	217fe826 	beq	r4,r5,42944 <__alt_data_end+0xfffdb844>
   429a4:	800b883a 	mov	r5,r16
   429a8:	8809883a 	mov	r4,r17
   429ac:	00432e40 	call	432e4 <__smakebuf_r>
   429b0:	8080030b 	ldhu	r2,12(r16)
   429b4:	80c00417 	ldw	r3,16(r16)
   429b8:	003fe206 	br	42944 <__alt_data_end+0xfffdb844>
   429bc:	80800517 	ldw	r2,20(r16)
   429c0:	80000215 	stw	zero,8(r16)
   429c4:	0085c83a 	sub	r2,zero,r2
   429c8:	80800615 	stw	r2,24(r16)
   429cc:	183fe41e 	bne	r3,zero,42960 <__alt_data_end+0xfffdb860>
   429d0:	80c0030b 	ldhu	r3,12(r16)
   429d4:	0005883a 	mov	r2,zero
   429d8:	1900200c 	andi	r4,r3,128
   429dc:	203fe126 	beq	r4,zero,42964 <__alt_data_end+0xfffdb864>
   429e0:	18c01014 	ori	r3,r3,64
   429e4:	80c0030d 	sth	r3,12(r16)
   429e8:	00bfffc4 	movi	r2,-1
   429ec:	003fdd06 	br	42964 <__alt_data_end+0xfffdb864>
   429f0:	0040c680 	call	40c68 <__sinit>
   429f4:	003fcd06 	br	4292c <__alt_data_end+0xfffdb82c>
   429f8:	0005883a 	mov	r2,zero
   429fc:	003fd606 	br	42958 <__alt_data_end+0xfffdb858>
   42a00:	81400c17 	ldw	r5,48(r16)
   42a04:	28000626 	beq	r5,zero,42a20 <__swsetup_r+0x124>
   42a08:	80801004 	addi	r2,r16,64
   42a0c:	28800326 	beq	r5,r2,42a1c <__swsetup_r+0x120>
   42a10:	8809883a 	mov	r4,r17
   42a14:	0042f740 	call	42f74 <_free_r>
   42a18:	8100030b 	ldhu	r4,12(r16)
   42a1c:	80000c15 	stw	zero,48(r16)
   42a20:	80c00417 	ldw	r3,16(r16)
   42a24:	00bff6c4 	movi	r2,-37
   42a28:	1108703a 	and	r4,r2,r4
   42a2c:	80000115 	stw	zero,4(r16)
   42a30:	80c00015 	stw	r3,0(r16)
   42a34:	003fd506 	br	4298c <__alt_data_end+0xfffdb88c>
   42a38:	00800244 	movi	r2,9
   42a3c:	88800015 	stw	r2,0(r17)
   42a40:	20801014 	ori	r2,r4,64
   42a44:	8080030d 	sth	r2,12(r16)
   42a48:	00bfffc4 	movi	r2,-1
   42a4c:	003fc506 	br	42964 <__alt_data_end+0xfffdb864>

00042a50 <_close_r>:
   42a50:	defffd04 	addi	sp,sp,-12
   42a54:	dc000015 	stw	r16,0(sp)
   42a58:	04000174 	movhi	r16,5
   42a5c:	dc400115 	stw	r17,4(sp)
   42a60:	84253904 	addi	r16,r16,-27420
   42a64:	2023883a 	mov	r17,r4
   42a68:	2809883a 	mov	r4,r5
   42a6c:	dfc00215 	stw	ra,8(sp)
   42a70:	80000015 	stw	zero,0(r16)
   42a74:	00435ec0 	call	435ec <close>
   42a78:	00ffffc4 	movi	r3,-1
   42a7c:	10c00526 	beq	r2,r3,42a94 <_close_r+0x44>
   42a80:	dfc00217 	ldw	ra,8(sp)
   42a84:	dc400117 	ldw	r17,4(sp)
   42a88:	dc000017 	ldw	r16,0(sp)
   42a8c:	dec00304 	addi	sp,sp,12
   42a90:	f800283a 	ret
   42a94:	80c00017 	ldw	r3,0(r16)
   42a98:	183ff926 	beq	r3,zero,42a80 <__alt_data_end+0xfffdb980>
   42a9c:	88c00015 	stw	r3,0(r17)
   42aa0:	003ff706 	br	42a80 <__alt_data_end+0xfffdb980>

00042aa4 <_fclose_r>:
   42aa4:	28003926 	beq	r5,zero,42b8c <_fclose_r+0xe8>
   42aa8:	defffc04 	addi	sp,sp,-16
   42aac:	dc400115 	stw	r17,4(sp)
   42ab0:	dc000015 	stw	r16,0(sp)
   42ab4:	dfc00315 	stw	ra,12(sp)
   42ab8:	dc800215 	stw	r18,8(sp)
   42abc:	2023883a 	mov	r17,r4
   42ac0:	2821883a 	mov	r16,r5
   42ac4:	20000226 	beq	r4,zero,42ad0 <_fclose_r+0x2c>
   42ac8:	20800e17 	ldw	r2,56(r4)
   42acc:	10002726 	beq	r2,zero,42b6c <_fclose_r+0xc8>
   42ad0:	8080030f 	ldh	r2,12(r16)
   42ad4:	1000071e 	bne	r2,zero,42af4 <_fclose_r+0x50>
   42ad8:	0005883a 	mov	r2,zero
   42adc:	dfc00317 	ldw	ra,12(sp)
   42ae0:	dc800217 	ldw	r18,8(sp)
   42ae4:	dc400117 	ldw	r17,4(sp)
   42ae8:	dc000017 	ldw	r16,0(sp)
   42aec:	dec00404 	addi	sp,sp,16
   42af0:	f800283a 	ret
   42af4:	800b883a 	mov	r5,r16
   42af8:	8809883a 	mov	r4,r17
   42afc:	0042ba80 	call	42ba8 <__sflush_r>
   42b00:	1025883a 	mov	r18,r2
   42b04:	80800b17 	ldw	r2,44(r16)
   42b08:	10000426 	beq	r2,zero,42b1c <_fclose_r+0x78>
   42b0c:	81400717 	ldw	r5,28(r16)
   42b10:	8809883a 	mov	r4,r17
   42b14:	103ee83a 	callr	r2
   42b18:	10001616 	blt	r2,zero,42b74 <_fclose_r+0xd0>
   42b1c:	8080030b 	ldhu	r2,12(r16)
   42b20:	1080200c 	andi	r2,r2,128
   42b24:	1000151e 	bne	r2,zero,42b7c <_fclose_r+0xd8>
   42b28:	81400c17 	ldw	r5,48(r16)
   42b2c:	28000526 	beq	r5,zero,42b44 <_fclose_r+0xa0>
   42b30:	80801004 	addi	r2,r16,64
   42b34:	28800226 	beq	r5,r2,42b40 <_fclose_r+0x9c>
   42b38:	8809883a 	mov	r4,r17
   42b3c:	0042f740 	call	42f74 <_free_r>
   42b40:	80000c15 	stw	zero,48(r16)
   42b44:	81401117 	ldw	r5,68(r16)
   42b48:	28000326 	beq	r5,zero,42b58 <_fclose_r+0xb4>
   42b4c:	8809883a 	mov	r4,r17
   42b50:	0042f740 	call	42f74 <_free_r>
   42b54:	80001115 	stw	zero,68(r16)
   42b58:	0040c780 	call	40c78 <__sfp_lock_acquire>
   42b5c:	8000030d 	sth	zero,12(r16)
   42b60:	0040c7c0 	call	40c7c <__sfp_lock_release>
   42b64:	9005883a 	mov	r2,r18
   42b68:	003fdc06 	br	42adc <__alt_data_end+0xfffdb9dc>
   42b6c:	0040c680 	call	40c68 <__sinit>
   42b70:	003fd706 	br	42ad0 <__alt_data_end+0xfffdb9d0>
   42b74:	04bfffc4 	movi	r18,-1
   42b78:	003fe806 	br	42b1c <__alt_data_end+0xfffdba1c>
   42b7c:	81400417 	ldw	r5,16(r16)
   42b80:	8809883a 	mov	r4,r17
   42b84:	0042f740 	call	42f74 <_free_r>
   42b88:	003fe706 	br	42b28 <__alt_data_end+0xfffdba28>
   42b8c:	0005883a 	mov	r2,zero
   42b90:	f800283a 	ret

00042b94 <fclose>:
   42b94:	00800134 	movhi	r2,4
   42b98:	109e8d04 	addi	r2,r2,31284
   42b9c:	200b883a 	mov	r5,r4
   42ba0:	11000017 	ldw	r4,0(r2)
   42ba4:	0042aa41 	jmpi	42aa4 <_fclose_r>

00042ba8 <__sflush_r>:
   42ba8:	2880030b 	ldhu	r2,12(r5)
   42bac:	defffb04 	addi	sp,sp,-20
   42bb0:	dcc00315 	stw	r19,12(sp)
   42bb4:	dc400115 	stw	r17,4(sp)
   42bb8:	dfc00415 	stw	ra,16(sp)
   42bbc:	dc800215 	stw	r18,8(sp)
   42bc0:	dc000015 	stw	r16,0(sp)
   42bc4:	10c0020c 	andi	r3,r2,8
   42bc8:	2823883a 	mov	r17,r5
   42bcc:	2027883a 	mov	r19,r4
   42bd0:	1800311e 	bne	r3,zero,42c98 <__sflush_r+0xf0>
   42bd4:	28c00117 	ldw	r3,4(r5)
   42bd8:	10820014 	ori	r2,r2,2048
   42bdc:	2880030d 	sth	r2,12(r5)
   42be0:	00c04b0e 	bge	zero,r3,42d10 <__sflush_r+0x168>
   42be4:	8a000a17 	ldw	r8,40(r17)
   42be8:	40002326 	beq	r8,zero,42c78 <__sflush_r+0xd0>
   42bec:	9c000017 	ldw	r16,0(r19)
   42bf0:	10c4000c 	andi	r3,r2,4096
   42bf4:	98000015 	stw	zero,0(r19)
   42bf8:	18004826 	beq	r3,zero,42d1c <__sflush_r+0x174>
   42bfc:	89801417 	ldw	r6,80(r17)
   42c00:	10c0010c 	andi	r3,r2,4
   42c04:	18000626 	beq	r3,zero,42c20 <__sflush_r+0x78>
   42c08:	88c00117 	ldw	r3,4(r17)
   42c0c:	88800c17 	ldw	r2,48(r17)
   42c10:	30cdc83a 	sub	r6,r6,r3
   42c14:	10000226 	beq	r2,zero,42c20 <__sflush_r+0x78>
   42c18:	88800f17 	ldw	r2,60(r17)
   42c1c:	308dc83a 	sub	r6,r6,r2
   42c20:	89400717 	ldw	r5,28(r17)
   42c24:	000f883a 	mov	r7,zero
   42c28:	9809883a 	mov	r4,r19
   42c2c:	403ee83a 	callr	r8
   42c30:	00ffffc4 	movi	r3,-1
   42c34:	10c04426 	beq	r2,r3,42d48 <__sflush_r+0x1a0>
   42c38:	88c0030b 	ldhu	r3,12(r17)
   42c3c:	89000417 	ldw	r4,16(r17)
   42c40:	88000115 	stw	zero,4(r17)
   42c44:	197dffcc 	andi	r5,r3,63487
   42c48:	8940030d 	sth	r5,12(r17)
   42c4c:	89000015 	stw	r4,0(r17)
   42c50:	18c4000c 	andi	r3,r3,4096
   42c54:	18002c1e 	bne	r3,zero,42d08 <__sflush_r+0x160>
   42c58:	89400c17 	ldw	r5,48(r17)
   42c5c:	9c000015 	stw	r16,0(r19)
   42c60:	28000526 	beq	r5,zero,42c78 <__sflush_r+0xd0>
   42c64:	88801004 	addi	r2,r17,64
   42c68:	28800226 	beq	r5,r2,42c74 <__sflush_r+0xcc>
   42c6c:	9809883a 	mov	r4,r19
   42c70:	0042f740 	call	42f74 <_free_r>
   42c74:	88000c15 	stw	zero,48(r17)
   42c78:	0005883a 	mov	r2,zero
   42c7c:	dfc00417 	ldw	ra,16(sp)
   42c80:	dcc00317 	ldw	r19,12(sp)
   42c84:	dc800217 	ldw	r18,8(sp)
   42c88:	dc400117 	ldw	r17,4(sp)
   42c8c:	dc000017 	ldw	r16,0(sp)
   42c90:	dec00504 	addi	sp,sp,20
   42c94:	f800283a 	ret
   42c98:	2c800417 	ldw	r18,16(r5)
   42c9c:	903ff626 	beq	r18,zero,42c78 <__alt_data_end+0xfffdbb78>
   42ca0:	2c000017 	ldw	r16,0(r5)
   42ca4:	108000cc 	andi	r2,r2,3
   42ca8:	2c800015 	stw	r18,0(r5)
   42cac:	84a1c83a 	sub	r16,r16,r18
   42cb0:	1000131e 	bne	r2,zero,42d00 <__sflush_r+0x158>
   42cb4:	28800517 	ldw	r2,20(r5)
   42cb8:	88800215 	stw	r2,8(r17)
   42cbc:	04000316 	blt	zero,r16,42ccc <__sflush_r+0x124>
   42cc0:	003fed06 	br	42c78 <__alt_data_end+0xfffdbb78>
   42cc4:	90a5883a 	add	r18,r18,r2
   42cc8:	043feb0e 	bge	zero,r16,42c78 <__alt_data_end+0xfffdbb78>
   42ccc:	88800917 	ldw	r2,36(r17)
   42cd0:	89400717 	ldw	r5,28(r17)
   42cd4:	800f883a 	mov	r7,r16
   42cd8:	900d883a 	mov	r6,r18
   42cdc:	9809883a 	mov	r4,r19
   42ce0:	103ee83a 	callr	r2
   42ce4:	80a1c83a 	sub	r16,r16,r2
   42ce8:	00bff616 	blt	zero,r2,42cc4 <__alt_data_end+0xfffdbbc4>
   42cec:	88c0030b 	ldhu	r3,12(r17)
   42cf0:	00bfffc4 	movi	r2,-1
   42cf4:	18c01014 	ori	r3,r3,64
   42cf8:	88c0030d 	sth	r3,12(r17)
   42cfc:	003fdf06 	br	42c7c <__alt_data_end+0xfffdbb7c>
   42d00:	0005883a 	mov	r2,zero
   42d04:	003fec06 	br	42cb8 <__alt_data_end+0xfffdbbb8>
   42d08:	88801415 	stw	r2,80(r17)
   42d0c:	003fd206 	br	42c58 <__alt_data_end+0xfffdbb58>
   42d10:	28c00f17 	ldw	r3,60(r5)
   42d14:	00ffb316 	blt	zero,r3,42be4 <__alt_data_end+0xfffdbae4>
   42d18:	003fd706 	br	42c78 <__alt_data_end+0xfffdbb78>
   42d1c:	89400717 	ldw	r5,28(r17)
   42d20:	000d883a 	mov	r6,zero
   42d24:	01c00044 	movi	r7,1
   42d28:	9809883a 	mov	r4,r19
   42d2c:	403ee83a 	callr	r8
   42d30:	100d883a 	mov	r6,r2
   42d34:	00bfffc4 	movi	r2,-1
   42d38:	30801426 	beq	r6,r2,42d8c <__sflush_r+0x1e4>
   42d3c:	8880030b 	ldhu	r2,12(r17)
   42d40:	8a000a17 	ldw	r8,40(r17)
   42d44:	003fae06 	br	42c00 <__alt_data_end+0xfffdbb00>
   42d48:	98c00017 	ldw	r3,0(r19)
   42d4c:	183fba26 	beq	r3,zero,42c38 <__alt_data_end+0xfffdbb38>
   42d50:	01000744 	movi	r4,29
   42d54:	19000626 	beq	r3,r4,42d70 <__sflush_r+0x1c8>
   42d58:	01000584 	movi	r4,22
   42d5c:	19000426 	beq	r3,r4,42d70 <__sflush_r+0x1c8>
   42d60:	88c0030b 	ldhu	r3,12(r17)
   42d64:	18c01014 	ori	r3,r3,64
   42d68:	88c0030d 	sth	r3,12(r17)
   42d6c:	003fc306 	br	42c7c <__alt_data_end+0xfffdbb7c>
   42d70:	8880030b 	ldhu	r2,12(r17)
   42d74:	88c00417 	ldw	r3,16(r17)
   42d78:	88000115 	stw	zero,4(r17)
   42d7c:	10bdffcc 	andi	r2,r2,63487
   42d80:	8880030d 	sth	r2,12(r17)
   42d84:	88c00015 	stw	r3,0(r17)
   42d88:	003fb306 	br	42c58 <__alt_data_end+0xfffdbb58>
   42d8c:	98800017 	ldw	r2,0(r19)
   42d90:	103fea26 	beq	r2,zero,42d3c <__alt_data_end+0xfffdbc3c>
   42d94:	00c00744 	movi	r3,29
   42d98:	10c00226 	beq	r2,r3,42da4 <__sflush_r+0x1fc>
   42d9c:	00c00584 	movi	r3,22
   42da0:	10c0031e 	bne	r2,r3,42db0 <__sflush_r+0x208>
   42da4:	9c000015 	stw	r16,0(r19)
   42da8:	0005883a 	mov	r2,zero
   42dac:	003fb306 	br	42c7c <__alt_data_end+0xfffdbb7c>
   42db0:	88c0030b 	ldhu	r3,12(r17)
   42db4:	3005883a 	mov	r2,r6
   42db8:	18c01014 	ori	r3,r3,64
   42dbc:	88c0030d 	sth	r3,12(r17)
   42dc0:	003fae06 	br	42c7c <__alt_data_end+0xfffdbb7c>

00042dc4 <_fflush_r>:
   42dc4:	defffd04 	addi	sp,sp,-12
   42dc8:	dc000115 	stw	r16,4(sp)
   42dcc:	dfc00215 	stw	ra,8(sp)
   42dd0:	2021883a 	mov	r16,r4
   42dd4:	20000226 	beq	r4,zero,42de0 <_fflush_r+0x1c>
   42dd8:	20800e17 	ldw	r2,56(r4)
   42ddc:	10000c26 	beq	r2,zero,42e10 <_fflush_r+0x4c>
   42de0:	2880030f 	ldh	r2,12(r5)
   42de4:	1000051e 	bne	r2,zero,42dfc <_fflush_r+0x38>
   42de8:	0005883a 	mov	r2,zero
   42dec:	dfc00217 	ldw	ra,8(sp)
   42df0:	dc000117 	ldw	r16,4(sp)
   42df4:	dec00304 	addi	sp,sp,12
   42df8:	f800283a 	ret
   42dfc:	8009883a 	mov	r4,r16
   42e00:	dfc00217 	ldw	ra,8(sp)
   42e04:	dc000117 	ldw	r16,4(sp)
   42e08:	dec00304 	addi	sp,sp,12
   42e0c:	0042ba81 	jmpi	42ba8 <__sflush_r>
   42e10:	d9400015 	stw	r5,0(sp)
   42e14:	0040c680 	call	40c68 <__sinit>
   42e18:	d9400017 	ldw	r5,0(sp)
   42e1c:	003ff006 	br	42de0 <__alt_data_end+0xfffdbce0>

00042e20 <fflush>:
   42e20:	20000526 	beq	r4,zero,42e38 <fflush+0x18>
   42e24:	00800134 	movhi	r2,4
   42e28:	109e8d04 	addi	r2,r2,31284
   42e2c:	200b883a 	mov	r5,r4
   42e30:	11000017 	ldw	r4,0(r2)
   42e34:	0042dc41 	jmpi	42dc4 <_fflush_r>
   42e38:	00800134 	movhi	r2,4
   42e3c:	109e8c04 	addi	r2,r2,31280
   42e40:	11000017 	ldw	r4,0(r2)
   42e44:	01400134 	movhi	r5,4
   42e48:	294b7104 	addi	r5,r5,11716
   42e4c:	00412381 	jmpi	41238 <_fwalk_reent>

00042e50 <_malloc_trim_r>:
   42e50:	defffb04 	addi	sp,sp,-20
   42e54:	dcc00315 	stw	r19,12(sp)
   42e58:	04c00134 	movhi	r19,4
   42e5c:	dc800215 	stw	r18,8(sp)
   42e60:	dc400115 	stw	r17,4(sp)
   42e64:	dc000015 	stw	r16,0(sp)
   42e68:	dfc00415 	stw	ra,16(sp)
   42e6c:	2821883a 	mov	r16,r5
   42e70:	9cd90704 	addi	r19,r19,25628
   42e74:	2025883a 	mov	r18,r4
   42e78:	0043b2c0 	call	43b2c <__malloc_lock>
   42e7c:	98800217 	ldw	r2,8(r19)
   42e80:	14400117 	ldw	r17,4(r2)
   42e84:	00bfff04 	movi	r2,-4
   42e88:	88a2703a 	and	r17,r17,r2
   42e8c:	8c21c83a 	sub	r16,r17,r16
   42e90:	8403fbc4 	addi	r16,r16,4079
   42e94:	8020d33a 	srli	r16,r16,12
   42e98:	0083ffc4 	movi	r2,4095
   42e9c:	843fffc4 	addi	r16,r16,-1
   42ea0:	8020933a 	slli	r16,r16,12
   42ea4:	1400060e 	bge	r2,r16,42ec0 <_malloc_trim_r+0x70>
   42ea8:	000b883a 	mov	r5,zero
   42eac:	9009883a 	mov	r4,r18
   42eb0:	004270c0 	call	4270c <_sbrk_r>
   42eb4:	98c00217 	ldw	r3,8(r19)
   42eb8:	1c47883a 	add	r3,r3,r17
   42ebc:	10c00a26 	beq	r2,r3,42ee8 <_malloc_trim_r+0x98>
   42ec0:	9009883a 	mov	r4,r18
   42ec4:	0043b500 	call	43b50 <__malloc_unlock>
   42ec8:	0005883a 	mov	r2,zero
   42ecc:	dfc00417 	ldw	ra,16(sp)
   42ed0:	dcc00317 	ldw	r19,12(sp)
   42ed4:	dc800217 	ldw	r18,8(sp)
   42ed8:	dc400117 	ldw	r17,4(sp)
   42edc:	dc000017 	ldw	r16,0(sp)
   42ee0:	dec00504 	addi	sp,sp,20
   42ee4:	f800283a 	ret
   42ee8:	040bc83a 	sub	r5,zero,r16
   42eec:	9009883a 	mov	r4,r18
   42ef0:	004270c0 	call	4270c <_sbrk_r>
   42ef4:	00ffffc4 	movi	r3,-1
   42ef8:	10c00d26 	beq	r2,r3,42f30 <_malloc_trim_r+0xe0>
   42efc:	00c00174 	movhi	r3,5
   42f00:	18e54104 	addi	r3,r3,-27388
   42f04:	18800017 	ldw	r2,0(r3)
   42f08:	99000217 	ldw	r4,8(r19)
   42f0c:	8c23c83a 	sub	r17,r17,r16
   42f10:	8c400054 	ori	r17,r17,1
   42f14:	1421c83a 	sub	r16,r2,r16
   42f18:	24400115 	stw	r17,4(r4)
   42f1c:	9009883a 	mov	r4,r18
   42f20:	1c000015 	stw	r16,0(r3)
   42f24:	0043b500 	call	43b50 <__malloc_unlock>
   42f28:	00800044 	movi	r2,1
   42f2c:	003fe706 	br	42ecc <__alt_data_end+0xfffdbdcc>
   42f30:	000b883a 	mov	r5,zero
   42f34:	9009883a 	mov	r4,r18
   42f38:	004270c0 	call	4270c <_sbrk_r>
   42f3c:	99000217 	ldw	r4,8(r19)
   42f40:	014003c4 	movi	r5,15
   42f44:	1107c83a 	sub	r3,r2,r4
   42f48:	28ffdd0e 	bge	r5,r3,42ec0 <__alt_data_end+0xfffdbdc0>
   42f4c:	01400134 	movhi	r5,4
   42f50:	295e8e04 	addi	r5,r5,31288
   42f54:	29400017 	ldw	r5,0(r5)
   42f58:	18c00054 	ori	r3,r3,1
   42f5c:	20c00115 	stw	r3,4(r4)
   42f60:	00c00174 	movhi	r3,5
   42f64:	1145c83a 	sub	r2,r2,r5
   42f68:	18e54104 	addi	r3,r3,-27388
   42f6c:	18800015 	stw	r2,0(r3)
   42f70:	003fd306 	br	42ec0 <__alt_data_end+0xfffdbdc0>

00042f74 <_free_r>:
   42f74:	28004126 	beq	r5,zero,4307c <_free_r+0x108>
   42f78:	defffd04 	addi	sp,sp,-12
   42f7c:	dc400115 	stw	r17,4(sp)
   42f80:	dc000015 	stw	r16,0(sp)
   42f84:	2023883a 	mov	r17,r4
   42f88:	2821883a 	mov	r16,r5
   42f8c:	dfc00215 	stw	ra,8(sp)
   42f90:	0043b2c0 	call	43b2c <__malloc_lock>
   42f94:	81ffff17 	ldw	r7,-4(r16)
   42f98:	00bfff84 	movi	r2,-2
   42f9c:	01000134 	movhi	r4,4
   42fa0:	81bffe04 	addi	r6,r16,-8
   42fa4:	3884703a 	and	r2,r7,r2
   42fa8:	21190704 	addi	r4,r4,25628
   42fac:	308b883a 	add	r5,r6,r2
   42fb0:	2a400117 	ldw	r9,4(r5)
   42fb4:	22000217 	ldw	r8,8(r4)
   42fb8:	00ffff04 	movi	r3,-4
   42fbc:	48c6703a 	and	r3,r9,r3
   42fc0:	2a005726 	beq	r5,r8,43120 <_free_r+0x1ac>
   42fc4:	28c00115 	stw	r3,4(r5)
   42fc8:	39c0004c 	andi	r7,r7,1
   42fcc:	3800091e 	bne	r7,zero,42ff4 <_free_r+0x80>
   42fd0:	823ffe17 	ldw	r8,-8(r16)
   42fd4:	22400204 	addi	r9,r4,8
   42fd8:	320dc83a 	sub	r6,r6,r8
   42fdc:	31c00217 	ldw	r7,8(r6)
   42fe0:	1205883a 	add	r2,r2,r8
   42fe4:	3a406526 	beq	r7,r9,4317c <_free_r+0x208>
   42fe8:	32000317 	ldw	r8,12(r6)
   42fec:	3a000315 	stw	r8,12(r7)
   42ff0:	41c00215 	stw	r7,8(r8)
   42ff4:	28cf883a 	add	r7,r5,r3
   42ff8:	39c00117 	ldw	r7,4(r7)
   42ffc:	39c0004c 	andi	r7,r7,1
   43000:	38003a26 	beq	r7,zero,430ec <_free_r+0x178>
   43004:	10c00054 	ori	r3,r2,1
   43008:	30c00115 	stw	r3,4(r6)
   4300c:	3087883a 	add	r3,r6,r2
   43010:	18800015 	stw	r2,0(r3)
   43014:	00c07fc4 	movi	r3,511
   43018:	18801936 	bltu	r3,r2,43080 <_free_r+0x10c>
   4301c:	1004d0fa 	srli	r2,r2,3
   43020:	01c00044 	movi	r7,1
   43024:	21400117 	ldw	r5,4(r4)
   43028:	10c00044 	addi	r3,r2,1
   4302c:	18c7883a 	add	r3,r3,r3
   43030:	1005d0ba 	srai	r2,r2,2
   43034:	18c7883a 	add	r3,r3,r3
   43038:	18c7883a 	add	r3,r3,r3
   4303c:	1907883a 	add	r3,r3,r4
   43040:	3884983a 	sll	r2,r7,r2
   43044:	19c00017 	ldw	r7,0(r3)
   43048:	1a3ffe04 	addi	r8,r3,-8
   4304c:	1144b03a 	or	r2,r2,r5
   43050:	32000315 	stw	r8,12(r6)
   43054:	31c00215 	stw	r7,8(r6)
   43058:	20800115 	stw	r2,4(r4)
   4305c:	19800015 	stw	r6,0(r3)
   43060:	39800315 	stw	r6,12(r7)
   43064:	8809883a 	mov	r4,r17
   43068:	dfc00217 	ldw	ra,8(sp)
   4306c:	dc400117 	ldw	r17,4(sp)
   43070:	dc000017 	ldw	r16,0(sp)
   43074:	dec00304 	addi	sp,sp,12
   43078:	0043b501 	jmpi	43b50 <__malloc_unlock>
   4307c:	f800283a 	ret
   43080:	100ad27a 	srli	r5,r2,9
   43084:	00c00104 	movi	r3,4
   43088:	19404a36 	bltu	r3,r5,431b4 <_free_r+0x240>
   4308c:	100ad1ba 	srli	r5,r2,6
   43090:	28c00e44 	addi	r3,r5,57
   43094:	18c7883a 	add	r3,r3,r3
   43098:	29400e04 	addi	r5,r5,56
   4309c:	18c7883a 	add	r3,r3,r3
   430a0:	18c7883a 	add	r3,r3,r3
   430a4:	1909883a 	add	r4,r3,r4
   430a8:	20c00017 	ldw	r3,0(r4)
   430ac:	01c00134 	movhi	r7,4
   430b0:	213ffe04 	addi	r4,r4,-8
   430b4:	39d90704 	addi	r7,r7,25628
   430b8:	20c04426 	beq	r4,r3,431cc <_free_r+0x258>
   430bc:	01ffff04 	movi	r7,-4
   430c0:	19400117 	ldw	r5,4(r3)
   430c4:	29ca703a 	and	r5,r5,r7
   430c8:	1140022e 	bgeu	r2,r5,430d4 <_free_r+0x160>
   430cc:	18c00217 	ldw	r3,8(r3)
   430d0:	20fffb1e 	bne	r4,r3,430c0 <__alt_data_end+0xfffdbfc0>
   430d4:	19000317 	ldw	r4,12(r3)
   430d8:	31000315 	stw	r4,12(r6)
   430dc:	30c00215 	stw	r3,8(r6)
   430e0:	21800215 	stw	r6,8(r4)
   430e4:	19800315 	stw	r6,12(r3)
   430e8:	003fde06 	br	43064 <__alt_data_end+0xfffdbf64>
   430ec:	29c00217 	ldw	r7,8(r5)
   430f0:	10c5883a 	add	r2,r2,r3
   430f4:	00c00134 	movhi	r3,4
   430f8:	18d90904 	addi	r3,r3,25636
   430fc:	38c03b26 	beq	r7,r3,431ec <_free_r+0x278>
   43100:	2a000317 	ldw	r8,12(r5)
   43104:	11400054 	ori	r5,r2,1
   43108:	3087883a 	add	r3,r6,r2
   4310c:	3a000315 	stw	r8,12(r7)
   43110:	41c00215 	stw	r7,8(r8)
   43114:	31400115 	stw	r5,4(r6)
   43118:	18800015 	stw	r2,0(r3)
   4311c:	003fbd06 	br	43014 <__alt_data_end+0xfffdbf14>
   43120:	39c0004c 	andi	r7,r7,1
   43124:	10c5883a 	add	r2,r2,r3
   43128:	3800071e 	bne	r7,zero,43148 <_free_r+0x1d4>
   4312c:	81fffe17 	ldw	r7,-8(r16)
   43130:	31cdc83a 	sub	r6,r6,r7
   43134:	30c00317 	ldw	r3,12(r6)
   43138:	31400217 	ldw	r5,8(r6)
   4313c:	11c5883a 	add	r2,r2,r7
   43140:	28c00315 	stw	r3,12(r5)
   43144:	19400215 	stw	r5,8(r3)
   43148:	10c00054 	ori	r3,r2,1
   4314c:	30c00115 	stw	r3,4(r6)
   43150:	00c00134 	movhi	r3,4
   43154:	18de8f04 	addi	r3,r3,31292
   43158:	18c00017 	ldw	r3,0(r3)
   4315c:	21800215 	stw	r6,8(r4)
   43160:	10ffc036 	bltu	r2,r3,43064 <__alt_data_end+0xfffdbf64>
   43164:	00800174 	movhi	r2,5
   43168:	10a53804 	addi	r2,r2,-27424
   4316c:	11400017 	ldw	r5,0(r2)
   43170:	8809883a 	mov	r4,r17
   43174:	0042e500 	call	42e50 <_malloc_trim_r>
   43178:	003fba06 	br	43064 <__alt_data_end+0xfffdbf64>
   4317c:	28c9883a 	add	r4,r5,r3
   43180:	21000117 	ldw	r4,4(r4)
   43184:	2100004c 	andi	r4,r4,1
   43188:	2000391e 	bne	r4,zero,43270 <_free_r+0x2fc>
   4318c:	29c00217 	ldw	r7,8(r5)
   43190:	29000317 	ldw	r4,12(r5)
   43194:	1885883a 	add	r2,r3,r2
   43198:	10c00054 	ori	r3,r2,1
   4319c:	39000315 	stw	r4,12(r7)
   431a0:	21c00215 	stw	r7,8(r4)
   431a4:	30c00115 	stw	r3,4(r6)
   431a8:	308d883a 	add	r6,r6,r2
   431ac:	30800015 	stw	r2,0(r6)
   431b0:	003fac06 	br	43064 <__alt_data_end+0xfffdbf64>
   431b4:	00c00504 	movi	r3,20
   431b8:	19401536 	bltu	r3,r5,43210 <_free_r+0x29c>
   431bc:	28c01704 	addi	r3,r5,92
   431c0:	18c7883a 	add	r3,r3,r3
   431c4:	294016c4 	addi	r5,r5,91
   431c8:	003fb406 	br	4309c <__alt_data_end+0xfffdbf9c>
   431cc:	280bd0ba 	srai	r5,r5,2
   431d0:	00c00044 	movi	r3,1
   431d4:	38800117 	ldw	r2,4(r7)
   431d8:	194a983a 	sll	r5,r3,r5
   431dc:	2007883a 	mov	r3,r4
   431e0:	2884b03a 	or	r2,r5,r2
   431e4:	38800115 	stw	r2,4(r7)
   431e8:	003fbb06 	br	430d8 <__alt_data_end+0xfffdbfd8>
   431ec:	21800515 	stw	r6,20(r4)
   431f0:	21800415 	stw	r6,16(r4)
   431f4:	10c00054 	ori	r3,r2,1
   431f8:	31c00315 	stw	r7,12(r6)
   431fc:	31c00215 	stw	r7,8(r6)
   43200:	30c00115 	stw	r3,4(r6)
   43204:	308d883a 	add	r6,r6,r2
   43208:	30800015 	stw	r2,0(r6)
   4320c:	003f9506 	br	43064 <__alt_data_end+0xfffdbf64>
   43210:	00c01504 	movi	r3,84
   43214:	19400536 	bltu	r3,r5,4322c <_free_r+0x2b8>
   43218:	100ad33a 	srli	r5,r2,12
   4321c:	28c01bc4 	addi	r3,r5,111
   43220:	18c7883a 	add	r3,r3,r3
   43224:	29401b84 	addi	r5,r5,110
   43228:	003f9c06 	br	4309c <__alt_data_end+0xfffdbf9c>
   4322c:	00c05504 	movi	r3,340
   43230:	19400536 	bltu	r3,r5,43248 <_free_r+0x2d4>
   43234:	100ad3fa 	srli	r5,r2,15
   43238:	28c01e04 	addi	r3,r5,120
   4323c:	18c7883a 	add	r3,r3,r3
   43240:	29401dc4 	addi	r5,r5,119
   43244:	003f9506 	br	4309c <__alt_data_end+0xfffdbf9c>
   43248:	00c15504 	movi	r3,1364
   4324c:	19400536 	bltu	r3,r5,43264 <_free_r+0x2f0>
   43250:	100ad4ba 	srli	r5,r2,18
   43254:	28c01f44 	addi	r3,r5,125
   43258:	18c7883a 	add	r3,r3,r3
   4325c:	29401f04 	addi	r5,r5,124
   43260:	003f8e06 	br	4309c <__alt_data_end+0xfffdbf9c>
   43264:	00c03f84 	movi	r3,254
   43268:	01401f84 	movi	r5,126
   4326c:	003f8b06 	br	4309c <__alt_data_end+0xfffdbf9c>
   43270:	10c00054 	ori	r3,r2,1
   43274:	30c00115 	stw	r3,4(r6)
   43278:	308d883a 	add	r6,r6,r2
   4327c:	30800015 	stw	r2,0(r6)
   43280:	003f7806 	br	43064 <__alt_data_end+0xfffdbf64>

00043284 <_lseek_r>:
   43284:	defffd04 	addi	sp,sp,-12
   43288:	2805883a 	mov	r2,r5
   4328c:	dc000015 	stw	r16,0(sp)
   43290:	04000174 	movhi	r16,5
   43294:	dc400115 	stw	r17,4(sp)
   43298:	300b883a 	mov	r5,r6
   4329c:	84253904 	addi	r16,r16,-27420
   432a0:	2023883a 	mov	r17,r4
   432a4:	380d883a 	mov	r6,r7
   432a8:	1009883a 	mov	r4,r2
   432ac:	dfc00215 	stw	ra,8(sp)
   432b0:	80000015 	stw	zero,0(r16)
   432b4:	00439dc0 	call	439dc <lseek>
   432b8:	00ffffc4 	movi	r3,-1
   432bc:	10c00526 	beq	r2,r3,432d4 <_lseek_r+0x50>
   432c0:	dfc00217 	ldw	ra,8(sp)
   432c4:	dc400117 	ldw	r17,4(sp)
   432c8:	dc000017 	ldw	r16,0(sp)
   432cc:	dec00304 	addi	sp,sp,12
   432d0:	f800283a 	ret
   432d4:	80c00017 	ldw	r3,0(r16)
   432d8:	183ff926 	beq	r3,zero,432c0 <__alt_data_end+0xfffdc1c0>
   432dc:	88c00015 	stw	r3,0(r17)
   432e0:	003ff706 	br	432c0 <__alt_data_end+0xfffdc1c0>

000432e4 <__smakebuf_r>:
   432e4:	2880030b 	ldhu	r2,12(r5)
   432e8:	10c0008c 	andi	r3,r2,2
   432ec:	1800411e 	bne	r3,zero,433f4 <__smakebuf_r+0x110>
   432f0:	deffec04 	addi	sp,sp,-80
   432f4:	dc000f15 	stw	r16,60(sp)
   432f8:	2821883a 	mov	r16,r5
   432fc:	2940038f 	ldh	r5,14(r5)
   43300:	dc401015 	stw	r17,64(sp)
   43304:	dfc01315 	stw	ra,76(sp)
   43308:	dcc01215 	stw	r19,72(sp)
   4330c:	dc801115 	stw	r18,68(sp)
   43310:	2023883a 	mov	r17,r4
   43314:	28001c16 	blt	r5,zero,43388 <__smakebuf_r+0xa4>
   43318:	d80d883a 	mov	r6,sp
   4331c:	00435000 	call	43500 <_fstat_r>
   43320:	10001816 	blt	r2,zero,43384 <__smakebuf_r+0xa0>
   43324:	d8800117 	ldw	r2,4(sp)
   43328:	00e00014 	movui	r3,32768
   4332c:	10bc000c 	andi	r2,r2,61440
   43330:	14c80020 	cmpeqi	r19,r2,8192
   43334:	10c03726 	beq	r2,r3,43414 <__smakebuf_r+0x130>
   43338:	80c0030b 	ldhu	r3,12(r16)
   4333c:	18c20014 	ori	r3,r3,2048
   43340:	80c0030d 	sth	r3,12(r16)
   43344:	00c80004 	movi	r3,8192
   43348:	10c0521e 	bne	r2,r3,43494 <__smakebuf_r+0x1b0>
   4334c:	8140038f 	ldh	r5,14(r16)
   43350:	8809883a 	mov	r4,r17
   43354:	004355c0 	call	4355c <_isatty_r>
   43358:	10004c26 	beq	r2,zero,4348c <__smakebuf_r+0x1a8>
   4335c:	8080030b 	ldhu	r2,12(r16)
   43360:	80c010c4 	addi	r3,r16,67
   43364:	80c00015 	stw	r3,0(r16)
   43368:	10800054 	ori	r2,r2,1
   4336c:	8080030d 	sth	r2,12(r16)
   43370:	00800044 	movi	r2,1
   43374:	80c00415 	stw	r3,16(r16)
   43378:	80800515 	stw	r2,20(r16)
   4337c:	04810004 	movi	r18,1024
   43380:	00000706 	br	433a0 <__smakebuf_r+0xbc>
   43384:	8080030b 	ldhu	r2,12(r16)
   43388:	10c0200c 	andi	r3,r2,128
   4338c:	18001f1e 	bne	r3,zero,4340c <__smakebuf_r+0x128>
   43390:	04810004 	movi	r18,1024
   43394:	10820014 	ori	r2,r2,2048
   43398:	8080030d 	sth	r2,12(r16)
   4339c:	0027883a 	mov	r19,zero
   433a0:	900b883a 	mov	r5,r18
   433a4:	8809883a 	mov	r4,r17
   433a8:	00412fc0 	call	412fc <_malloc_r>
   433ac:	10002c26 	beq	r2,zero,43460 <__smakebuf_r+0x17c>
   433b0:	80c0030b 	ldhu	r3,12(r16)
   433b4:	01000134 	movhi	r4,4
   433b8:	21024804 	addi	r4,r4,2336
   433bc:	89000f15 	stw	r4,60(r17)
   433c0:	18c02014 	ori	r3,r3,128
   433c4:	80c0030d 	sth	r3,12(r16)
   433c8:	80800015 	stw	r2,0(r16)
   433cc:	80800415 	stw	r2,16(r16)
   433d0:	84800515 	stw	r18,20(r16)
   433d4:	98001a1e 	bne	r19,zero,43440 <__smakebuf_r+0x15c>
   433d8:	dfc01317 	ldw	ra,76(sp)
   433dc:	dcc01217 	ldw	r19,72(sp)
   433e0:	dc801117 	ldw	r18,68(sp)
   433e4:	dc401017 	ldw	r17,64(sp)
   433e8:	dc000f17 	ldw	r16,60(sp)
   433ec:	dec01404 	addi	sp,sp,80
   433f0:	f800283a 	ret
   433f4:	288010c4 	addi	r2,r5,67
   433f8:	28800015 	stw	r2,0(r5)
   433fc:	28800415 	stw	r2,16(r5)
   43400:	00800044 	movi	r2,1
   43404:	28800515 	stw	r2,20(r5)
   43408:	f800283a 	ret
   4340c:	04801004 	movi	r18,64
   43410:	003fe006 	br	43394 <__alt_data_end+0xfffdc294>
   43414:	81000a17 	ldw	r4,40(r16)
   43418:	00c00134 	movhi	r3,4
   4341c:	18ca0e04 	addi	r3,r3,10296
   43420:	20ffc51e 	bne	r4,r3,43338 <__alt_data_end+0xfffdc238>
   43424:	8080030b 	ldhu	r2,12(r16)
   43428:	04810004 	movi	r18,1024
   4342c:	84801315 	stw	r18,76(r16)
   43430:	1484b03a 	or	r2,r2,r18
   43434:	8080030d 	sth	r2,12(r16)
   43438:	0027883a 	mov	r19,zero
   4343c:	003fd806 	br	433a0 <__alt_data_end+0xfffdc2a0>
   43440:	8140038f 	ldh	r5,14(r16)
   43444:	8809883a 	mov	r4,r17
   43448:	004355c0 	call	4355c <_isatty_r>
   4344c:	103fe226 	beq	r2,zero,433d8 <__alt_data_end+0xfffdc2d8>
   43450:	8080030b 	ldhu	r2,12(r16)
   43454:	10800054 	ori	r2,r2,1
   43458:	8080030d 	sth	r2,12(r16)
   4345c:	003fde06 	br	433d8 <__alt_data_end+0xfffdc2d8>
   43460:	8080030b 	ldhu	r2,12(r16)
   43464:	10c0800c 	andi	r3,r2,512
   43468:	183fdb1e 	bne	r3,zero,433d8 <__alt_data_end+0xfffdc2d8>
   4346c:	10800094 	ori	r2,r2,2
   43470:	80c010c4 	addi	r3,r16,67
   43474:	8080030d 	sth	r2,12(r16)
   43478:	00800044 	movi	r2,1
   4347c:	80c00015 	stw	r3,0(r16)
   43480:	80c00415 	stw	r3,16(r16)
   43484:	80800515 	stw	r2,20(r16)
   43488:	003fd306 	br	433d8 <__alt_data_end+0xfffdc2d8>
   4348c:	04810004 	movi	r18,1024
   43490:	003fc306 	br	433a0 <__alt_data_end+0xfffdc2a0>
   43494:	0027883a 	mov	r19,zero
   43498:	04810004 	movi	r18,1024
   4349c:	003fc006 	br	433a0 <__alt_data_end+0xfffdc2a0>

000434a0 <_read_r>:
   434a0:	defffd04 	addi	sp,sp,-12
   434a4:	2805883a 	mov	r2,r5
   434a8:	dc000015 	stw	r16,0(sp)
   434ac:	04000174 	movhi	r16,5
   434b0:	dc400115 	stw	r17,4(sp)
   434b4:	300b883a 	mov	r5,r6
   434b8:	84253904 	addi	r16,r16,-27420
   434bc:	2023883a 	mov	r17,r4
   434c0:	380d883a 	mov	r6,r7
   434c4:	1009883a 	mov	r4,r2
   434c8:	dfc00215 	stw	ra,8(sp)
   434cc:	80000015 	stw	zero,0(r16)
   434d0:	0043bb00 	call	43bb0 <read>
   434d4:	00ffffc4 	movi	r3,-1
   434d8:	10c00526 	beq	r2,r3,434f0 <_read_r+0x50>
   434dc:	dfc00217 	ldw	ra,8(sp)
   434e0:	dc400117 	ldw	r17,4(sp)
   434e4:	dc000017 	ldw	r16,0(sp)
   434e8:	dec00304 	addi	sp,sp,12
   434ec:	f800283a 	ret
   434f0:	80c00017 	ldw	r3,0(r16)
   434f4:	183ff926 	beq	r3,zero,434dc <__alt_data_end+0xfffdc3dc>
   434f8:	88c00015 	stw	r3,0(r17)
   434fc:	003ff706 	br	434dc <__alt_data_end+0xfffdc3dc>

00043500 <_fstat_r>:
   43500:	defffd04 	addi	sp,sp,-12
   43504:	2805883a 	mov	r2,r5
   43508:	dc000015 	stw	r16,0(sp)
   4350c:	04000174 	movhi	r16,5
   43510:	dc400115 	stw	r17,4(sp)
   43514:	84253904 	addi	r16,r16,-27420
   43518:	2023883a 	mov	r17,r4
   4351c:	300b883a 	mov	r5,r6
   43520:	1009883a 	mov	r4,r2
   43524:	dfc00215 	stw	ra,8(sp)
   43528:	80000015 	stw	zero,0(r16)
   4352c:	00437240 	call	43724 <fstat>
   43530:	00ffffc4 	movi	r3,-1
   43534:	10c00526 	beq	r2,r3,4354c <_fstat_r+0x4c>
   43538:	dfc00217 	ldw	ra,8(sp)
   4353c:	dc400117 	ldw	r17,4(sp)
   43540:	dc000017 	ldw	r16,0(sp)
   43544:	dec00304 	addi	sp,sp,12
   43548:	f800283a 	ret
   4354c:	80c00017 	ldw	r3,0(r16)
   43550:	183ff926 	beq	r3,zero,43538 <__alt_data_end+0xfffdc438>
   43554:	88c00015 	stw	r3,0(r17)
   43558:	003ff706 	br	43538 <__alt_data_end+0xfffdc438>

0004355c <_isatty_r>:
   4355c:	defffd04 	addi	sp,sp,-12
   43560:	dc000015 	stw	r16,0(sp)
   43564:	04000174 	movhi	r16,5
   43568:	dc400115 	stw	r17,4(sp)
   4356c:	84253904 	addi	r16,r16,-27420
   43570:	2023883a 	mov	r17,r4
   43574:	2809883a 	mov	r4,r5
   43578:	dfc00215 	stw	ra,8(sp)
   4357c:	80000015 	stw	zero,0(r16)
   43580:	00438100 	call	43810 <isatty>
   43584:	00ffffc4 	movi	r3,-1
   43588:	10c00526 	beq	r2,r3,435a0 <_isatty_r+0x44>
   4358c:	dfc00217 	ldw	ra,8(sp)
   43590:	dc400117 	ldw	r17,4(sp)
   43594:	dc000017 	ldw	r16,0(sp)
   43598:	dec00304 	addi	sp,sp,12
   4359c:	f800283a 	ret
   435a0:	80c00017 	ldw	r3,0(r16)
   435a4:	183ff926 	beq	r3,zero,4358c <__alt_data_end+0xfffdc48c>
   435a8:	88c00015 	stw	r3,0(r17)
   435ac:	003ff706 	br	4358c <__alt_data_end+0xfffdc48c>

000435b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   435b0:	defffe04 	addi	sp,sp,-8
   435b4:	dfc00115 	stw	ra,4(sp)
   435b8:	df000015 	stw	fp,0(sp)
   435bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   435c0:	d0a00a17 	ldw	r2,-32728(gp)
   435c4:	10000326 	beq	r2,zero,435d4 <alt_get_errno+0x24>
   435c8:	d0a00a17 	ldw	r2,-32728(gp)
   435cc:	103ee83a 	callr	r2
   435d0:	00000106 	br	435d8 <alt_get_errno+0x28>
   435d4:	d0a6ae04 	addi	r2,gp,-25928
}
   435d8:	e037883a 	mov	sp,fp
   435dc:	dfc00117 	ldw	ra,4(sp)
   435e0:	df000017 	ldw	fp,0(sp)
   435e4:	dec00204 	addi	sp,sp,8
   435e8:	f800283a 	ret

000435ec <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   435ec:	defffb04 	addi	sp,sp,-20
   435f0:	dfc00415 	stw	ra,16(sp)
   435f4:	df000315 	stw	fp,12(sp)
   435f8:	df000304 	addi	fp,sp,12
   435fc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   43600:	e0bfff17 	ldw	r2,-4(fp)
   43604:	10000616 	blt	r2,zero,43620 <close+0x34>
   43608:	e0bfff17 	ldw	r2,-4(fp)
   4360c:	10c00324 	muli	r3,r2,12
   43610:	00800134 	movhi	r2,4
   43614:	109a1304 	addi	r2,r2,26700
   43618:	1885883a 	add	r2,r3,r2
   4361c:	00000106 	br	43624 <close+0x38>
   43620:	0005883a 	mov	r2,zero
   43624:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   43628:	e0bffd17 	ldw	r2,-12(fp)
   4362c:	10001926 	beq	r2,zero,43694 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   43630:	e0bffd17 	ldw	r2,-12(fp)
   43634:	10800017 	ldw	r2,0(r2)
   43638:	10800417 	ldw	r2,16(r2)
   4363c:	10000626 	beq	r2,zero,43658 <close+0x6c>
   43640:	e0bffd17 	ldw	r2,-12(fp)
   43644:	10800017 	ldw	r2,0(r2)
   43648:	10800417 	ldw	r2,16(r2)
   4364c:	e13ffd17 	ldw	r4,-12(fp)
   43650:	103ee83a 	callr	r2
   43654:	00000106 	br	4365c <close+0x70>
   43658:	0005883a 	mov	r2,zero
   4365c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   43660:	e13fff17 	ldw	r4,-4(fp)
   43664:	0043cac0 	call	43cac <alt_release_fd>
    if (rval < 0)
   43668:	e0bffe17 	ldw	r2,-8(fp)
   4366c:	1000070e 	bge	r2,zero,4368c <close+0xa0>
    {
      ALT_ERRNO = -rval;
   43670:	00435b00 	call	435b0 <alt_get_errno>
   43674:	1007883a 	mov	r3,r2
   43678:	e0bffe17 	ldw	r2,-8(fp)
   4367c:	0085c83a 	sub	r2,zero,r2
   43680:	18800015 	stw	r2,0(r3)
      return -1;
   43684:	00bfffc4 	movi	r2,-1
   43688:	00000706 	br	436a8 <close+0xbc>
    }
    return 0;
   4368c:	0005883a 	mov	r2,zero
   43690:	00000506 	br	436a8 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   43694:	00435b00 	call	435b0 <alt_get_errno>
   43698:	1007883a 	mov	r3,r2
   4369c:	00801444 	movi	r2,81
   436a0:	18800015 	stw	r2,0(r3)
    return -1;
   436a4:	00bfffc4 	movi	r2,-1
  }
}
   436a8:	e037883a 	mov	sp,fp
   436ac:	dfc00117 	ldw	ra,4(sp)
   436b0:	df000017 	ldw	fp,0(sp)
   436b4:	dec00204 	addi	sp,sp,8
   436b8:	f800283a 	ret

000436bc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   436bc:	defffc04 	addi	sp,sp,-16
   436c0:	df000315 	stw	fp,12(sp)
   436c4:	df000304 	addi	fp,sp,12
   436c8:	e13ffd15 	stw	r4,-12(fp)
   436cc:	e17ffe15 	stw	r5,-8(fp)
   436d0:	e1bfff15 	stw	r6,-4(fp)
  return len;
   436d4:	e0bfff17 	ldw	r2,-4(fp)
}
   436d8:	e037883a 	mov	sp,fp
   436dc:	df000017 	ldw	fp,0(sp)
   436e0:	dec00104 	addi	sp,sp,4
   436e4:	f800283a 	ret

000436e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   436e8:	defffe04 	addi	sp,sp,-8
   436ec:	dfc00115 	stw	ra,4(sp)
   436f0:	df000015 	stw	fp,0(sp)
   436f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   436f8:	d0a00a17 	ldw	r2,-32728(gp)
   436fc:	10000326 	beq	r2,zero,4370c <alt_get_errno+0x24>
   43700:	d0a00a17 	ldw	r2,-32728(gp)
   43704:	103ee83a 	callr	r2
   43708:	00000106 	br	43710 <alt_get_errno+0x28>
   4370c:	d0a6ae04 	addi	r2,gp,-25928
}
   43710:	e037883a 	mov	sp,fp
   43714:	dfc00117 	ldw	ra,4(sp)
   43718:	df000017 	ldw	fp,0(sp)
   4371c:	dec00204 	addi	sp,sp,8
   43720:	f800283a 	ret

00043724 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   43724:	defffb04 	addi	sp,sp,-20
   43728:	dfc00415 	stw	ra,16(sp)
   4372c:	df000315 	stw	fp,12(sp)
   43730:	df000304 	addi	fp,sp,12
   43734:	e13ffe15 	stw	r4,-8(fp)
   43738:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4373c:	e0bffe17 	ldw	r2,-8(fp)
   43740:	10000616 	blt	r2,zero,4375c <fstat+0x38>
   43744:	e0bffe17 	ldw	r2,-8(fp)
   43748:	10c00324 	muli	r3,r2,12
   4374c:	00800134 	movhi	r2,4
   43750:	109a1304 	addi	r2,r2,26700
   43754:	1885883a 	add	r2,r3,r2
   43758:	00000106 	br	43760 <fstat+0x3c>
   4375c:	0005883a 	mov	r2,zero
   43760:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   43764:	e0bffd17 	ldw	r2,-12(fp)
   43768:	10001026 	beq	r2,zero,437ac <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   4376c:	e0bffd17 	ldw	r2,-12(fp)
   43770:	10800017 	ldw	r2,0(r2)
   43774:	10800817 	ldw	r2,32(r2)
   43778:	10000726 	beq	r2,zero,43798 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   4377c:	e0bffd17 	ldw	r2,-12(fp)
   43780:	10800017 	ldw	r2,0(r2)
   43784:	10800817 	ldw	r2,32(r2)
   43788:	e17fff17 	ldw	r5,-4(fp)
   4378c:	e13ffd17 	ldw	r4,-12(fp)
   43790:	103ee83a 	callr	r2
   43794:	00000a06 	br	437c0 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   43798:	e0bfff17 	ldw	r2,-4(fp)
   4379c:	00c80004 	movi	r3,8192
   437a0:	10c00115 	stw	r3,4(r2)
      return 0;
   437a4:	0005883a 	mov	r2,zero
   437a8:	00000506 	br	437c0 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   437ac:	00436e80 	call	436e8 <alt_get_errno>
   437b0:	1007883a 	mov	r3,r2
   437b4:	00801444 	movi	r2,81
   437b8:	18800015 	stw	r2,0(r3)
    return -1;
   437bc:	00bfffc4 	movi	r2,-1
  }
}
   437c0:	e037883a 	mov	sp,fp
   437c4:	dfc00117 	ldw	ra,4(sp)
   437c8:	df000017 	ldw	fp,0(sp)
   437cc:	dec00204 	addi	sp,sp,8
   437d0:	f800283a 	ret

000437d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   437d4:	defffe04 	addi	sp,sp,-8
   437d8:	dfc00115 	stw	ra,4(sp)
   437dc:	df000015 	stw	fp,0(sp)
   437e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   437e4:	d0a00a17 	ldw	r2,-32728(gp)
   437e8:	10000326 	beq	r2,zero,437f8 <alt_get_errno+0x24>
   437ec:	d0a00a17 	ldw	r2,-32728(gp)
   437f0:	103ee83a 	callr	r2
   437f4:	00000106 	br	437fc <alt_get_errno+0x28>
   437f8:	d0a6ae04 	addi	r2,gp,-25928
}
   437fc:	e037883a 	mov	sp,fp
   43800:	dfc00117 	ldw	ra,4(sp)
   43804:	df000017 	ldw	fp,0(sp)
   43808:	dec00204 	addi	sp,sp,8
   4380c:	f800283a 	ret

00043810 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   43810:	deffed04 	addi	sp,sp,-76
   43814:	dfc01215 	stw	ra,72(sp)
   43818:	df001115 	stw	fp,68(sp)
   4381c:	df001104 	addi	fp,sp,68
   43820:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43824:	e0bfff17 	ldw	r2,-4(fp)
   43828:	10000616 	blt	r2,zero,43844 <isatty+0x34>
   4382c:	e0bfff17 	ldw	r2,-4(fp)
   43830:	10c00324 	muli	r3,r2,12
   43834:	00800134 	movhi	r2,4
   43838:	109a1304 	addi	r2,r2,26700
   4383c:	1885883a 	add	r2,r3,r2
   43840:	00000106 	br	43848 <isatty+0x38>
   43844:	0005883a 	mov	r2,zero
   43848:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   4384c:	e0bfef17 	ldw	r2,-68(fp)
   43850:	10000e26 	beq	r2,zero,4388c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   43854:	e0bfef17 	ldw	r2,-68(fp)
   43858:	10800017 	ldw	r2,0(r2)
   4385c:	10800817 	ldw	r2,32(r2)
   43860:	1000021e 	bne	r2,zero,4386c <isatty+0x5c>
    {
      return 1;
   43864:	00800044 	movi	r2,1
   43868:	00000d06 	br	438a0 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   4386c:	e0bff004 	addi	r2,fp,-64
   43870:	100b883a 	mov	r5,r2
   43874:	e13fff17 	ldw	r4,-4(fp)
   43878:	00437240 	call	43724 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   4387c:	e0bff117 	ldw	r2,-60(fp)
   43880:	10880020 	cmpeqi	r2,r2,8192
   43884:	10803fcc 	andi	r2,r2,255
   43888:	00000506 	br	438a0 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4388c:	00437d40 	call	437d4 <alt_get_errno>
   43890:	1007883a 	mov	r3,r2
   43894:	00801444 	movi	r2,81
   43898:	18800015 	stw	r2,0(r3)
    return 0;
   4389c:	0005883a 	mov	r2,zero
  }
}
   438a0:	e037883a 	mov	sp,fp
   438a4:	dfc00117 	ldw	ra,4(sp)
   438a8:	df000017 	ldw	fp,0(sp)
   438ac:	dec00204 	addi	sp,sp,8
   438b0:	f800283a 	ret

000438b4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   438b4:	defffc04 	addi	sp,sp,-16
   438b8:	df000315 	stw	fp,12(sp)
   438bc:	df000304 	addi	fp,sp,12
   438c0:	e13ffd15 	stw	r4,-12(fp)
   438c4:	e17ffe15 	stw	r5,-8(fp)
   438c8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   438cc:	e0fffe17 	ldw	r3,-8(fp)
   438d0:	e0bffd17 	ldw	r2,-12(fp)
   438d4:	18800c26 	beq	r3,r2,43908 <alt_load_section+0x54>
  {
    while( to != end )
   438d8:	00000806 	br	438fc <alt_load_section+0x48>
    {
      *to++ = *from++;
   438dc:	e0bffe17 	ldw	r2,-8(fp)
   438e0:	10c00104 	addi	r3,r2,4
   438e4:	e0fffe15 	stw	r3,-8(fp)
   438e8:	e0fffd17 	ldw	r3,-12(fp)
   438ec:	19000104 	addi	r4,r3,4
   438f0:	e13ffd15 	stw	r4,-12(fp)
   438f4:	18c00017 	ldw	r3,0(r3)
   438f8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   438fc:	e0fffe17 	ldw	r3,-8(fp)
   43900:	e0bfff17 	ldw	r2,-4(fp)
   43904:	18bff51e 	bne	r3,r2,438dc <__alt_data_end+0xfffdc7dc>
    {
      *to++ = *from++;
    }
  }
}
   43908:	0001883a 	nop
   4390c:	e037883a 	mov	sp,fp
   43910:	df000017 	ldw	fp,0(sp)
   43914:	dec00104 	addi	sp,sp,4
   43918:	f800283a 	ret

0004391c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   4391c:	defffe04 	addi	sp,sp,-8
   43920:	dfc00115 	stw	ra,4(sp)
   43924:	df000015 	stw	fp,0(sp)
   43928:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   4392c:	01800134 	movhi	r6,4
   43930:	319e9a04 	addi	r6,r6,31336
   43934:	01400134 	movhi	r5,4
   43938:	2957fe04 	addi	r5,r5,24568
   4393c:	01000134 	movhi	r4,4
   43940:	211e9a04 	addi	r4,r4,31336
   43944:	00438b40 	call	438b4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   43948:	01800134 	movhi	r6,4
   4394c:	31809104 	addi	r6,r6,580
   43950:	01400134 	movhi	r5,4
   43954:	29400804 	addi	r5,r5,32
   43958:	01000134 	movhi	r4,4
   4395c:	21000804 	addi	r4,r4,32
   43960:	00438b40 	call	438b4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   43964:	01800134 	movhi	r6,4
   43968:	3197fe04 	addi	r6,r6,24568
   4396c:	01400134 	movhi	r5,4
   43970:	2957ba04 	addi	r5,r5,24296
   43974:	01000134 	movhi	r4,4
   43978:	2117ba04 	addi	r4,r4,24296
   4397c:	00438b40 	call	438b4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   43980:	0044dd40 	call	44dd4 <alt_dcache_flush_all>
  alt_icache_flush_all();
   43984:	0044fbc0 	call	44fbc <alt_icache_flush_all>
}
   43988:	0001883a 	nop
   4398c:	e037883a 	mov	sp,fp
   43990:	dfc00117 	ldw	ra,4(sp)
   43994:	df000017 	ldw	fp,0(sp)
   43998:	dec00204 	addi	sp,sp,8
   4399c:	f800283a 	ret

000439a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   439a0:	defffe04 	addi	sp,sp,-8
   439a4:	dfc00115 	stw	ra,4(sp)
   439a8:	df000015 	stw	fp,0(sp)
   439ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   439b0:	d0a00a17 	ldw	r2,-32728(gp)
   439b4:	10000326 	beq	r2,zero,439c4 <alt_get_errno+0x24>
   439b8:	d0a00a17 	ldw	r2,-32728(gp)
   439bc:	103ee83a 	callr	r2
   439c0:	00000106 	br	439c8 <alt_get_errno+0x28>
   439c4:	d0a6ae04 	addi	r2,gp,-25928
}
   439c8:	e037883a 	mov	sp,fp
   439cc:	dfc00117 	ldw	ra,4(sp)
   439d0:	df000017 	ldw	fp,0(sp)
   439d4:	dec00204 	addi	sp,sp,8
   439d8:	f800283a 	ret

000439dc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   439dc:	defff904 	addi	sp,sp,-28
   439e0:	dfc00615 	stw	ra,24(sp)
   439e4:	df000515 	stw	fp,20(sp)
   439e8:	df000504 	addi	fp,sp,20
   439ec:	e13ffd15 	stw	r4,-12(fp)
   439f0:	e17ffe15 	stw	r5,-8(fp)
   439f4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   439f8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   439fc:	e0bffd17 	ldw	r2,-12(fp)
   43a00:	10000616 	blt	r2,zero,43a1c <lseek+0x40>
   43a04:	e0bffd17 	ldw	r2,-12(fp)
   43a08:	10c00324 	muli	r3,r2,12
   43a0c:	00800134 	movhi	r2,4
   43a10:	109a1304 	addi	r2,r2,26700
   43a14:	1885883a 	add	r2,r3,r2
   43a18:	00000106 	br	43a20 <lseek+0x44>
   43a1c:	0005883a 	mov	r2,zero
   43a20:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   43a24:	e0bffc17 	ldw	r2,-16(fp)
   43a28:	10001026 	beq	r2,zero,43a6c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   43a2c:	e0bffc17 	ldw	r2,-16(fp)
   43a30:	10800017 	ldw	r2,0(r2)
   43a34:	10800717 	ldw	r2,28(r2)
   43a38:	10000926 	beq	r2,zero,43a60 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   43a3c:	e0bffc17 	ldw	r2,-16(fp)
   43a40:	10800017 	ldw	r2,0(r2)
   43a44:	10800717 	ldw	r2,28(r2)
   43a48:	e1bfff17 	ldw	r6,-4(fp)
   43a4c:	e17ffe17 	ldw	r5,-8(fp)
   43a50:	e13ffc17 	ldw	r4,-16(fp)
   43a54:	103ee83a 	callr	r2
   43a58:	e0bffb15 	stw	r2,-20(fp)
   43a5c:	00000506 	br	43a74 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   43a60:	00bfde84 	movi	r2,-134
   43a64:	e0bffb15 	stw	r2,-20(fp)
   43a68:	00000206 	br	43a74 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   43a6c:	00bfebc4 	movi	r2,-81
   43a70:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   43a74:	e0bffb17 	ldw	r2,-20(fp)
   43a78:	1000070e 	bge	r2,zero,43a98 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   43a7c:	00439a00 	call	439a0 <alt_get_errno>
   43a80:	1007883a 	mov	r3,r2
   43a84:	e0bffb17 	ldw	r2,-20(fp)
   43a88:	0085c83a 	sub	r2,zero,r2
   43a8c:	18800015 	stw	r2,0(r3)
    rc = -1;
   43a90:	00bfffc4 	movi	r2,-1
   43a94:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   43a98:	e0bffb17 	ldw	r2,-20(fp)
}
   43a9c:	e037883a 	mov	sp,fp
   43aa0:	dfc00117 	ldw	ra,4(sp)
   43aa4:	df000017 	ldw	fp,0(sp)
   43aa8:	dec00204 	addi	sp,sp,8
   43aac:	f800283a 	ret

00043ab0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   43ab0:	defffd04 	addi	sp,sp,-12
   43ab4:	dfc00215 	stw	ra,8(sp)
   43ab8:	df000115 	stw	fp,4(sp)
   43abc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   43ac0:	0009883a 	mov	r4,zero
   43ac4:	0043f580 	call	43f58 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   43ac8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   43acc:	0043f900 	call	43f90 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   43ad0:	01800134 	movhi	r6,4
   43ad4:	3197f604 	addi	r6,r6,24536
   43ad8:	01400134 	movhi	r5,4
   43adc:	2957f604 	addi	r5,r5,24536
   43ae0:	01000134 	movhi	r4,4
   43ae4:	2117f604 	addi	r4,r4,24536
   43ae8:	00453540 	call	45354 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   43aec:	0044efc0 	call	44efc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   43af0:	01000134 	movhi	r4,4
   43af4:	2113d704 	addi	r4,r4,20316
   43af8:	0045b540 	call	45b54 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   43afc:	d0a6af17 	ldw	r2,-25924(gp)
   43b00:	d0e6b017 	ldw	r3,-25920(gp)
   43b04:	d126b117 	ldw	r4,-25916(gp)
   43b08:	200d883a 	mov	r6,r4
   43b0c:	180b883a 	mov	r5,r3
   43b10:	1009883a 	mov	r4,r2
   43b14:	00403100 	call	40310 <main>
   43b18:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   43b1c:	01000044 	movi	r4,1
   43b20:	00435ec0 	call	435ec <close>
  exit (result);
   43b24:	e13fff17 	ldw	r4,-4(fp)
   43b28:	0045b680 	call	45b68 <exit>

00043b2c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   43b2c:	defffe04 	addi	sp,sp,-8
   43b30:	df000115 	stw	fp,4(sp)
   43b34:	df000104 	addi	fp,sp,4
   43b38:	e13fff15 	stw	r4,-4(fp)
}
   43b3c:	0001883a 	nop
   43b40:	e037883a 	mov	sp,fp
   43b44:	df000017 	ldw	fp,0(sp)
   43b48:	dec00104 	addi	sp,sp,4
   43b4c:	f800283a 	ret

00043b50 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   43b50:	defffe04 	addi	sp,sp,-8
   43b54:	df000115 	stw	fp,4(sp)
   43b58:	df000104 	addi	fp,sp,4
   43b5c:	e13fff15 	stw	r4,-4(fp)
}
   43b60:	0001883a 	nop
   43b64:	e037883a 	mov	sp,fp
   43b68:	df000017 	ldw	fp,0(sp)
   43b6c:	dec00104 	addi	sp,sp,4
   43b70:	f800283a 	ret

00043b74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43b74:	defffe04 	addi	sp,sp,-8
   43b78:	dfc00115 	stw	ra,4(sp)
   43b7c:	df000015 	stw	fp,0(sp)
   43b80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43b84:	d0a00a17 	ldw	r2,-32728(gp)
   43b88:	10000326 	beq	r2,zero,43b98 <alt_get_errno+0x24>
   43b8c:	d0a00a17 	ldw	r2,-32728(gp)
   43b90:	103ee83a 	callr	r2
   43b94:	00000106 	br	43b9c <alt_get_errno+0x28>
   43b98:	d0a6ae04 	addi	r2,gp,-25928
}
   43b9c:	e037883a 	mov	sp,fp
   43ba0:	dfc00117 	ldw	ra,4(sp)
   43ba4:	df000017 	ldw	fp,0(sp)
   43ba8:	dec00204 	addi	sp,sp,8
   43bac:	f800283a 	ret

00043bb0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   43bb0:	defff904 	addi	sp,sp,-28
   43bb4:	dfc00615 	stw	ra,24(sp)
   43bb8:	df000515 	stw	fp,20(sp)
   43bbc:	df000504 	addi	fp,sp,20
   43bc0:	e13ffd15 	stw	r4,-12(fp)
   43bc4:	e17ffe15 	stw	r5,-8(fp)
   43bc8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43bcc:	e0bffd17 	ldw	r2,-12(fp)
   43bd0:	10000616 	blt	r2,zero,43bec <read+0x3c>
   43bd4:	e0bffd17 	ldw	r2,-12(fp)
   43bd8:	10c00324 	muli	r3,r2,12
   43bdc:	00800134 	movhi	r2,4
   43be0:	109a1304 	addi	r2,r2,26700
   43be4:	1885883a 	add	r2,r3,r2
   43be8:	00000106 	br	43bf0 <read+0x40>
   43bec:	0005883a 	mov	r2,zero
   43bf0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   43bf4:	e0bffb17 	ldw	r2,-20(fp)
   43bf8:	10002226 	beq	r2,zero,43c84 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   43bfc:	e0bffb17 	ldw	r2,-20(fp)
   43c00:	10800217 	ldw	r2,8(r2)
   43c04:	108000cc 	andi	r2,r2,3
   43c08:	10800060 	cmpeqi	r2,r2,1
   43c0c:	1000181e 	bne	r2,zero,43c70 <read+0xc0>
        (fd->dev->read))
   43c10:	e0bffb17 	ldw	r2,-20(fp)
   43c14:	10800017 	ldw	r2,0(r2)
   43c18:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   43c1c:	10001426 	beq	r2,zero,43c70 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   43c20:	e0bffb17 	ldw	r2,-20(fp)
   43c24:	10800017 	ldw	r2,0(r2)
   43c28:	10800517 	ldw	r2,20(r2)
   43c2c:	e0ffff17 	ldw	r3,-4(fp)
   43c30:	180d883a 	mov	r6,r3
   43c34:	e17ffe17 	ldw	r5,-8(fp)
   43c38:	e13ffb17 	ldw	r4,-20(fp)
   43c3c:	103ee83a 	callr	r2
   43c40:	e0bffc15 	stw	r2,-16(fp)
   43c44:	e0bffc17 	ldw	r2,-16(fp)
   43c48:	1000070e 	bge	r2,zero,43c68 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   43c4c:	0043b740 	call	43b74 <alt_get_errno>
   43c50:	1007883a 	mov	r3,r2
   43c54:	e0bffc17 	ldw	r2,-16(fp)
   43c58:	0085c83a 	sub	r2,zero,r2
   43c5c:	18800015 	stw	r2,0(r3)
          return -1;
   43c60:	00bfffc4 	movi	r2,-1
   43c64:	00000c06 	br	43c98 <read+0xe8>
        }
        return rval;
   43c68:	e0bffc17 	ldw	r2,-16(fp)
   43c6c:	00000a06 	br	43c98 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   43c70:	0043b740 	call	43b74 <alt_get_errno>
   43c74:	1007883a 	mov	r3,r2
   43c78:	00800344 	movi	r2,13
   43c7c:	18800015 	stw	r2,0(r3)
   43c80:	00000406 	br	43c94 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   43c84:	0043b740 	call	43b74 <alt_get_errno>
   43c88:	1007883a 	mov	r3,r2
   43c8c:	00801444 	movi	r2,81
   43c90:	18800015 	stw	r2,0(r3)
  }
  return -1;
   43c94:	00bfffc4 	movi	r2,-1
}
   43c98:	e037883a 	mov	sp,fp
   43c9c:	dfc00117 	ldw	ra,4(sp)
   43ca0:	df000017 	ldw	fp,0(sp)
   43ca4:	dec00204 	addi	sp,sp,8
   43ca8:	f800283a 	ret

00043cac <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   43cac:	defffe04 	addi	sp,sp,-8
   43cb0:	df000115 	stw	fp,4(sp)
   43cb4:	df000104 	addi	fp,sp,4
   43cb8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   43cbc:	e0bfff17 	ldw	r2,-4(fp)
   43cc0:	108000d0 	cmplti	r2,r2,3
   43cc4:	10000d1e 	bne	r2,zero,43cfc <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   43cc8:	00800134 	movhi	r2,4
   43ccc:	109a1304 	addi	r2,r2,26700
   43cd0:	e0ffff17 	ldw	r3,-4(fp)
   43cd4:	18c00324 	muli	r3,r3,12
   43cd8:	10c5883a 	add	r2,r2,r3
   43cdc:	10800204 	addi	r2,r2,8
   43ce0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   43ce4:	00800134 	movhi	r2,4
   43ce8:	109a1304 	addi	r2,r2,26700
   43cec:	e0ffff17 	ldw	r3,-4(fp)
   43cf0:	18c00324 	muli	r3,r3,12
   43cf4:	10c5883a 	add	r2,r2,r3
   43cf8:	10000015 	stw	zero,0(r2)
  }
}
   43cfc:	0001883a 	nop
   43d00:	e037883a 	mov	sp,fp
   43d04:	df000017 	ldw	fp,0(sp)
   43d08:	dec00104 	addi	sp,sp,4
   43d0c:	f800283a 	ret

00043d10 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   43d10:	defff904 	addi	sp,sp,-28
   43d14:	df000615 	stw	fp,24(sp)
   43d18:	df000604 	addi	fp,sp,24
   43d1c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   43d20:	0005303a 	rdctl	r2,status
   43d24:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   43d28:	e0fffe17 	ldw	r3,-8(fp)
   43d2c:	00bfff84 	movi	r2,-2
   43d30:	1884703a 	and	r2,r3,r2
   43d34:	1001703a 	wrctl	status,r2
  
  return context;
   43d38:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   43d3c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   43d40:	d0a00b17 	ldw	r2,-32724(gp)
   43d44:	10c000c4 	addi	r3,r2,3
   43d48:	00bfff04 	movi	r2,-4
   43d4c:	1884703a 	and	r2,r3,r2
   43d50:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   43d54:	d0e00b17 	ldw	r3,-32724(gp)
   43d58:	e0bfff17 	ldw	r2,-4(fp)
   43d5c:	1887883a 	add	r3,r3,r2
   43d60:	008001b4 	movhi	r2,6
   43d64:	109c4004 	addi	r2,r2,28928
   43d68:	10c0062e 	bgeu	r2,r3,43d84 <sbrk+0x74>
   43d6c:	e0bffb17 	ldw	r2,-20(fp)
   43d70:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   43d74:	e0bffa17 	ldw	r2,-24(fp)
   43d78:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   43d7c:	00bfffc4 	movi	r2,-1
   43d80:	00000b06 	br	43db0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   43d84:	d0a00b17 	ldw	r2,-32724(gp)
   43d88:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   43d8c:	d0e00b17 	ldw	r3,-32724(gp)
   43d90:	e0bfff17 	ldw	r2,-4(fp)
   43d94:	1885883a 	add	r2,r3,r2
   43d98:	d0a00b15 	stw	r2,-32724(gp)
   43d9c:	e0bffb17 	ldw	r2,-20(fp)
   43da0:	e0bffc15 	stw	r2,-16(fp)
   43da4:	e0bffc17 	ldw	r2,-16(fp)
   43da8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   43dac:	e0bffd17 	ldw	r2,-12(fp)
} 
   43db0:	e037883a 	mov	sp,fp
   43db4:	df000017 	ldw	fp,0(sp)
   43db8:	dec00104 	addi	sp,sp,4
   43dbc:	f800283a 	ret

00043dc0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   43dc0:	defffd04 	addi	sp,sp,-12
   43dc4:	dfc00215 	stw	ra,8(sp)
   43dc8:	df000115 	stw	fp,4(sp)
   43dcc:	df000104 	addi	fp,sp,4
   43dd0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   43dd4:	e13fff17 	ldw	r4,-4(fp)
   43dd8:	0044c7c0 	call	44c7c <alt_busy_sleep>
}
   43ddc:	e037883a 	mov	sp,fp
   43de0:	dfc00117 	ldw	ra,4(sp)
   43de4:	df000017 	ldw	fp,0(sp)
   43de8:	dec00204 	addi	sp,sp,8
   43dec:	f800283a 	ret

00043df0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43df0:	defffe04 	addi	sp,sp,-8
   43df4:	dfc00115 	stw	ra,4(sp)
   43df8:	df000015 	stw	fp,0(sp)
   43dfc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43e00:	d0a00a17 	ldw	r2,-32728(gp)
   43e04:	10000326 	beq	r2,zero,43e14 <alt_get_errno+0x24>
   43e08:	d0a00a17 	ldw	r2,-32728(gp)
   43e0c:	103ee83a 	callr	r2
   43e10:	00000106 	br	43e18 <alt_get_errno+0x28>
   43e14:	d0a6ae04 	addi	r2,gp,-25928
}
   43e18:	e037883a 	mov	sp,fp
   43e1c:	dfc00117 	ldw	ra,4(sp)
   43e20:	df000017 	ldw	fp,0(sp)
   43e24:	dec00204 	addi	sp,sp,8
   43e28:	f800283a 	ret

00043e2c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   43e2c:	defff904 	addi	sp,sp,-28
   43e30:	dfc00615 	stw	ra,24(sp)
   43e34:	df000515 	stw	fp,20(sp)
   43e38:	df000504 	addi	fp,sp,20
   43e3c:	e13ffd15 	stw	r4,-12(fp)
   43e40:	e17ffe15 	stw	r5,-8(fp)
   43e44:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43e48:	e0bffd17 	ldw	r2,-12(fp)
   43e4c:	10000616 	blt	r2,zero,43e68 <write+0x3c>
   43e50:	e0bffd17 	ldw	r2,-12(fp)
   43e54:	10c00324 	muli	r3,r2,12
   43e58:	00800134 	movhi	r2,4
   43e5c:	109a1304 	addi	r2,r2,26700
   43e60:	1885883a 	add	r2,r3,r2
   43e64:	00000106 	br	43e6c <write+0x40>
   43e68:	0005883a 	mov	r2,zero
   43e6c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   43e70:	e0bffb17 	ldw	r2,-20(fp)
   43e74:	10002126 	beq	r2,zero,43efc <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   43e78:	e0bffb17 	ldw	r2,-20(fp)
   43e7c:	10800217 	ldw	r2,8(r2)
   43e80:	108000cc 	andi	r2,r2,3
   43e84:	10001826 	beq	r2,zero,43ee8 <write+0xbc>
   43e88:	e0bffb17 	ldw	r2,-20(fp)
   43e8c:	10800017 	ldw	r2,0(r2)
   43e90:	10800617 	ldw	r2,24(r2)
   43e94:	10001426 	beq	r2,zero,43ee8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   43e98:	e0bffb17 	ldw	r2,-20(fp)
   43e9c:	10800017 	ldw	r2,0(r2)
   43ea0:	10800617 	ldw	r2,24(r2)
   43ea4:	e0ffff17 	ldw	r3,-4(fp)
   43ea8:	180d883a 	mov	r6,r3
   43eac:	e17ffe17 	ldw	r5,-8(fp)
   43eb0:	e13ffb17 	ldw	r4,-20(fp)
   43eb4:	103ee83a 	callr	r2
   43eb8:	e0bffc15 	stw	r2,-16(fp)
   43ebc:	e0bffc17 	ldw	r2,-16(fp)
   43ec0:	1000070e 	bge	r2,zero,43ee0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   43ec4:	0043df00 	call	43df0 <alt_get_errno>
   43ec8:	1007883a 	mov	r3,r2
   43ecc:	e0bffc17 	ldw	r2,-16(fp)
   43ed0:	0085c83a 	sub	r2,zero,r2
   43ed4:	18800015 	stw	r2,0(r3)
        return -1;
   43ed8:	00bfffc4 	movi	r2,-1
   43edc:	00000c06 	br	43f10 <write+0xe4>
      }
      return rval;
   43ee0:	e0bffc17 	ldw	r2,-16(fp)
   43ee4:	00000a06 	br	43f10 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   43ee8:	0043df00 	call	43df0 <alt_get_errno>
   43eec:	1007883a 	mov	r3,r2
   43ef0:	00800344 	movi	r2,13
   43ef4:	18800015 	stw	r2,0(r3)
   43ef8:	00000406 	br	43f0c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   43efc:	0043df00 	call	43df0 <alt_get_errno>
   43f00:	1007883a 	mov	r3,r2
   43f04:	00801444 	movi	r2,81
   43f08:	18800015 	stw	r2,0(r3)
  }
  return -1;
   43f0c:	00bfffc4 	movi	r2,-1
}
   43f10:	e037883a 	mov	sp,fp
   43f14:	dfc00117 	ldw	ra,4(sp)
   43f18:	df000017 	ldw	fp,0(sp)
   43f1c:	dec00204 	addi	sp,sp,8
   43f20:	f800283a 	ret

00043f24 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   43f24:	defffd04 	addi	sp,sp,-12
   43f28:	dfc00215 	stw	ra,8(sp)
   43f2c:	df000115 	stw	fp,4(sp)
   43f30:	df000104 	addi	fp,sp,4
   43f34:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   43f38:	d1600704 	addi	r5,gp,-32740
   43f3c:	e13fff17 	ldw	r4,-4(fp)
   43f40:	0044e580 	call	44e58 <alt_dev_llist_insert>
}
   43f44:	e037883a 	mov	sp,fp
   43f48:	dfc00117 	ldw	ra,4(sp)
   43f4c:	df000017 	ldw	fp,0(sp)
   43f50:	dec00204 	addi	sp,sp,8
   43f54:	f800283a 	ret

00043f58 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   43f58:	defffd04 	addi	sp,sp,-12
   43f5c:	dfc00215 	stw	ra,8(sp)
   43f60:	df000115 	stw	fp,4(sp)
   43f64:	df000104 	addi	fp,sp,4
   43f68:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
   43f6c:	00457c80 	call	457c8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   43f70:	00800044 	movi	r2,1
   43f74:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   43f78:	0001883a 	nop
   43f7c:	e037883a 	mov	sp,fp
   43f80:	dfc00117 	ldw	ra,4(sp)
   43f84:	df000017 	ldw	fp,0(sp)
   43f88:	dec00204 	addi	sp,sp,8
   43f8c:	f800283a 	ret

00043f90 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   43f90:	defffe04 	addi	sp,sp,-8
   43f94:	dfc00115 	stw	ra,4(sp)
   43f98:	df000015 	stw	fp,0(sp)
   43f9c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, interval_timer);
   43fa0:	01c0fa04 	movi	r7,1000
   43fa4:	01800084 	movi	r6,2
   43fa8:	000b883a 	mov	r5,zero
   43fac:	01000234 	movhi	r4,8
   43fb0:	21041004 	addi	r4,r4,4160
   43fb4:	0044ad40 	call	44ad4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   43fb8:	000d883a 	mov	r6,zero
   43fbc:	000b883a 	mov	r5,zero
   43fc0:	01000134 	movhi	r4,4
   43fc4:	211a7d04 	addi	r4,r4,27124
   43fc8:	00441580 	call	44158 <altera_avalon_jtag_uart_init>
   43fcc:	01000134 	movhi	r4,4
   43fd0:	211a7304 	addi	r4,r4,27084
   43fd4:	0043f240 	call	43f24 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
   43fd8:	0001883a 	nop
}
   43fdc:	0001883a 	nop
   43fe0:	e037883a 	mov	sp,fp
   43fe4:	dfc00117 	ldw	ra,4(sp)
   43fe8:	df000017 	ldw	fp,0(sp)
   43fec:	dec00204 	addi	sp,sp,8
   43ff0:	f800283a 	ret

00043ff4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   43ff4:	defffa04 	addi	sp,sp,-24
   43ff8:	dfc00515 	stw	ra,20(sp)
   43ffc:	df000415 	stw	fp,16(sp)
   44000:	df000404 	addi	fp,sp,16
   44004:	e13ffd15 	stw	r4,-12(fp)
   44008:	e17ffe15 	stw	r5,-8(fp)
   4400c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   44010:	e0bffd17 	ldw	r2,-12(fp)
   44014:	10800017 	ldw	r2,0(r2)
   44018:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   4401c:	e0bffc17 	ldw	r2,-16(fp)
   44020:	10c00a04 	addi	r3,r2,40
   44024:	e0bffd17 	ldw	r2,-12(fp)
   44028:	10800217 	ldw	r2,8(r2)
   4402c:	100f883a 	mov	r7,r2
   44030:	e1bfff17 	ldw	r6,-4(fp)
   44034:	e17ffe17 	ldw	r5,-8(fp)
   44038:	1809883a 	mov	r4,r3
   4403c:	004461c0 	call	4461c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   44040:	e037883a 	mov	sp,fp
   44044:	dfc00117 	ldw	ra,4(sp)
   44048:	df000017 	ldw	fp,0(sp)
   4404c:	dec00204 	addi	sp,sp,8
   44050:	f800283a 	ret

00044054 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   44054:	defffa04 	addi	sp,sp,-24
   44058:	dfc00515 	stw	ra,20(sp)
   4405c:	df000415 	stw	fp,16(sp)
   44060:	df000404 	addi	fp,sp,16
   44064:	e13ffd15 	stw	r4,-12(fp)
   44068:	e17ffe15 	stw	r5,-8(fp)
   4406c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   44070:	e0bffd17 	ldw	r2,-12(fp)
   44074:	10800017 	ldw	r2,0(r2)
   44078:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   4407c:	e0bffc17 	ldw	r2,-16(fp)
   44080:	10c00a04 	addi	r3,r2,40
   44084:	e0bffd17 	ldw	r2,-12(fp)
   44088:	10800217 	ldw	r2,8(r2)
   4408c:	100f883a 	mov	r7,r2
   44090:	e1bfff17 	ldw	r6,-4(fp)
   44094:	e17ffe17 	ldw	r5,-8(fp)
   44098:	1809883a 	mov	r4,r3
   4409c:	00448380 	call	44838 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   440a0:	e037883a 	mov	sp,fp
   440a4:	dfc00117 	ldw	ra,4(sp)
   440a8:	df000017 	ldw	fp,0(sp)
   440ac:	dec00204 	addi	sp,sp,8
   440b0:	f800283a 	ret

000440b4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   440b4:	defffc04 	addi	sp,sp,-16
   440b8:	dfc00315 	stw	ra,12(sp)
   440bc:	df000215 	stw	fp,8(sp)
   440c0:	df000204 	addi	fp,sp,8
   440c4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   440c8:	e0bfff17 	ldw	r2,-4(fp)
   440cc:	10800017 	ldw	r2,0(r2)
   440d0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   440d4:	e0bffe17 	ldw	r2,-8(fp)
   440d8:	10c00a04 	addi	r3,r2,40
   440dc:	e0bfff17 	ldw	r2,-4(fp)
   440e0:	10800217 	ldw	r2,8(r2)
   440e4:	100b883a 	mov	r5,r2
   440e8:	1809883a 	mov	r4,r3
   440ec:	00444c40 	call	444c4 <altera_avalon_jtag_uart_close>
}
   440f0:	e037883a 	mov	sp,fp
   440f4:	dfc00117 	ldw	ra,4(sp)
   440f8:	df000017 	ldw	fp,0(sp)
   440fc:	dec00204 	addi	sp,sp,8
   44100:	f800283a 	ret

00044104 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   44104:	defffa04 	addi	sp,sp,-24
   44108:	dfc00515 	stw	ra,20(sp)
   4410c:	df000415 	stw	fp,16(sp)
   44110:	df000404 	addi	fp,sp,16
   44114:	e13ffd15 	stw	r4,-12(fp)
   44118:	e17ffe15 	stw	r5,-8(fp)
   4411c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   44120:	e0bffd17 	ldw	r2,-12(fp)
   44124:	10800017 	ldw	r2,0(r2)
   44128:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   4412c:	e0bffc17 	ldw	r2,-16(fp)
   44130:	10800a04 	addi	r2,r2,40
   44134:	e1bfff17 	ldw	r6,-4(fp)
   44138:	e17ffe17 	ldw	r5,-8(fp)
   4413c:	1009883a 	mov	r4,r2
   44140:	004452c0 	call	4452c <altera_avalon_jtag_uart_ioctl>
}
   44144:	e037883a 	mov	sp,fp
   44148:	dfc00117 	ldw	ra,4(sp)
   4414c:	df000017 	ldw	fp,0(sp)
   44150:	dec00204 	addi	sp,sp,8
   44154:	f800283a 	ret

00044158 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   44158:	defffa04 	addi	sp,sp,-24
   4415c:	dfc00515 	stw	ra,20(sp)
   44160:	df000415 	stw	fp,16(sp)
   44164:	df000404 	addi	fp,sp,16
   44168:	e13ffd15 	stw	r4,-12(fp)
   4416c:	e17ffe15 	stw	r5,-8(fp)
   44170:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   44174:	e0bffd17 	ldw	r2,-12(fp)
   44178:	00c00044 	movi	r3,1
   4417c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   44180:	e0bffd17 	ldw	r2,-12(fp)
   44184:	10800017 	ldw	r2,0(r2)
   44188:	10800104 	addi	r2,r2,4
   4418c:	1007883a 	mov	r3,r2
   44190:	e0bffd17 	ldw	r2,-12(fp)
   44194:	10800817 	ldw	r2,32(r2)
   44198:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   4419c:	e0bffe17 	ldw	r2,-8(fp)
   441a0:	e0ffff17 	ldw	r3,-4(fp)
   441a4:	d8000015 	stw	zero,0(sp)
   441a8:	e1fffd17 	ldw	r7,-12(fp)
   441ac:	01800134 	movhi	r6,4
   441b0:	31908604 	addi	r6,r6,16920
   441b4:	180b883a 	mov	r5,r3
   441b8:	1009883a 	mov	r4,r2
   441bc:	0044ff00 	call	44ff0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   441c0:	e0bffd17 	ldw	r2,-12(fp)
   441c4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   441c8:	e0bffd17 	ldw	r2,-12(fp)
   441cc:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   441d0:	d0e6b317 	ldw	r3,-25908(gp)
   441d4:	e1fffd17 	ldw	r7,-12(fp)
   441d8:	01800134 	movhi	r6,4
   441dc:	31910904 	addi	r6,r6,17444
   441e0:	180b883a 	mov	r5,r3
   441e4:	1009883a 	mov	r4,r2
   441e8:	0044b500 	call	44b50 <alt_alarm_start>
   441ec:	1000040e 	bge	r2,zero,44200 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   441f0:	e0fffd17 	ldw	r3,-12(fp)
   441f4:	00a00034 	movhi	r2,32768
   441f8:	10bfffc4 	addi	r2,r2,-1
   441fc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   44200:	0001883a 	nop
   44204:	e037883a 	mov	sp,fp
   44208:	dfc00117 	ldw	ra,4(sp)
   4420c:	df000017 	ldw	fp,0(sp)
   44210:	dec00204 	addi	sp,sp,8
   44214:	f800283a 	ret

00044218 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   44218:	defff804 	addi	sp,sp,-32
   4421c:	df000715 	stw	fp,28(sp)
   44220:	df000704 	addi	fp,sp,28
   44224:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   44228:	e0bfff17 	ldw	r2,-4(fp)
   4422c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   44230:	e0bffb17 	ldw	r2,-20(fp)
   44234:	10800017 	ldw	r2,0(r2)
   44238:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4423c:	e0bffc17 	ldw	r2,-16(fp)
   44240:	10800104 	addi	r2,r2,4
   44244:	10800037 	ldwio	r2,0(r2)
   44248:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   4424c:	e0bffd17 	ldw	r2,-12(fp)
   44250:	1080c00c 	andi	r2,r2,768
   44254:	10006d26 	beq	r2,zero,4440c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   44258:	e0bffd17 	ldw	r2,-12(fp)
   4425c:	1080400c 	andi	r2,r2,256
   44260:	10003526 	beq	r2,zero,44338 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   44264:	00800074 	movhi	r2,1
   44268:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4426c:	e0bffb17 	ldw	r2,-20(fp)
   44270:	10800a17 	ldw	r2,40(r2)
   44274:	10800044 	addi	r2,r2,1
   44278:	1081ffcc 	andi	r2,r2,2047
   4427c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   44280:	e0bffb17 	ldw	r2,-20(fp)
   44284:	10c00b17 	ldw	r3,44(r2)
   44288:	e0bffe17 	ldw	r2,-8(fp)
   4428c:	18801526 	beq	r3,r2,442e4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   44290:	e0bffc17 	ldw	r2,-16(fp)
   44294:	10800037 	ldwio	r2,0(r2)
   44298:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   4429c:	e0bff917 	ldw	r2,-28(fp)
   442a0:	10a0000c 	andi	r2,r2,32768
   442a4:	10001126 	beq	r2,zero,442ec <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   442a8:	e0bffb17 	ldw	r2,-20(fp)
   442ac:	10800a17 	ldw	r2,40(r2)
   442b0:	e0fff917 	ldw	r3,-28(fp)
   442b4:	1809883a 	mov	r4,r3
   442b8:	e0fffb17 	ldw	r3,-20(fp)
   442bc:	1885883a 	add	r2,r3,r2
   442c0:	10800e04 	addi	r2,r2,56
   442c4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   442c8:	e0bffb17 	ldw	r2,-20(fp)
   442cc:	10800a17 	ldw	r2,40(r2)
   442d0:	10800044 	addi	r2,r2,1
   442d4:	10c1ffcc 	andi	r3,r2,2047
   442d8:	e0bffb17 	ldw	r2,-20(fp)
   442dc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   442e0:	003fe206 	br	4426c <__alt_data_end+0xfffdd16c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   442e4:	0001883a 	nop
   442e8:	00000106 	br	442f0 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   442ec:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   442f0:	e0bff917 	ldw	r2,-28(fp)
   442f4:	10bfffec 	andhi	r2,r2,65535
   442f8:	10000f26 	beq	r2,zero,44338 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   442fc:	e0bffb17 	ldw	r2,-20(fp)
   44300:	10c00817 	ldw	r3,32(r2)
   44304:	00bfff84 	movi	r2,-2
   44308:	1886703a 	and	r3,r3,r2
   4430c:	e0bffb17 	ldw	r2,-20(fp)
   44310:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   44314:	e0bffc17 	ldw	r2,-16(fp)
   44318:	10800104 	addi	r2,r2,4
   4431c:	1007883a 	mov	r3,r2
   44320:	e0bffb17 	ldw	r2,-20(fp)
   44324:	10800817 	ldw	r2,32(r2)
   44328:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4432c:	e0bffc17 	ldw	r2,-16(fp)
   44330:	10800104 	addi	r2,r2,4
   44334:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   44338:	e0bffd17 	ldw	r2,-12(fp)
   4433c:	1080800c 	andi	r2,r2,512
   44340:	103fbe26 	beq	r2,zero,4423c <__alt_data_end+0xfffdd13c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   44344:	e0bffd17 	ldw	r2,-12(fp)
   44348:	1004d43a 	srli	r2,r2,16
   4434c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   44350:	00001406 	br	443a4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   44354:	e0bffc17 	ldw	r2,-16(fp)
   44358:	e0fffb17 	ldw	r3,-20(fp)
   4435c:	18c00d17 	ldw	r3,52(r3)
   44360:	e13ffb17 	ldw	r4,-20(fp)
   44364:	20c7883a 	add	r3,r4,r3
   44368:	18c20e04 	addi	r3,r3,2104
   4436c:	18c00003 	ldbu	r3,0(r3)
   44370:	18c03fcc 	andi	r3,r3,255
   44374:	18c0201c 	xori	r3,r3,128
   44378:	18ffe004 	addi	r3,r3,-128
   4437c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   44380:	e0bffb17 	ldw	r2,-20(fp)
   44384:	10800d17 	ldw	r2,52(r2)
   44388:	10800044 	addi	r2,r2,1
   4438c:	10c1ffcc 	andi	r3,r2,2047
   44390:	e0bffb17 	ldw	r2,-20(fp)
   44394:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   44398:	e0bffa17 	ldw	r2,-24(fp)
   4439c:	10bfffc4 	addi	r2,r2,-1
   443a0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   443a4:	e0bffa17 	ldw	r2,-24(fp)
   443a8:	10000526 	beq	r2,zero,443c0 <altera_avalon_jtag_uart_irq+0x1a8>
   443ac:	e0bffb17 	ldw	r2,-20(fp)
   443b0:	10c00d17 	ldw	r3,52(r2)
   443b4:	e0bffb17 	ldw	r2,-20(fp)
   443b8:	10800c17 	ldw	r2,48(r2)
   443bc:	18bfe51e 	bne	r3,r2,44354 <__alt_data_end+0xfffdd254>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   443c0:	e0bffa17 	ldw	r2,-24(fp)
   443c4:	103f9d26 	beq	r2,zero,4423c <__alt_data_end+0xfffdd13c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   443c8:	e0bffb17 	ldw	r2,-20(fp)
   443cc:	10c00817 	ldw	r3,32(r2)
   443d0:	00bfff44 	movi	r2,-3
   443d4:	1886703a 	and	r3,r3,r2
   443d8:	e0bffb17 	ldw	r2,-20(fp)
   443dc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   443e0:	e0bffb17 	ldw	r2,-20(fp)
   443e4:	10800017 	ldw	r2,0(r2)
   443e8:	10800104 	addi	r2,r2,4
   443ec:	1007883a 	mov	r3,r2
   443f0:	e0bffb17 	ldw	r2,-20(fp)
   443f4:	10800817 	ldw	r2,32(r2)
   443f8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   443fc:	e0bffc17 	ldw	r2,-16(fp)
   44400:	10800104 	addi	r2,r2,4
   44404:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   44408:	003f8c06 	br	4423c <__alt_data_end+0xfffdd13c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   4440c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   44410:	0001883a 	nop
   44414:	e037883a 	mov	sp,fp
   44418:	df000017 	ldw	fp,0(sp)
   4441c:	dec00104 	addi	sp,sp,4
   44420:	f800283a 	ret

00044424 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   44424:	defff804 	addi	sp,sp,-32
   44428:	df000715 	stw	fp,28(sp)
   4442c:	df000704 	addi	fp,sp,28
   44430:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   44434:	e0bffb17 	ldw	r2,-20(fp)
   44438:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   4443c:	e0bff917 	ldw	r2,-28(fp)
   44440:	10800017 	ldw	r2,0(r2)
   44444:	10800104 	addi	r2,r2,4
   44448:	10800037 	ldwio	r2,0(r2)
   4444c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   44450:	e0bffa17 	ldw	r2,-24(fp)
   44454:	1081000c 	andi	r2,r2,1024
   44458:	10000b26 	beq	r2,zero,44488 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   4445c:	e0bff917 	ldw	r2,-28(fp)
   44460:	10800017 	ldw	r2,0(r2)
   44464:	10800104 	addi	r2,r2,4
   44468:	1007883a 	mov	r3,r2
   4446c:	e0bff917 	ldw	r2,-28(fp)
   44470:	10800817 	ldw	r2,32(r2)
   44474:	10810014 	ori	r2,r2,1024
   44478:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   4447c:	e0bff917 	ldw	r2,-28(fp)
   44480:	10000915 	stw	zero,36(r2)
   44484:	00000a06 	br	444b0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   44488:	e0bff917 	ldw	r2,-28(fp)
   4448c:	10c00917 	ldw	r3,36(r2)
   44490:	00a00034 	movhi	r2,32768
   44494:	10bfff04 	addi	r2,r2,-4
   44498:	10c00536 	bltu	r2,r3,444b0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   4449c:	e0bff917 	ldw	r2,-28(fp)
   444a0:	10800917 	ldw	r2,36(r2)
   444a4:	10c00044 	addi	r3,r2,1
   444a8:	e0bff917 	ldw	r2,-28(fp)
   444ac:	10c00915 	stw	r3,36(r2)
   444b0:	d0a6b317 	ldw	r2,-25908(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   444b4:	e037883a 	mov	sp,fp
   444b8:	df000017 	ldw	fp,0(sp)
   444bc:	dec00104 	addi	sp,sp,4
   444c0:	f800283a 	ret

000444c4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   444c4:	defffd04 	addi	sp,sp,-12
   444c8:	df000215 	stw	fp,8(sp)
   444cc:	df000204 	addi	fp,sp,8
   444d0:	e13ffe15 	stw	r4,-8(fp)
   444d4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   444d8:	00000506 	br	444f0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   444dc:	e0bfff17 	ldw	r2,-4(fp)
   444e0:	1090000c 	andi	r2,r2,16384
   444e4:	10000226 	beq	r2,zero,444f0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   444e8:	00bffd44 	movi	r2,-11
   444ec:	00000b06 	br	4451c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   444f0:	e0bffe17 	ldw	r2,-8(fp)
   444f4:	10c00d17 	ldw	r3,52(r2)
   444f8:	e0bffe17 	ldw	r2,-8(fp)
   444fc:	10800c17 	ldw	r2,48(r2)
   44500:	18800526 	beq	r3,r2,44518 <altera_avalon_jtag_uart_close+0x54>
   44504:	e0bffe17 	ldw	r2,-8(fp)
   44508:	10c00917 	ldw	r3,36(r2)
   4450c:	e0bffe17 	ldw	r2,-8(fp)
   44510:	10800117 	ldw	r2,4(r2)
   44514:	18bff136 	bltu	r3,r2,444dc <__alt_data_end+0xfffdd3dc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   44518:	0005883a 	mov	r2,zero
}
   4451c:	e037883a 	mov	sp,fp
   44520:	df000017 	ldw	fp,0(sp)
   44524:	dec00104 	addi	sp,sp,4
   44528:	f800283a 	ret

0004452c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   4452c:	defffa04 	addi	sp,sp,-24
   44530:	df000515 	stw	fp,20(sp)
   44534:	df000504 	addi	fp,sp,20
   44538:	e13ffd15 	stw	r4,-12(fp)
   4453c:	e17ffe15 	stw	r5,-8(fp)
   44540:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   44544:	00bff9c4 	movi	r2,-25
   44548:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   4454c:	e0bffe17 	ldw	r2,-8(fp)
   44550:	10da8060 	cmpeqi	r3,r2,27137
   44554:	1800031e 	bne	r3,zero,44564 <altera_avalon_jtag_uart_ioctl+0x38>
   44558:	109a80a0 	cmpeqi	r2,r2,27138
   4455c:	1000181e 	bne	r2,zero,445c0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   44560:	00002906 	br	44608 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   44564:	e0bffd17 	ldw	r2,-12(fp)
   44568:	10c00117 	ldw	r3,4(r2)
   4456c:	00a00034 	movhi	r2,32768
   44570:	10bfffc4 	addi	r2,r2,-1
   44574:	18802126 	beq	r3,r2,445fc <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   44578:	e0bfff17 	ldw	r2,-4(fp)
   4457c:	10800017 	ldw	r2,0(r2)
   44580:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   44584:	e0bffc17 	ldw	r2,-16(fp)
   44588:	10800090 	cmplti	r2,r2,2
   4458c:	1000061e 	bne	r2,zero,445a8 <altera_avalon_jtag_uart_ioctl+0x7c>
   44590:	e0fffc17 	ldw	r3,-16(fp)
   44594:	00a00034 	movhi	r2,32768
   44598:	10bfffc4 	addi	r2,r2,-1
   4459c:	18800226 	beq	r3,r2,445a8 <altera_avalon_jtag_uart_ioctl+0x7c>
   445a0:	e0bffc17 	ldw	r2,-16(fp)
   445a4:	00000206 	br	445b0 <altera_avalon_jtag_uart_ioctl+0x84>
   445a8:	00a00034 	movhi	r2,32768
   445ac:	10bfff84 	addi	r2,r2,-2
   445b0:	e0fffd17 	ldw	r3,-12(fp)
   445b4:	18800115 	stw	r2,4(r3)
      rc = 0;
   445b8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   445bc:	00000f06 	br	445fc <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   445c0:	e0bffd17 	ldw	r2,-12(fp)
   445c4:	10c00117 	ldw	r3,4(r2)
   445c8:	00a00034 	movhi	r2,32768
   445cc:	10bfffc4 	addi	r2,r2,-1
   445d0:	18800c26 	beq	r3,r2,44604 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   445d4:	e0bffd17 	ldw	r2,-12(fp)
   445d8:	10c00917 	ldw	r3,36(r2)
   445dc:	e0bffd17 	ldw	r2,-12(fp)
   445e0:	10800117 	ldw	r2,4(r2)
   445e4:	1885803a 	cmpltu	r2,r3,r2
   445e8:	10c03fcc 	andi	r3,r2,255
   445ec:	e0bfff17 	ldw	r2,-4(fp)
   445f0:	10c00015 	stw	r3,0(r2)
      rc = 0;
   445f4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   445f8:	00000206 	br	44604 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   445fc:	0001883a 	nop
   44600:	00000106 	br	44608 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   44604:	0001883a 	nop

  default:
    break;
  }

  return rc;
   44608:	e0bffb17 	ldw	r2,-20(fp)
}
   4460c:	e037883a 	mov	sp,fp
   44610:	df000017 	ldw	fp,0(sp)
   44614:	dec00104 	addi	sp,sp,4
   44618:	f800283a 	ret

0004461c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   4461c:	defff304 	addi	sp,sp,-52
   44620:	dfc00c15 	stw	ra,48(sp)
   44624:	df000b15 	stw	fp,44(sp)
   44628:	df000b04 	addi	fp,sp,44
   4462c:	e13ffc15 	stw	r4,-16(fp)
   44630:	e17ffd15 	stw	r5,-12(fp)
   44634:	e1bffe15 	stw	r6,-8(fp)
   44638:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   4463c:	e0bffd17 	ldw	r2,-12(fp)
   44640:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   44644:	00004706 	br	44764 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   44648:	e0bffc17 	ldw	r2,-16(fp)
   4464c:	10800a17 	ldw	r2,40(r2)
   44650:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   44654:	e0bffc17 	ldw	r2,-16(fp)
   44658:	10800b17 	ldw	r2,44(r2)
   4465c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   44660:	e0fff717 	ldw	r3,-36(fp)
   44664:	e0bff817 	ldw	r2,-32(fp)
   44668:	18800536 	bltu	r3,r2,44680 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   4466c:	e0fff717 	ldw	r3,-36(fp)
   44670:	e0bff817 	ldw	r2,-32(fp)
   44674:	1885c83a 	sub	r2,r3,r2
   44678:	e0bff615 	stw	r2,-40(fp)
   4467c:	00000406 	br	44690 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   44680:	00c20004 	movi	r3,2048
   44684:	e0bff817 	ldw	r2,-32(fp)
   44688:	1885c83a 	sub	r2,r3,r2
   4468c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   44690:	e0bff617 	ldw	r2,-40(fp)
   44694:	10001e26 	beq	r2,zero,44710 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   44698:	e0fffe17 	ldw	r3,-8(fp)
   4469c:	e0bff617 	ldw	r2,-40(fp)
   446a0:	1880022e 	bgeu	r3,r2,446ac <altera_avalon_jtag_uart_read+0x90>
        n = space;
   446a4:	e0bffe17 	ldw	r2,-8(fp)
   446a8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   446ac:	e0bffc17 	ldw	r2,-16(fp)
   446b0:	10c00e04 	addi	r3,r2,56
   446b4:	e0bff817 	ldw	r2,-32(fp)
   446b8:	1885883a 	add	r2,r3,r2
   446bc:	e1bff617 	ldw	r6,-40(fp)
   446c0:	100b883a 	mov	r5,r2
   446c4:	e13ff517 	ldw	r4,-44(fp)
   446c8:	0041bec0 	call	41bec <memcpy>
      ptr   += n;
   446cc:	e0fff517 	ldw	r3,-44(fp)
   446d0:	e0bff617 	ldw	r2,-40(fp)
   446d4:	1885883a 	add	r2,r3,r2
   446d8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   446dc:	e0fffe17 	ldw	r3,-8(fp)
   446e0:	e0bff617 	ldw	r2,-40(fp)
   446e4:	1885c83a 	sub	r2,r3,r2
   446e8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   446ec:	e0fff817 	ldw	r3,-32(fp)
   446f0:	e0bff617 	ldw	r2,-40(fp)
   446f4:	1885883a 	add	r2,r3,r2
   446f8:	10c1ffcc 	andi	r3,r2,2047
   446fc:	e0bffc17 	ldw	r2,-16(fp)
   44700:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   44704:	e0bffe17 	ldw	r2,-8(fp)
   44708:	00bfcf16 	blt	zero,r2,44648 <__alt_data_end+0xfffdd548>
   4470c:	00000106 	br	44714 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   44710:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   44714:	e0fff517 	ldw	r3,-44(fp)
   44718:	e0bffd17 	ldw	r2,-12(fp)
   4471c:	1880141e 	bne	r3,r2,44770 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   44720:	e0bfff17 	ldw	r2,-4(fp)
   44724:	1090000c 	andi	r2,r2,16384
   44728:	1000131e 	bne	r2,zero,44778 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   4472c:	0001883a 	nop
   44730:	e0bffc17 	ldw	r2,-16(fp)
   44734:	10c00a17 	ldw	r3,40(r2)
   44738:	e0bff717 	ldw	r2,-36(fp)
   4473c:	1880051e 	bne	r3,r2,44754 <altera_avalon_jtag_uart_read+0x138>
   44740:	e0bffc17 	ldw	r2,-16(fp)
   44744:	10c00917 	ldw	r3,36(r2)
   44748:	e0bffc17 	ldw	r2,-16(fp)
   4474c:	10800117 	ldw	r2,4(r2)
   44750:	18bff736 	bltu	r3,r2,44730 <__alt_data_end+0xfffdd630>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   44754:	e0bffc17 	ldw	r2,-16(fp)
   44758:	10c00a17 	ldw	r3,40(r2)
   4475c:	e0bff717 	ldw	r2,-36(fp)
   44760:	18800726 	beq	r3,r2,44780 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   44764:	e0bffe17 	ldw	r2,-8(fp)
   44768:	00bfb716 	blt	zero,r2,44648 <__alt_data_end+0xfffdd548>
   4476c:	00000506 	br	44784 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   44770:	0001883a 	nop
   44774:	00000306 	br	44784 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   44778:	0001883a 	nop
   4477c:	00000106 	br	44784 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   44780:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   44784:	e0fff517 	ldw	r3,-44(fp)
   44788:	e0bffd17 	ldw	r2,-12(fp)
   4478c:	18801826 	beq	r3,r2,447f0 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44790:	0005303a 	rdctl	r2,status
   44794:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44798:	e0fffb17 	ldw	r3,-20(fp)
   4479c:	00bfff84 	movi	r2,-2
   447a0:	1884703a 	and	r2,r3,r2
   447a4:	1001703a 	wrctl	status,r2
  
  return context;
   447a8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   447ac:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   447b0:	e0bffc17 	ldw	r2,-16(fp)
   447b4:	10800817 	ldw	r2,32(r2)
   447b8:	10c00054 	ori	r3,r2,1
   447bc:	e0bffc17 	ldw	r2,-16(fp)
   447c0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   447c4:	e0bffc17 	ldw	r2,-16(fp)
   447c8:	10800017 	ldw	r2,0(r2)
   447cc:	10800104 	addi	r2,r2,4
   447d0:	1007883a 	mov	r3,r2
   447d4:	e0bffc17 	ldw	r2,-16(fp)
   447d8:	10800817 	ldw	r2,32(r2)
   447dc:	18800035 	stwio	r2,0(r3)
   447e0:	e0bffa17 	ldw	r2,-24(fp)
   447e4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   447e8:	e0bff917 	ldw	r2,-28(fp)
   447ec:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   447f0:	e0fff517 	ldw	r3,-44(fp)
   447f4:	e0bffd17 	ldw	r2,-12(fp)
   447f8:	18800426 	beq	r3,r2,4480c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   447fc:	e0fff517 	ldw	r3,-44(fp)
   44800:	e0bffd17 	ldw	r2,-12(fp)
   44804:	1885c83a 	sub	r2,r3,r2
   44808:	00000606 	br	44824 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   4480c:	e0bfff17 	ldw	r2,-4(fp)
   44810:	1090000c 	andi	r2,r2,16384
   44814:	10000226 	beq	r2,zero,44820 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   44818:	00bffd44 	movi	r2,-11
   4481c:	00000106 	br	44824 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   44820:	00bffec4 	movi	r2,-5
}
   44824:	e037883a 	mov	sp,fp
   44828:	dfc00117 	ldw	ra,4(sp)
   4482c:	df000017 	ldw	fp,0(sp)
   44830:	dec00204 	addi	sp,sp,8
   44834:	f800283a 	ret

00044838 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   44838:	defff304 	addi	sp,sp,-52
   4483c:	dfc00c15 	stw	ra,48(sp)
   44840:	df000b15 	stw	fp,44(sp)
   44844:	df000b04 	addi	fp,sp,44
   44848:	e13ffc15 	stw	r4,-16(fp)
   4484c:	e17ffd15 	stw	r5,-12(fp)
   44850:	e1bffe15 	stw	r6,-8(fp)
   44854:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   44858:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   4485c:	e0bffd17 	ldw	r2,-12(fp)
   44860:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   44864:	00003706 	br	44944 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   44868:	e0bffc17 	ldw	r2,-16(fp)
   4486c:	10800c17 	ldw	r2,48(r2)
   44870:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   44874:	e0bffc17 	ldw	r2,-16(fp)
   44878:	10800d17 	ldw	r2,52(r2)
   4487c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   44880:	e0fff917 	ldw	r3,-28(fp)
   44884:	e0bff517 	ldw	r2,-44(fp)
   44888:	1880062e 	bgeu	r3,r2,448a4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   4488c:	e0fff517 	ldw	r3,-44(fp)
   44890:	e0bff917 	ldw	r2,-28(fp)
   44894:	1885c83a 	sub	r2,r3,r2
   44898:	10bfffc4 	addi	r2,r2,-1
   4489c:	e0bff615 	stw	r2,-40(fp)
   448a0:	00000b06 	br	448d0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   448a4:	e0bff517 	ldw	r2,-44(fp)
   448a8:	10000526 	beq	r2,zero,448c0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   448ac:	00c20004 	movi	r3,2048
   448b0:	e0bff917 	ldw	r2,-28(fp)
   448b4:	1885c83a 	sub	r2,r3,r2
   448b8:	e0bff615 	stw	r2,-40(fp)
   448bc:	00000406 	br	448d0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   448c0:	00c1ffc4 	movi	r3,2047
   448c4:	e0bff917 	ldw	r2,-28(fp)
   448c8:	1885c83a 	sub	r2,r3,r2
   448cc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   448d0:	e0bff617 	ldw	r2,-40(fp)
   448d4:	10001e26 	beq	r2,zero,44950 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   448d8:	e0fffe17 	ldw	r3,-8(fp)
   448dc:	e0bff617 	ldw	r2,-40(fp)
   448e0:	1880022e 	bgeu	r3,r2,448ec <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   448e4:	e0bffe17 	ldw	r2,-8(fp)
   448e8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   448ec:	e0bffc17 	ldw	r2,-16(fp)
   448f0:	10c20e04 	addi	r3,r2,2104
   448f4:	e0bff917 	ldw	r2,-28(fp)
   448f8:	1885883a 	add	r2,r3,r2
   448fc:	e1bff617 	ldw	r6,-40(fp)
   44900:	e17ffd17 	ldw	r5,-12(fp)
   44904:	1009883a 	mov	r4,r2
   44908:	0041bec0 	call	41bec <memcpy>
      ptr   += n;
   4490c:	e0fffd17 	ldw	r3,-12(fp)
   44910:	e0bff617 	ldw	r2,-40(fp)
   44914:	1885883a 	add	r2,r3,r2
   44918:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   4491c:	e0fffe17 	ldw	r3,-8(fp)
   44920:	e0bff617 	ldw	r2,-40(fp)
   44924:	1885c83a 	sub	r2,r3,r2
   44928:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4492c:	e0fff917 	ldw	r3,-28(fp)
   44930:	e0bff617 	ldw	r2,-40(fp)
   44934:	1885883a 	add	r2,r3,r2
   44938:	10c1ffcc 	andi	r3,r2,2047
   4493c:	e0bffc17 	ldw	r2,-16(fp)
   44940:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   44944:	e0bffe17 	ldw	r2,-8(fp)
   44948:	00bfc716 	blt	zero,r2,44868 <__alt_data_end+0xfffdd768>
   4494c:	00000106 	br	44954 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   44950:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44954:	0005303a 	rdctl	r2,status
   44958:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4495c:	e0fffb17 	ldw	r3,-20(fp)
   44960:	00bfff84 	movi	r2,-2
   44964:	1884703a 	and	r2,r3,r2
   44968:	1001703a 	wrctl	status,r2
  
  return context;
   4496c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   44970:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   44974:	e0bffc17 	ldw	r2,-16(fp)
   44978:	10800817 	ldw	r2,32(r2)
   4497c:	10c00094 	ori	r3,r2,2
   44980:	e0bffc17 	ldw	r2,-16(fp)
   44984:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   44988:	e0bffc17 	ldw	r2,-16(fp)
   4498c:	10800017 	ldw	r2,0(r2)
   44990:	10800104 	addi	r2,r2,4
   44994:	1007883a 	mov	r3,r2
   44998:	e0bffc17 	ldw	r2,-16(fp)
   4499c:	10800817 	ldw	r2,32(r2)
   449a0:	18800035 	stwio	r2,0(r3)
   449a4:	e0bffa17 	ldw	r2,-24(fp)
   449a8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   449ac:	e0bff817 	ldw	r2,-32(fp)
   449b0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   449b4:	e0bffe17 	ldw	r2,-8(fp)
   449b8:	0080100e 	bge	zero,r2,449fc <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   449bc:	e0bfff17 	ldw	r2,-4(fp)
   449c0:	1090000c 	andi	r2,r2,16384
   449c4:	1000101e 	bne	r2,zero,44a08 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   449c8:	0001883a 	nop
   449cc:	e0bffc17 	ldw	r2,-16(fp)
   449d0:	10c00d17 	ldw	r3,52(r2)
   449d4:	e0bff517 	ldw	r2,-44(fp)
   449d8:	1880051e 	bne	r3,r2,449f0 <altera_avalon_jtag_uart_write+0x1b8>
   449dc:	e0bffc17 	ldw	r2,-16(fp)
   449e0:	10c00917 	ldw	r3,36(r2)
   449e4:	e0bffc17 	ldw	r2,-16(fp)
   449e8:	10800117 	ldw	r2,4(r2)
   449ec:	18bff736 	bltu	r3,r2,449cc <__alt_data_end+0xfffdd8cc>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   449f0:	e0bffc17 	ldw	r2,-16(fp)
   449f4:	10800917 	ldw	r2,36(r2)
   449f8:	1000051e 	bne	r2,zero,44a10 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   449fc:	e0bffe17 	ldw	r2,-8(fp)
   44a00:	00bfd016 	blt	zero,r2,44944 <__alt_data_end+0xfffdd844>
   44a04:	00000306 	br	44a14 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   44a08:	0001883a 	nop
   44a0c:	00000106 	br	44a14 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   44a10:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   44a14:	e0fffd17 	ldw	r3,-12(fp)
   44a18:	e0bff717 	ldw	r2,-36(fp)
   44a1c:	18800426 	beq	r3,r2,44a30 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   44a20:	e0fffd17 	ldw	r3,-12(fp)
   44a24:	e0bff717 	ldw	r2,-36(fp)
   44a28:	1885c83a 	sub	r2,r3,r2
   44a2c:	00000606 	br	44a48 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   44a30:	e0bfff17 	ldw	r2,-4(fp)
   44a34:	1090000c 	andi	r2,r2,16384
   44a38:	10000226 	beq	r2,zero,44a44 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   44a3c:	00bffd44 	movi	r2,-11
   44a40:	00000106 	br	44a48 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   44a44:	00bffec4 	movi	r2,-5
}
   44a48:	e037883a 	mov	sp,fp
   44a4c:	dfc00117 	ldw	ra,4(sp)
   44a50:	df000017 	ldw	fp,0(sp)
   44a54:	dec00204 	addi	sp,sp,8
   44a58:	f800283a 	ret

00044a5c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   44a5c:	defffa04 	addi	sp,sp,-24
   44a60:	dfc00515 	stw	ra,20(sp)
   44a64:	df000415 	stw	fp,16(sp)
   44a68:	df000404 	addi	fp,sp,16
   44a6c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   44a70:	0007883a 	mov	r3,zero
   44a74:	e0bfff17 	ldw	r2,-4(fp)
   44a78:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   44a7c:	e0bfff17 	ldw	r2,-4(fp)
   44a80:	10800104 	addi	r2,r2,4
   44a84:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44a88:	0005303a 	rdctl	r2,status
   44a8c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44a90:	e0fffd17 	ldw	r3,-12(fp)
   44a94:	00bfff84 	movi	r2,-2
   44a98:	1884703a 	and	r2,r3,r2
   44a9c:	1001703a 	wrctl	status,r2
  
  return context;
   44aa0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   44aa4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   44aa8:	00456c00 	call	456c0 <alt_tick>
   44aac:	e0bffc17 	ldw	r2,-16(fp)
   44ab0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44ab4:	e0bffe17 	ldw	r2,-8(fp)
   44ab8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   44abc:	0001883a 	nop
   44ac0:	e037883a 	mov	sp,fp
   44ac4:	dfc00117 	ldw	ra,4(sp)
   44ac8:	df000017 	ldw	fp,0(sp)
   44acc:	dec00204 	addi	sp,sp,8
   44ad0:	f800283a 	ret

00044ad4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   44ad4:	defff804 	addi	sp,sp,-32
   44ad8:	dfc00715 	stw	ra,28(sp)
   44adc:	df000615 	stw	fp,24(sp)
   44ae0:	df000604 	addi	fp,sp,24
   44ae4:	e13ffc15 	stw	r4,-16(fp)
   44ae8:	e17ffd15 	stw	r5,-12(fp)
   44aec:	e1bffe15 	stw	r6,-8(fp)
   44af0:	e1ffff15 	stw	r7,-4(fp)
   44af4:	e0bfff17 	ldw	r2,-4(fp)
   44af8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   44afc:	d0a6b317 	ldw	r2,-25908(gp)
   44b00:	1000021e 	bne	r2,zero,44b0c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   44b04:	e0bffb17 	ldw	r2,-20(fp)
   44b08:	d0a6b315 	stw	r2,-25908(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   44b0c:	e0bffc17 	ldw	r2,-16(fp)
   44b10:	10800104 	addi	r2,r2,4
   44b14:	00c001c4 	movi	r3,7
   44b18:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   44b1c:	d8000015 	stw	zero,0(sp)
   44b20:	e1fffc17 	ldw	r7,-16(fp)
   44b24:	01800134 	movhi	r6,4
   44b28:	31929704 	addi	r6,r6,19036
   44b2c:	e17ffe17 	ldw	r5,-8(fp)
   44b30:	e13ffd17 	ldw	r4,-12(fp)
   44b34:	0044ff00 	call	44ff0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   44b38:	0001883a 	nop
   44b3c:	e037883a 	mov	sp,fp
   44b40:	dfc00117 	ldw	ra,4(sp)
   44b44:	df000017 	ldw	fp,0(sp)
   44b48:	dec00204 	addi	sp,sp,8
   44b4c:	f800283a 	ret

00044b50 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   44b50:	defff504 	addi	sp,sp,-44
   44b54:	df000a15 	stw	fp,40(sp)
   44b58:	df000a04 	addi	fp,sp,40
   44b5c:	e13ffc15 	stw	r4,-16(fp)
   44b60:	e17ffd15 	stw	r5,-12(fp)
   44b64:	e1bffe15 	stw	r6,-8(fp)
   44b68:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   44b6c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   44b70:	d0a6b317 	ldw	r2,-25908(gp)
  
  if (alt_ticks_per_second ())
   44b74:	10003c26 	beq	r2,zero,44c68 <alt_alarm_start+0x118>
  {
    if (alarm)
   44b78:	e0bffc17 	ldw	r2,-16(fp)
   44b7c:	10003826 	beq	r2,zero,44c60 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   44b80:	e0bffc17 	ldw	r2,-16(fp)
   44b84:	e0fffe17 	ldw	r3,-8(fp)
   44b88:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   44b8c:	e0bffc17 	ldw	r2,-16(fp)
   44b90:	e0ffff17 	ldw	r3,-4(fp)
   44b94:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44b98:	0005303a 	rdctl	r2,status
   44b9c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44ba0:	e0fff917 	ldw	r3,-28(fp)
   44ba4:	00bfff84 	movi	r2,-2
   44ba8:	1884703a 	and	r2,r3,r2
   44bac:	1001703a 	wrctl	status,r2
  
  return context;
   44bb0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   44bb4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   44bb8:	d0a6b417 	ldw	r2,-25904(gp)
      
      current_nticks = alt_nticks();
   44bbc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   44bc0:	e0fffd17 	ldw	r3,-12(fp)
   44bc4:	e0bff617 	ldw	r2,-40(fp)
   44bc8:	1885883a 	add	r2,r3,r2
   44bcc:	10c00044 	addi	r3,r2,1
   44bd0:	e0bffc17 	ldw	r2,-16(fp)
   44bd4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   44bd8:	e0bffc17 	ldw	r2,-16(fp)
   44bdc:	10c00217 	ldw	r3,8(r2)
   44be0:	e0bff617 	ldw	r2,-40(fp)
   44be4:	1880042e 	bgeu	r3,r2,44bf8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   44be8:	e0bffc17 	ldw	r2,-16(fp)
   44bec:	00c00044 	movi	r3,1
   44bf0:	10c00405 	stb	r3,16(r2)
   44bf4:	00000206 	br	44c00 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   44bf8:	e0bffc17 	ldw	r2,-16(fp)
   44bfc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   44c00:	e0bffc17 	ldw	r2,-16(fp)
   44c04:	d0e00d04 	addi	r3,gp,-32716
   44c08:	e0fffa15 	stw	r3,-24(fp)
   44c0c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   44c10:	e0bffb17 	ldw	r2,-20(fp)
   44c14:	e0fffa17 	ldw	r3,-24(fp)
   44c18:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   44c1c:	e0bffa17 	ldw	r2,-24(fp)
   44c20:	10c00017 	ldw	r3,0(r2)
   44c24:	e0bffb17 	ldw	r2,-20(fp)
   44c28:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   44c2c:	e0bffa17 	ldw	r2,-24(fp)
   44c30:	10800017 	ldw	r2,0(r2)
   44c34:	e0fffb17 	ldw	r3,-20(fp)
   44c38:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   44c3c:	e0bffa17 	ldw	r2,-24(fp)
   44c40:	e0fffb17 	ldw	r3,-20(fp)
   44c44:	10c00015 	stw	r3,0(r2)
   44c48:	e0bff817 	ldw	r2,-32(fp)
   44c4c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44c50:	e0bff717 	ldw	r2,-36(fp)
   44c54:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   44c58:	0005883a 	mov	r2,zero
   44c5c:	00000306 	br	44c6c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   44c60:	00bffa84 	movi	r2,-22
   44c64:	00000106 	br	44c6c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   44c68:	00bfde84 	movi	r2,-134
  }
}
   44c6c:	e037883a 	mov	sp,fp
   44c70:	df000017 	ldw	fp,0(sp)
   44c74:	dec00104 	addi	sp,sp,4
   44c78:	f800283a 	ret

00044c7c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   44c7c:	defffa04 	addi	sp,sp,-24
   44c80:	dfc00515 	stw	ra,20(sp)
   44c84:	df000415 	stw	fp,16(sp)
   44c88:	df000404 	addi	fp,sp,16
   44c8c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   44c90:	008000c4 	movi	r2,3
   44c94:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   44c98:	e0fffd17 	ldw	r3,-12(fp)
   44c9c:	008003f4 	movhi	r2,15
   44ca0:	10909004 	addi	r2,r2,16960
   44ca4:	1885383a 	mul	r2,r3,r2
   44ca8:	100b883a 	mov	r5,r2
   44cac:	0100bef4 	movhi	r4,763
   44cb0:	213c2004 	addi	r4,r4,-3968
   44cb4:	00405700 	call	40570 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   44cb8:	100b883a 	mov	r5,r2
   44cbc:	01200034 	movhi	r4,32768
   44cc0:	213fffc4 	addi	r4,r4,-1
   44cc4:	00405700 	call	40570 <__udivsi3>
   44cc8:	100b883a 	mov	r5,r2
   44ccc:	e13fff17 	ldw	r4,-4(fp)
   44cd0:	00405700 	call	40570 <__udivsi3>
   44cd4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   44cd8:	e0bffe17 	ldw	r2,-8(fp)
   44cdc:	10002a26 	beq	r2,zero,44d88 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   44ce0:	e03ffc15 	stw	zero,-16(fp)
   44ce4:	00001706 	br	44d44 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   44ce8:	00a00034 	movhi	r2,32768
   44cec:	10bfffc4 	addi	r2,r2,-1
   44cf0:	10bfffc4 	addi	r2,r2,-1
   44cf4:	103ffe1e 	bne	r2,zero,44cf0 <__alt_data_end+0xfffddbf0>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   44cf8:	e0fffd17 	ldw	r3,-12(fp)
   44cfc:	008003f4 	movhi	r2,15
   44d00:	10909004 	addi	r2,r2,16960
   44d04:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   44d08:	100b883a 	mov	r5,r2
   44d0c:	0100bef4 	movhi	r4,763
   44d10:	213c2004 	addi	r4,r4,-3968
   44d14:	00405700 	call	40570 <__udivsi3>
   44d18:	100b883a 	mov	r5,r2
   44d1c:	01200034 	movhi	r4,32768
   44d20:	213fffc4 	addi	r4,r4,-1
   44d24:	00405700 	call	40570 <__udivsi3>
   44d28:	1007883a 	mov	r3,r2
   44d2c:	e0bfff17 	ldw	r2,-4(fp)
   44d30:	10c5c83a 	sub	r2,r2,r3
   44d34:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   44d38:	e0bffc17 	ldw	r2,-16(fp)
   44d3c:	10800044 	addi	r2,r2,1
   44d40:	e0bffc15 	stw	r2,-16(fp)
   44d44:	e0fffc17 	ldw	r3,-16(fp)
   44d48:	e0bffe17 	ldw	r2,-8(fp)
   44d4c:	18bfe616 	blt	r3,r2,44ce8 <__alt_data_end+0xfffddbe8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   44d50:	e0fffd17 	ldw	r3,-12(fp)
   44d54:	008003f4 	movhi	r2,15
   44d58:	10909004 	addi	r2,r2,16960
   44d5c:	1885383a 	mul	r2,r3,r2
   44d60:	100b883a 	mov	r5,r2
   44d64:	0100bef4 	movhi	r4,763
   44d68:	213c2004 	addi	r4,r4,-3968
   44d6c:	00405700 	call	40570 <__udivsi3>
   44d70:	1007883a 	mov	r3,r2
   44d74:	e0bfff17 	ldw	r2,-4(fp)
   44d78:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   44d7c:	10bfffc4 	addi	r2,r2,-1
   44d80:	103ffe1e 	bne	r2,zero,44d7c <__alt_data_end+0xfffddc7c>
   44d84:	00000d06 	br	44dbc <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   44d88:	e0fffd17 	ldw	r3,-12(fp)
   44d8c:	008003f4 	movhi	r2,15
   44d90:	10909004 	addi	r2,r2,16960
   44d94:	1885383a 	mul	r2,r3,r2
   44d98:	100b883a 	mov	r5,r2
   44d9c:	0100bef4 	movhi	r4,763
   44da0:	213c2004 	addi	r4,r4,-3968
   44da4:	00405700 	call	40570 <__udivsi3>
   44da8:	1007883a 	mov	r3,r2
   44dac:	e0bfff17 	ldw	r2,-4(fp)
   44db0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   44db4:	10bfffc4 	addi	r2,r2,-1
   44db8:	00bffe16 	blt	zero,r2,44db4 <__alt_data_end+0xfffddcb4>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   44dbc:	0005883a 	mov	r2,zero
}
   44dc0:	e037883a 	mov	sp,fp
   44dc4:	dfc00117 	ldw	ra,4(sp)
   44dc8:	df000017 	ldw	fp,0(sp)
   44dcc:	dec00204 	addi	sp,sp,8
   44dd0:	f800283a 	ret

00044dd4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   44dd4:	defffe04 	addi	sp,sp,-8
   44dd8:	df000115 	stw	fp,4(sp)
   44ddc:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   44de0:	e03fff15 	stw	zero,-4(fp)
   44de4:	00000506 	br	44dfc <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   44de8:	e0bfff17 	ldw	r2,-4(fp)
   44dec:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   44df0:	e0bfff17 	ldw	r2,-4(fp)
   44df4:	10800804 	addi	r2,r2,32
   44df8:	e0bfff15 	stw	r2,-4(fp)
   44dfc:	e0bfff17 	ldw	r2,-4(fp)
   44e00:	10820030 	cmpltui	r2,r2,2048
   44e04:	103ff81e 	bne	r2,zero,44de8 <__alt_data_end+0xfffddce8>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   44e08:	0001883a 	nop
   44e0c:	e037883a 	mov	sp,fp
   44e10:	df000017 	ldw	fp,0(sp)
   44e14:	dec00104 	addi	sp,sp,4
   44e18:	f800283a 	ret

00044e1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   44e1c:	defffe04 	addi	sp,sp,-8
   44e20:	dfc00115 	stw	ra,4(sp)
   44e24:	df000015 	stw	fp,0(sp)
   44e28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   44e2c:	d0a00a17 	ldw	r2,-32728(gp)
   44e30:	10000326 	beq	r2,zero,44e40 <alt_get_errno+0x24>
   44e34:	d0a00a17 	ldw	r2,-32728(gp)
   44e38:	103ee83a 	callr	r2
   44e3c:	00000106 	br	44e44 <alt_get_errno+0x28>
   44e40:	d0a6ae04 	addi	r2,gp,-25928
}
   44e44:	e037883a 	mov	sp,fp
   44e48:	dfc00117 	ldw	ra,4(sp)
   44e4c:	df000017 	ldw	fp,0(sp)
   44e50:	dec00204 	addi	sp,sp,8
   44e54:	f800283a 	ret

00044e58 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   44e58:	defffa04 	addi	sp,sp,-24
   44e5c:	dfc00515 	stw	ra,20(sp)
   44e60:	df000415 	stw	fp,16(sp)
   44e64:	df000404 	addi	fp,sp,16
   44e68:	e13ffe15 	stw	r4,-8(fp)
   44e6c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   44e70:	e0bffe17 	ldw	r2,-8(fp)
   44e74:	10000326 	beq	r2,zero,44e84 <alt_dev_llist_insert+0x2c>
   44e78:	e0bffe17 	ldw	r2,-8(fp)
   44e7c:	10800217 	ldw	r2,8(r2)
   44e80:	1000061e 	bne	r2,zero,44e9c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   44e84:	0044e1c0 	call	44e1c <alt_get_errno>
   44e88:	1007883a 	mov	r3,r2
   44e8c:	00800584 	movi	r2,22
   44e90:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   44e94:	00bffa84 	movi	r2,-22
   44e98:	00001306 	br	44ee8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   44e9c:	e0bffe17 	ldw	r2,-8(fp)
   44ea0:	e0ffff17 	ldw	r3,-4(fp)
   44ea4:	e0fffc15 	stw	r3,-16(fp)
   44ea8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   44eac:	e0bffd17 	ldw	r2,-12(fp)
   44eb0:	e0fffc17 	ldw	r3,-16(fp)
   44eb4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   44eb8:	e0bffc17 	ldw	r2,-16(fp)
   44ebc:	10c00017 	ldw	r3,0(r2)
   44ec0:	e0bffd17 	ldw	r2,-12(fp)
   44ec4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   44ec8:	e0bffc17 	ldw	r2,-16(fp)
   44ecc:	10800017 	ldw	r2,0(r2)
   44ed0:	e0fffd17 	ldw	r3,-12(fp)
   44ed4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   44ed8:	e0bffc17 	ldw	r2,-16(fp)
   44edc:	e0fffd17 	ldw	r3,-12(fp)
   44ee0:	10c00015 	stw	r3,0(r2)

  return 0;  
   44ee4:	0005883a 	mov	r2,zero
}
   44ee8:	e037883a 	mov	sp,fp
   44eec:	dfc00117 	ldw	ra,4(sp)
   44ef0:	df000017 	ldw	fp,0(sp)
   44ef4:	dec00204 	addi	sp,sp,8
   44ef8:	f800283a 	ret

00044efc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   44efc:	defffd04 	addi	sp,sp,-12
   44f00:	dfc00215 	stw	ra,8(sp)
   44f04:	df000115 	stw	fp,4(sp)
   44f08:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   44f0c:	00800134 	movhi	r2,4
   44f10:	1097b904 	addi	r2,r2,24292
   44f14:	e0bfff15 	stw	r2,-4(fp)
   44f18:	00000606 	br	44f34 <_do_ctors+0x38>
        (*ctor) (); 
   44f1c:	e0bfff17 	ldw	r2,-4(fp)
   44f20:	10800017 	ldw	r2,0(r2)
   44f24:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   44f28:	e0bfff17 	ldw	r2,-4(fp)
   44f2c:	10bfff04 	addi	r2,r2,-4
   44f30:	e0bfff15 	stw	r2,-4(fp)
   44f34:	e0ffff17 	ldw	r3,-4(fp)
   44f38:	00800134 	movhi	r2,4
   44f3c:	1097ba04 	addi	r2,r2,24296
   44f40:	18bff62e 	bgeu	r3,r2,44f1c <__alt_data_end+0xfffdde1c>
        (*ctor) (); 
}
   44f44:	0001883a 	nop
   44f48:	e037883a 	mov	sp,fp
   44f4c:	dfc00117 	ldw	ra,4(sp)
   44f50:	df000017 	ldw	fp,0(sp)
   44f54:	dec00204 	addi	sp,sp,8
   44f58:	f800283a 	ret

00044f5c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   44f5c:	defffd04 	addi	sp,sp,-12
   44f60:	dfc00215 	stw	ra,8(sp)
   44f64:	df000115 	stw	fp,4(sp)
   44f68:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   44f6c:	00800134 	movhi	r2,4
   44f70:	1097b904 	addi	r2,r2,24292
   44f74:	e0bfff15 	stw	r2,-4(fp)
   44f78:	00000606 	br	44f94 <_do_dtors+0x38>
        (*dtor) (); 
   44f7c:	e0bfff17 	ldw	r2,-4(fp)
   44f80:	10800017 	ldw	r2,0(r2)
   44f84:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   44f88:	e0bfff17 	ldw	r2,-4(fp)
   44f8c:	10bfff04 	addi	r2,r2,-4
   44f90:	e0bfff15 	stw	r2,-4(fp)
   44f94:	e0ffff17 	ldw	r3,-4(fp)
   44f98:	00800134 	movhi	r2,4
   44f9c:	1097ba04 	addi	r2,r2,24296
   44fa0:	18bff62e 	bgeu	r3,r2,44f7c <__alt_data_end+0xfffdde7c>
        (*dtor) (); 
}
   44fa4:	0001883a 	nop
   44fa8:	e037883a 	mov	sp,fp
   44fac:	dfc00117 	ldw	ra,4(sp)
   44fb0:	df000017 	ldw	fp,0(sp)
   44fb4:	dec00204 	addi	sp,sp,8
   44fb8:	f800283a 	ret

00044fbc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   44fbc:	defffe04 	addi	sp,sp,-8
   44fc0:	dfc00115 	stw	ra,4(sp)
   44fc4:	df000015 	stw	fp,0(sp)
   44fc8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   44fcc:	01440004 	movi	r5,4096
   44fd0:	0009883a 	mov	r4,zero
   44fd4:	0045a280 	call	45a28 <alt_icache_flush>
#endif
}
   44fd8:	0001883a 	nop
   44fdc:	e037883a 	mov	sp,fp
   44fe0:	dfc00117 	ldw	ra,4(sp)
   44fe4:	df000017 	ldw	fp,0(sp)
   44fe8:	dec00204 	addi	sp,sp,8
   44fec:	f800283a 	ret

00044ff0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   44ff0:	defff904 	addi	sp,sp,-28
   44ff4:	dfc00615 	stw	ra,24(sp)
   44ff8:	df000515 	stw	fp,20(sp)
   44ffc:	df000504 	addi	fp,sp,20
   45000:	e13ffc15 	stw	r4,-16(fp)
   45004:	e17ffd15 	stw	r5,-12(fp)
   45008:	e1bffe15 	stw	r6,-8(fp)
   4500c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   45010:	e0800217 	ldw	r2,8(fp)
   45014:	d8800015 	stw	r2,0(sp)
   45018:	e1ffff17 	ldw	r7,-4(fp)
   4501c:	e1bffe17 	ldw	r6,-8(fp)
   45020:	e17ffd17 	ldw	r5,-12(fp)
   45024:	e13ffc17 	ldw	r4,-16(fp)
   45028:	00451a00 	call	451a0 <alt_iic_isr_register>
}  
   4502c:	e037883a 	mov	sp,fp
   45030:	dfc00117 	ldw	ra,4(sp)
   45034:	df000017 	ldw	fp,0(sp)
   45038:	dec00204 	addi	sp,sp,8
   4503c:	f800283a 	ret

00045040 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   45040:	defff904 	addi	sp,sp,-28
   45044:	df000615 	stw	fp,24(sp)
   45048:	df000604 	addi	fp,sp,24
   4504c:	e13ffe15 	stw	r4,-8(fp)
   45050:	e17fff15 	stw	r5,-4(fp)
   45054:	e0bfff17 	ldw	r2,-4(fp)
   45058:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4505c:	0005303a 	rdctl	r2,status
   45060:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45064:	e0fffb17 	ldw	r3,-20(fp)
   45068:	00bfff84 	movi	r2,-2
   4506c:	1884703a 	and	r2,r3,r2
   45070:	1001703a 	wrctl	status,r2
  
  return context;
   45074:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   45078:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   4507c:	00c00044 	movi	r3,1
   45080:	e0bffa17 	ldw	r2,-24(fp)
   45084:	1884983a 	sll	r2,r3,r2
   45088:	1007883a 	mov	r3,r2
   4508c:	d0a6b217 	ldw	r2,-25912(gp)
   45090:	1884b03a 	or	r2,r3,r2
   45094:	d0a6b215 	stw	r2,-25912(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   45098:	d0a6b217 	ldw	r2,-25912(gp)
   4509c:	100170fa 	wrctl	ienable,r2
   450a0:	e0bffc17 	ldw	r2,-16(fp)
   450a4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   450a8:	e0bffd17 	ldw	r2,-12(fp)
   450ac:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   450b0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   450b4:	0001883a 	nop
}
   450b8:	e037883a 	mov	sp,fp
   450bc:	df000017 	ldw	fp,0(sp)
   450c0:	dec00104 	addi	sp,sp,4
   450c4:	f800283a 	ret

000450c8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   450c8:	defff904 	addi	sp,sp,-28
   450cc:	df000615 	stw	fp,24(sp)
   450d0:	df000604 	addi	fp,sp,24
   450d4:	e13ffe15 	stw	r4,-8(fp)
   450d8:	e17fff15 	stw	r5,-4(fp)
   450dc:	e0bfff17 	ldw	r2,-4(fp)
   450e0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   450e4:	0005303a 	rdctl	r2,status
   450e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   450ec:	e0fffb17 	ldw	r3,-20(fp)
   450f0:	00bfff84 	movi	r2,-2
   450f4:	1884703a 	and	r2,r3,r2
   450f8:	1001703a 	wrctl	status,r2
  
  return context;
   450fc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   45100:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   45104:	00c00044 	movi	r3,1
   45108:	e0bffa17 	ldw	r2,-24(fp)
   4510c:	1884983a 	sll	r2,r3,r2
   45110:	0084303a 	nor	r2,zero,r2
   45114:	1007883a 	mov	r3,r2
   45118:	d0a6b217 	ldw	r2,-25912(gp)
   4511c:	1884703a 	and	r2,r3,r2
   45120:	d0a6b215 	stw	r2,-25912(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   45124:	d0a6b217 	ldw	r2,-25912(gp)
   45128:	100170fa 	wrctl	ienable,r2
   4512c:	e0bffc17 	ldw	r2,-16(fp)
   45130:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45134:	e0bffd17 	ldw	r2,-12(fp)
   45138:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4513c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   45140:	0001883a 	nop
}
   45144:	e037883a 	mov	sp,fp
   45148:	df000017 	ldw	fp,0(sp)
   4514c:	dec00104 	addi	sp,sp,4
   45150:	f800283a 	ret

00045154 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   45154:	defffc04 	addi	sp,sp,-16
   45158:	df000315 	stw	fp,12(sp)
   4515c:	df000304 	addi	fp,sp,12
   45160:	e13ffe15 	stw	r4,-8(fp)
   45164:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   45168:	000530fa 	rdctl	r2,ienable
   4516c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   45170:	00c00044 	movi	r3,1
   45174:	e0bfff17 	ldw	r2,-4(fp)
   45178:	1884983a 	sll	r2,r3,r2
   4517c:	1007883a 	mov	r3,r2
   45180:	e0bffd17 	ldw	r2,-12(fp)
   45184:	1884703a 	and	r2,r3,r2
   45188:	1004c03a 	cmpne	r2,r2,zero
   4518c:	10803fcc 	andi	r2,r2,255
}
   45190:	e037883a 	mov	sp,fp
   45194:	df000017 	ldw	fp,0(sp)
   45198:	dec00104 	addi	sp,sp,4
   4519c:	f800283a 	ret

000451a0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   451a0:	defff504 	addi	sp,sp,-44
   451a4:	dfc00a15 	stw	ra,40(sp)
   451a8:	df000915 	stw	fp,36(sp)
   451ac:	df000904 	addi	fp,sp,36
   451b0:	e13ffc15 	stw	r4,-16(fp)
   451b4:	e17ffd15 	stw	r5,-12(fp)
   451b8:	e1bffe15 	stw	r6,-8(fp)
   451bc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   451c0:	00bffa84 	movi	r2,-22
   451c4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   451c8:	e0bffd17 	ldw	r2,-12(fp)
   451cc:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   451d0:	e0bff817 	ldw	r2,-32(fp)
   451d4:	10800808 	cmpgei	r2,r2,32
   451d8:	1000271e 	bne	r2,zero,45278 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   451dc:	0005303a 	rdctl	r2,status
   451e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   451e4:	e0fffb17 	ldw	r3,-20(fp)
   451e8:	00bfff84 	movi	r2,-2
   451ec:	1884703a 	and	r2,r3,r2
   451f0:	1001703a 	wrctl	status,r2
  
  return context;
   451f4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   451f8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   451fc:	00800174 	movhi	r2,5
   45200:	10a54b04 	addi	r2,r2,-27348
   45204:	e0fff817 	ldw	r3,-32(fp)
   45208:	180690fa 	slli	r3,r3,3
   4520c:	10c5883a 	add	r2,r2,r3
   45210:	e0fffe17 	ldw	r3,-8(fp)
   45214:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   45218:	00800174 	movhi	r2,5
   4521c:	10a54b04 	addi	r2,r2,-27348
   45220:	e0fff817 	ldw	r3,-32(fp)
   45224:	180690fa 	slli	r3,r3,3
   45228:	10c5883a 	add	r2,r2,r3
   4522c:	10800104 	addi	r2,r2,4
   45230:	e0ffff17 	ldw	r3,-4(fp)
   45234:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   45238:	e0bffe17 	ldw	r2,-8(fp)
   4523c:	10000526 	beq	r2,zero,45254 <alt_iic_isr_register+0xb4>
   45240:	e0bff817 	ldw	r2,-32(fp)
   45244:	100b883a 	mov	r5,r2
   45248:	e13ffc17 	ldw	r4,-16(fp)
   4524c:	00450400 	call	45040 <alt_ic_irq_enable>
   45250:	00000406 	br	45264 <alt_iic_isr_register+0xc4>
   45254:	e0bff817 	ldw	r2,-32(fp)
   45258:	100b883a 	mov	r5,r2
   4525c:	e13ffc17 	ldw	r4,-16(fp)
   45260:	00450c80 	call	450c8 <alt_ic_irq_disable>
   45264:	e0bff715 	stw	r2,-36(fp)
   45268:	e0bffa17 	ldw	r2,-24(fp)
   4526c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45270:	e0bff917 	ldw	r2,-28(fp)
   45274:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   45278:	e0bff717 	ldw	r2,-36(fp)
}
   4527c:	e037883a 	mov	sp,fp
   45280:	dfc00117 	ldw	ra,4(sp)
   45284:	df000017 	ldw	fp,0(sp)
   45288:	dec00204 	addi	sp,sp,8
   4528c:	f800283a 	ret

00045290 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   45290:	defff904 	addi	sp,sp,-28
   45294:	dfc00615 	stw	ra,24(sp)
   45298:	df000515 	stw	fp,20(sp)
   4529c:	df000504 	addi	fp,sp,20
   452a0:	e13ffc15 	stw	r4,-16(fp)
   452a4:	e17ffd15 	stw	r5,-12(fp)
   452a8:	e1bffe15 	stw	r6,-8(fp)
   452ac:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   452b0:	e1bfff17 	ldw	r6,-4(fp)
   452b4:	e17ffe17 	ldw	r5,-8(fp)
   452b8:	e13ffd17 	ldw	r4,-12(fp)
   452bc:	00454d00 	call	454d0 <open>
   452c0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   452c4:	e0bffb17 	ldw	r2,-20(fp)
   452c8:	10001c16 	blt	r2,zero,4533c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   452cc:	00800134 	movhi	r2,4
   452d0:	109a1304 	addi	r2,r2,26700
   452d4:	e0fffb17 	ldw	r3,-20(fp)
   452d8:	18c00324 	muli	r3,r3,12
   452dc:	10c5883a 	add	r2,r2,r3
   452e0:	10c00017 	ldw	r3,0(r2)
   452e4:	e0bffc17 	ldw	r2,-16(fp)
   452e8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   452ec:	00800134 	movhi	r2,4
   452f0:	109a1304 	addi	r2,r2,26700
   452f4:	e0fffb17 	ldw	r3,-20(fp)
   452f8:	18c00324 	muli	r3,r3,12
   452fc:	10c5883a 	add	r2,r2,r3
   45300:	10800104 	addi	r2,r2,4
   45304:	10c00017 	ldw	r3,0(r2)
   45308:	e0bffc17 	ldw	r2,-16(fp)
   4530c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   45310:	00800134 	movhi	r2,4
   45314:	109a1304 	addi	r2,r2,26700
   45318:	e0fffb17 	ldw	r3,-20(fp)
   4531c:	18c00324 	muli	r3,r3,12
   45320:	10c5883a 	add	r2,r2,r3
   45324:	10800204 	addi	r2,r2,8
   45328:	10c00017 	ldw	r3,0(r2)
   4532c:	e0bffc17 	ldw	r2,-16(fp)
   45330:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   45334:	e13ffb17 	ldw	r4,-20(fp)
   45338:	0043cac0 	call	43cac <alt_release_fd>
  }
} 
   4533c:	0001883a 	nop
   45340:	e037883a 	mov	sp,fp
   45344:	dfc00117 	ldw	ra,4(sp)
   45348:	df000017 	ldw	fp,0(sp)
   4534c:	dec00204 	addi	sp,sp,8
   45350:	f800283a 	ret

00045354 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   45354:	defffb04 	addi	sp,sp,-20
   45358:	dfc00415 	stw	ra,16(sp)
   4535c:	df000315 	stw	fp,12(sp)
   45360:	df000304 	addi	fp,sp,12
   45364:	e13ffd15 	stw	r4,-12(fp)
   45368:	e17ffe15 	stw	r5,-8(fp)
   4536c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   45370:	01c07fc4 	movi	r7,511
   45374:	01800044 	movi	r6,1
   45378:	e17ffd17 	ldw	r5,-12(fp)
   4537c:	01000134 	movhi	r4,4
   45380:	211a1604 	addi	r4,r4,26712
   45384:	00452900 	call	45290 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   45388:	01c07fc4 	movi	r7,511
   4538c:	000d883a 	mov	r6,zero
   45390:	e17ffe17 	ldw	r5,-8(fp)
   45394:	01000134 	movhi	r4,4
   45398:	211a1304 	addi	r4,r4,26700
   4539c:	00452900 	call	45290 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   453a0:	01c07fc4 	movi	r7,511
   453a4:	01800044 	movi	r6,1
   453a8:	e17fff17 	ldw	r5,-4(fp)
   453ac:	01000134 	movhi	r4,4
   453b0:	211a1904 	addi	r4,r4,26724
   453b4:	00452900 	call	45290 <alt_open_fd>
}  
   453b8:	0001883a 	nop
   453bc:	e037883a 	mov	sp,fp
   453c0:	dfc00117 	ldw	ra,4(sp)
   453c4:	df000017 	ldw	fp,0(sp)
   453c8:	dec00204 	addi	sp,sp,8
   453cc:	f800283a 	ret

000453d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   453d0:	defffe04 	addi	sp,sp,-8
   453d4:	dfc00115 	stw	ra,4(sp)
   453d8:	df000015 	stw	fp,0(sp)
   453dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   453e0:	d0a00a17 	ldw	r2,-32728(gp)
   453e4:	10000326 	beq	r2,zero,453f4 <alt_get_errno+0x24>
   453e8:	d0a00a17 	ldw	r2,-32728(gp)
   453ec:	103ee83a 	callr	r2
   453f0:	00000106 	br	453f8 <alt_get_errno+0x28>
   453f4:	d0a6ae04 	addi	r2,gp,-25928
}
   453f8:	e037883a 	mov	sp,fp
   453fc:	dfc00117 	ldw	ra,4(sp)
   45400:	df000017 	ldw	fp,0(sp)
   45404:	dec00204 	addi	sp,sp,8
   45408:	f800283a 	ret

0004540c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   4540c:	defffd04 	addi	sp,sp,-12
   45410:	df000215 	stw	fp,8(sp)
   45414:	df000204 	addi	fp,sp,8
   45418:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   4541c:	e0bfff17 	ldw	r2,-4(fp)
   45420:	10800217 	ldw	r2,8(r2)
   45424:	10d00034 	orhi	r3,r2,16384
   45428:	e0bfff17 	ldw	r2,-4(fp)
   4542c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   45430:	e03ffe15 	stw	zero,-8(fp)
   45434:	00001d06 	br	454ac <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   45438:	00800134 	movhi	r2,4
   4543c:	109a1304 	addi	r2,r2,26700
   45440:	e0fffe17 	ldw	r3,-8(fp)
   45444:	18c00324 	muli	r3,r3,12
   45448:	10c5883a 	add	r2,r2,r3
   4544c:	10c00017 	ldw	r3,0(r2)
   45450:	e0bfff17 	ldw	r2,-4(fp)
   45454:	10800017 	ldw	r2,0(r2)
   45458:	1880111e 	bne	r3,r2,454a0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4545c:	00800134 	movhi	r2,4
   45460:	109a1304 	addi	r2,r2,26700
   45464:	e0fffe17 	ldw	r3,-8(fp)
   45468:	18c00324 	muli	r3,r3,12
   4546c:	10c5883a 	add	r2,r2,r3
   45470:	10800204 	addi	r2,r2,8
   45474:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   45478:	1000090e 	bge	r2,zero,454a0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   4547c:	e0bffe17 	ldw	r2,-8(fp)
   45480:	10c00324 	muli	r3,r2,12
   45484:	00800134 	movhi	r2,4
   45488:	109a1304 	addi	r2,r2,26700
   4548c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   45490:	e0bfff17 	ldw	r2,-4(fp)
   45494:	18800226 	beq	r3,r2,454a0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   45498:	00bffcc4 	movi	r2,-13
   4549c:	00000806 	br	454c0 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   454a0:	e0bffe17 	ldw	r2,-8(fp)
   454a4:	10800044 	addi	r2,r2,1
   454a8:	e0bffe15 	stw	r2,-8(fp)
   454ac:	d0a00917 	ldw	r2,-32732(gp)
   454b0:	1007883a 	mov	r3,r2
   454b4:	e0bffe17 	ldw	r2,-8(fp)
   454b8:	18bfdf2e 	bgeu	r3,r2,45438 <__alt_data_end+0xfffde338>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   454bc:	0005883a 	mov	r2,zero
}
   454c0:	e037883a 	mov	sp,fp
   454c4:	df000017 	ldw	fp,0(sp)
   454c8:	dec00104 	addi	sp,sp,4
   454cc:	f800283a 	ret

000454d0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   454d0:	defff604 	addi	sp,sp,-40
   454d4:	dfc00915 	stw	ra,36(sp)
   454d8:	df000815 	stw	fp,32(sp)
   454dc:	df000804 	addi	fp,sp,32
   454e0:	e13ffd15 	stw	r4,-12(fp)
   454e4:	e17ffe15 	stw	r5,-8(fp)
   454e8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   454ec:	00bfffc4 	movi	r2,-1
   454f0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   454f4:	00bffb44 	movi	r2,-19
   454f8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   454fc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   45500:	d1600704 	addi	r5,gp,-32740
   45504:	e13ffd17 	ldw	r4,-12(fp)
   45508:	00457ec0 	call	457ec <alt_find_dev>
   4550c:	e0bff815 	stw	r2,-32(fp)
   45510:	e0bff817 	ldw	r2,-32(fp)
   45514:	1000051e 	bne	r2,zero,4552c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   45518:	e13ffd17 	ldw	r4,-12(fp)
   4551c:	004587c0 	call	4587c <alt_find_file>
   45520:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   45524:	00800044 	movi	r2,1
   45528:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   4552c:	e0bff817 	ldw	r2,-32(fp)
   45530:	10002926 	beq	r2,zero,455d8 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   45534:	e13ff817 	ldw	r4,-32(fp)
   45538:	00459840 	call	45984 <alt_get_fd>
   4553c:	e0bff915 	stw	r2,-28(fp)
   45540:	e0bff917 	ldw	r2,-28(fp)
   45544:	1000030e 	bge	r2,zero,45554 <open+0x84>
    {
      status = index;
   45548:	e0bff917 	ldw	r2,-28(fp)
   4554c:	e0bffa15 	stw	r2,-24(fp)
   45550:	00002306 	br	455e0 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   45554:	e0bff917 	ldw	r2,-28(fp)
   45558:	10c00324 	muli	r3,r2,12
   4555c:	00800134 	movhi	r2,4
   45560:	109a1304 	addi	r2,r2,26700
   45564:	1885883a 	add	r2,r3,r2
   45568:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   4556c:	e0fffe17 	ldw	r3,-8(fp)
   45570:	00900034 	movhi	r2,16384
   45574:	10bfffc4 	addi	r2,r2,-1
   45578:	1886703a 	and	r3,r3,r2
   4557c:	e0bffc17 	ldw	r2,-16(fp)
   45580:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   45584:	e0bffb17 	ldw	r2,-20(fp)
   45588:	1000051e 	bne	r2,zero,455a0 <open+0xd0>
   4558c:	e13ffc17 	ldw	r4,-16(fp)
   45590:	004540c0 	call	4540c <alt_file_locked>
   45594:	e0bffa15 	stw	r2,-24(fp)
   45598:	e0bffa17 	ldw	r2,-24(fp)
   4559c:	10001016 	blt	r2,zero,455e0 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   455a0:	e0bff817 	ldw	r2,-32(fp)
   455a4:	10800317 	ldw	r2,12(r2)
   455a8:	10000826 	beq	r2,zero,455cc <open+0xfc>
   455ac:	e0bff817 	ldw	r2,-32(fp)
   455b0:	10800317 	ldw	r2,12(r2)
   455b4:	e1ffff17 	ldw	r7,-4(fp)
   455b8:	e1bffe17 	ldw	r6,-8(fp)
   455bc:	e17ffd17 	ldw	r5,-12(fp)
   455c0:	e13ffc17 	ldw	r4,-16(fp)
   455c4:	103ee83a 	callr	r2
   455c8:	00000106 	br	455d0 <open+0x100>
   455cc:	0005883a 	mov	r2,zero
   455d0:	e0bffa15 	stw	r2,-24(fp)
   455d4:	00000206 	br	455e0 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   455d8:	00bffb44 	movi	r2,-19
   455dc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   455e0:	e0bffa17 	ldw	r2,-24(fp)
   455e4:	1000090e 	bge	r2,zero,4560c <open+0x13c>
  {
    alt_release_fd (index);  
   455e8:	e13ff917 	ldw	r4,-28(fp)
   455ec:	0043cac0 	call	43cac <alt_release_fd>
    ALT_ERRNO = -status;
   455f0:	00453d00 	call	453d0 <alt_get_errno>
   455f4:	1007883a 	mov	r3,r2
   455f8:	e0bffa17 	ldw	r2,-24(fp)
   455fc:	0085c83a 	sub	r2,zero,r2
   45600:	18800015 	stw	r2,0(r3)
    return -1;
   45604:	00bfffc4 	movi	r2,-1
   45608:	00000106 	br	45610 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   4560c:	e0bff917 	ldw	r2,-28(fp)
}
   45610:	e037883a 	mov	sp,fp
   45614:	dfc00117 	ldw	ra,4(sp)
   45618:	df000017 	ldw	fp,0(sp)
   4561c:	dec00204 	addi	sp,sp,8
   45620:	f800283a 	ret

00045624 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   45624:	defffa04 	addi	sp,sp,-24
   45628:	df000515 	stw	fp,20(sp)
   4562c:	df000504 	addi	fp,sp,20
   45630:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45634:	0005303a 	rdctl	r2,status
   45638:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4563c:	e0fffc17 	ldw	r3,-16(fp)
   45640:	00bfff84 	movi	r2,-2
   45644:	1884703a 	and	r2,r3,r2
   45648:	1001703a 	wrctl	status,r2
  
  return context;
   4564c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   45650:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   45654:	e0bfff17 	ldw	r2,-4(fp)
   45658:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   4565c:	e0bffd17 	ldw	r2,-12(fp)
   45660:	10800017 	ldw	r2,0(r2)
   45664:	e0fffd17 	ldw	r3,-12(fp)
   45668:	18c00117 	ldw	r3,4(r3)
   4566c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   45670:	e0bffd17 	ldw	r2,-12(fp)
   45674:	10800117 	ldw	r2,4(r2)
   45678:	e0fffd17 	ldw	r3,-12(fp)
   4567c:	18c00017 	ldw	r3,0(r3)
   45680:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   45684:	e0bffd17 	ldw	r2,-12(fp)
   45688:	e0fffd17 	ldw	r3,-12(fp)
   4568c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   45690:	e0bffd17 	ldw	r2,-12(fp)
   45694:	e0fffd17 	ldw	r3,-12(fp)
   45698:	10c00015 	stw	r3,0(r2)
   4569c:	e0bffb17 	ldw	r2,-20(fp)
   456a0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   456a4:	e0bffe17 	ldw	r2,-8(fp)
   456a8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   456ac:	0001883a 	nop
   456b0:	e037883a 	mov	sp,fp
   456b4:	df000017 	ldw	fp,0(sp)
   456b8:	dec00104 	addi	sp,sp,4
   456bc:	f800283a 	ret

000456c0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   456c0:	defffb04 	addi	sp,sp,-20
   456c4:	dfc00415 	stw	ra,16(sp)
   456c8:	df000315 	stw	fp,12(sp)
   456cc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   456d0:	d0a00d17 	ldw	r2,-32716(gp)
   456d4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   456d8:	d0a6b417 	ldw	r2,-25904(gp)
   456dc:	10800044 	addi	r2,r2,1
   456e0:	d0a6b415 	stw	r2,-25904(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   456e4:	00002e06 	br	457a0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   456e8:	e0bffd17 	ldw	r2,-12(fp)
   456ec:	10800017 	ldw	r2,0(r2)
   456f0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   456f4:	e0bffd17 	ldw	r2,-12(fp)
   456f8:	10800403 	ldbu	r2,16(r2)
   456fc:	10803fcc 	andi	r2,r2,255
   45700:	10000426 	beq	r2,zero,45714 <alt_tick+0x54>
   45704:	d0a6b417 	ldw	r2,-25904(gp)
   45708:	1000021e 	bne	r2,zero,45714 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   4570c:	e0bffd17 	ldw	r2,-12(fp)
   45710:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   45714:	e0bffd17 	ldw	r2,-12(fp)
   45718:	10800217 	ldw	r2,8(r2)
   4571c:	d0e6b417 	ldw	r3,-25904(gp)
   45720:	18801d36 	bltu	r3,r2,45798 <alt_tick+0xd8>
   45724:	e0bffd17 	ldw	r2,-12(fp)
   45728:	10800403 	ldbu	r2,16(r2)
   4572c:	10803fcc 	andi	r2,r2,255
   45730:	1000191e 	bne	r2,zero,45798 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   45734:	e0bffd17 	ldw	r2,-12(fp)
   45738:	10800317 	ldw	r2,12(r2)
   4573c:	e0fffd17 	ldw	r3,-12(fp)
   45740:	18c00517 	ldw	r3,20(r3)
   45744:	1809883a 	mov	r4,r3
   45748:	103ee83a 	callr	r2
   4574c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   45750:	e0bfff17 	ldw	r2,-4(fp)
   45754:	1000031e 	bne	r2,zero,45764 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   45758:	e13ffd17 	ldw	r4,-12(fp)
   4575c:	00456240 	call	45624 <alt_alarm_stop>
   45760:	00000d06 	br	45798 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   45764:	e0bffd17 	ldw	r2,-12(fp)
   45768:	10c00217 	ldw	r3,8(r2)
   4576c:	e0bfff17 	ldw	r2,-4(fp)
   45770:	1887883a 	add	r3,r3,r2
   45774:	e0bffd17 	ldw	r2,-12(fp)
   45778:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   4577c:	e0bffd17 	ldw	r2,-12(fp)
   45780:	10c00217 	ldw	r3,8(r2)
   45784:	d0a6b417 	ldw	r2,-25904(gp)
   45788:	1880032e 	bgeu	r3,r2,45798 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   4578c:	e0bffd17 	ldw	r2,-12(fp)
   45790:	00c00044 	movi	r3,1
   45794:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   45798:	e0bffe17 	ldw	r2,-8(fp)
   4579c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   457a0:	e0fffd17 	ldw	r3,-12(fp)
   457a4:	d0a00d04 	addi	r2,gp,-32716
   457a8:	18bfcf1e 	bne	r3,r2,456e8 <__alt_data_end+0xfffde5e8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   457ac:	0001883a 	nop
}
   457b0:	0001883a 	nop
   457b4:	e037883a 	mov	sp,fp
   457b8:	dfc00117 	ldw	ra,4(sp)
   457bc:	df000017 	ldw	fp,0(sp)
   457c0:	dec00204 	addi	sp,sp,8
   457c4:	f800283a 	ret

000457c8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   457c8:	deffff04 	addi	sp,sp,-4
   457cc:	df000015 	stw	fp,0(sp)
   457d0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   457d4:	000170fa 	wrctl	ienable,zero
}
   457d8:	0001883a 	nop
   457dc:	e037883a 	mov	sp,fp
   457e0:	df000017 	ldw	fp,0(sp)
   457e4:	dec00104 	addi	sp,sp,4
   457e8:	f800283a 	ret

000457ec <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   457ec:	defffa04 	addi	sp,sp,-24
   457f0:	dfc00515 	stw	ra,20(sp)
   457f4:	df000415 	stw	fp,16(sp)
   457f8:	df000404 	addi	fp,sp,16
   457fc:	e13ffe15 	stw	r4,-8(fp)
   45800:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   45804:	e0bfff17 	ldw	r2,-4(fp)
   45808:	10800017 	ldw	r2,0(r2)
   4580c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   45810:	e13ffe17 	ldw	r4,-8(fp)
   45814:	00408800 	call	40880 <strlen>
   45818:	10800044 	addi	r2,r2,1
   4581c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   45820:	00000d06 	br	45858 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   45824:	e0bffc17 	ldw	r2,-16(fp)
   45828:	10800217 	ldw	r2,8(r2)
   4582c:	e0fffd17 	ldw	r3,-12(fp)
   45830:	180d883a 	mov	r6,r3
   45834:	e17ffe17 	ldw	r5,-8(fp)
   45838:	1009883a 	mov	r4,r2
   4583c:	0045ba00 	call	45ba0 <memcmp>
   45840:	1000021e 	bne	r2,zero,4584c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   45844:	e0bffc17 	ldw	r2,-16(fp)
   45848:	00000706 	br	45868 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   4584c:	e0bffc17 	ldw	r2,-16(fp)
   45850:	10800017 	ldw	r2,0(r2)
   45854:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   45858:	e0fffc17 	ldw	r3,-16(fp)
   4585c:	e0bfff17 	ldw	r2,-4(fp)
   45860:	18bff01e 	bne	r3,r2,45824 <__alt_data_end+0xfffde724>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   45864:	0005883a 	mov	r2,zero
}
   45868:	e037883a 	mov	sp,fp
   4586c:	dfc00117 	ldw	ra,4(sp)
   45870:	df000017 	ldw	fp,0(sp)
   45874:	dec00204 	addi	sp,sp,8
   45878:	f800283a 	ret

0004587c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   4587c:	defffb04 	addi	sp,sp,-20
   45880:	dfc00415 	stw	ra,16(sp)
   45884:	df000315 	stw	fp,12(sp)
   45888:	df000304 	addi	fp,sp,12
   4588c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   45890:	d0a00517 	ldw	r2,-32748(gp)
   45894:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   45898:	00003106 	br	45960 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   4589c:	e0bffd17 	ldw	r2,-12(fp)
   458a0:	10800217 	ldw	r2,8(r2)
   458a4:	1009883a 	mov	r4,r2
   458a8:	00408800 	call	40880 <strlen>
   458ac:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   458b0:	e0bffd17 	ldw	r2,-12(fp)
   458b4:	10c00217 	ldw	r3,8(r2)
   458b8:	e0bffe17 	ldw	r2,-8(fp)
   458bc:	10bfffc4 	addi	r2,r2,-1
   458c0:	1885883a 	add	r2,r3,r2
   458c4:	10800003 	ldbu	r2,0(r2)
   458c8:	10803fcc 	andi	r2,r2,255
   458cc:	1080201c 	xori	r2,r2,128
   458d0:	10bfe004 	addi	r2,r2,-128
   458d4:	10800bd8 	cmpnei	r2,r2,47
   458d8:	1000031e 	bne	r2,zero,458e8 <alt_find_file+0x6c>
    {
      len -= 1;
   458dc:	e0bffe17 	ldw	r2,-8(fp)
   458e0:	10bfffc4 	addi	r2,r2,-1
   458e4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   458e8:	e0bffe17 	ldw	r2,-8(fp)
   458ec:	e0ffff17 	ldw	r3,-4(fp)
   458f0:	1885883a 	add	r2,r3,r2
   458f4:	10800003 	ldbu	r2,0(r2)
   458f8:	10803fcc 	andi	r2,r2,255
   458fc:	1080201c 	xori	r2,r2,128
   45900:	10bfe004 	addi	r2,r2,-128
   45904:	10800be0 	cmpeqi	r2,r2,47
   45908:	1000081e 	bne	r2,zero,4592c <alt_find_file+0xb0>
   4590c:	e0bffe17 	ldw	r2,-8(fp)
   45910:	e0ffff17 	ldw	r3,-4(fp)
   45914:	1885883a 	add	r2,r3,r2
   45918:	10800003 	ldbu	r2,0(r2)
   4591c:	10803fcc 	andi	r2,r2,255
   45920:	1080201c 	xori	r2,r2,128
   45924:	10bfe004 	addi	r2,r2,-128
   45928:	10000a1e 	bne	r2,zero,45954 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   4592c:	e0bffd17 	ldw	r2,-12(fp)
   45930:	10800217 	ldw	r2,8(r2)
   45934:	e0fffe17 	ldw	r3,-8(fp)
   45938:	180d883a 	mov	r6,r3
   4593c:	e17fff17 	ldw	r5,-4(fp)
   45940:	1009883a 	mov	r4,r2
   45944:	0045ba00 	call	45ba0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   45948:	1000021e 	bne	r2,zero,45954 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   4594c:	e0bffd17 	ldw	r2,-12(fp)
   45950:	00000706 	br	45970 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   45954:	e0bffd17 	ldw	r2,-12(fp)
   45958:	10800017 	ldw	r2,0(r2)
   4595c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   45960:	e0fffd17 	ldw	r3,-12(fp)
   45964:	d0a00504 	addi	r2,gp,-32748
   45968:	18bfcc1e 	bne	r3,r2,4589c <__alt_data_end+0xfffde79c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   4596c:	0005883a 	mov	r2,zero
}
   45970:	e037883a 	mov	sp,fp
   45974:	dfc00117 	ldw	ra,4(sp)
   45978:	df000017 	ldw	fp,0(sp)
   4597c:	dec00204 	addi	sp,sp,8
   45980:	f800283a 	ret

00045984 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   45984:	defffc04 	addi	sp,sp,-16
   45988:	df000315 	stw	fp,12(sp)
   4598c:	df000304 	addi	fp,sp,12
   45990:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   45994:	00bffa04 	movi	r2,-24
   45998:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4599c:	e03ffd15 	stw	zero,-12(fp)
   459a0:	00001906 	br	45a08 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   459a4:	00800134 	movhi	r2,4
   459a8:	109a1304 	addi	r2,r2,26700
   459ac:	e0fffd17 	ldw	r3,-12(fp)
   459b0:	18c00324 	muli	r3,r3,12
   459b4:	10c5883a 	add	r2,r2,r3
   459b8:	10800017 	ldw	r2,0(r2)
   459bc:	10000f1e 	bne	r2,zero,459fc <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   459c0:	00800134 	movhi	r2,4
   459c4:	109a1304 	addi	r2,r2,26700
   459c8:	e0fffd17 	ldw	r3,-12(fp)
   459cc:	18c00324 	muli	r3,r3,12
   459d0:	10c5883a 	add	r2,r2,r3
   459d4:	e0ffff17 	ldw	r3,-4(fp)
   459d8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   459dc:	d0e00917 	ldw	r3,-32732(gp)
   459e0:	e0bffd17 	ldw	r2,-12(fp)
   459e4:	1880020e 	bge	r3,r2,459f0 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   459e8:	e0bffd17 	ldw	r2,-12(fp)
   459ec:	d0a00915 	stw	r2,-32732(gp)
      }
      rc = i;
   459f0:	e0bffd17 	ldw	r2,-12(fp)
   459f4:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   459f8:	00000606 	br	45a14 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   459fc:	e0bffd17 	ldw	r2,-12(fp)
   45a00:	10800044 	addi	r2,r2,1
   45a04:	e0bffd15 	stw	r2,-12(fp)
   45a08:	e0bffd17 	ldw	r2,-12(fp)
   45a0c:	10800810 	cmplti	r2,r2,32
   45a10:	103fe41e 	bne	r2,zero,459a4 <__alt_data_end+0xfffde8a4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   45a14:	e0bffe17 	ldw	r2,-8(fp)
}
   45a18:	e037883a 	mov	sp,fp
   45a1c:	df000017 	ldw	fp,0(sp)
   45a20:	dec00104 	addi	sp,sp,4
   45a24:	f800283a 	ret

00045a28 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   45a28:	defffb04 	addi	sp,sp,-20
   45a2c:	df000415 	stw	fp,16(sp)
   45a30:	df000404 	addi	fp,sp,16
   45a34:	e13ffe15 	stw	r4,-8(fp)
   45a38:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   45a3c:	e0bfff17 	ldw	r2,-4(fp)
   45a40:	10840070 	cmpltui	r2,r2,4097
   45a44:	1000021e 	bne	r2,zero,45a50 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   45a48:	00840004 	movi	r2,4096
   45a4c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   45a50:	e0fffe17 	ldw	r3,-8(fp)
   45a54:	e0bfff17 	ldw	r2,-4(fp)
   45a58:	1885883a 	add	r2,r3,r2
   45a5c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   45a60:	e0bffe17 	ldw	r2,-8(fp)
   45a64:	e0bffc15 	stw	r2,-16(fp)
   45a68:	00000506 	br	45a80 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   45a6c:	e0bffc17 	ldw	r2,-16(fp)
   45a70:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   45a74:	e0bffc17 	ldw	r2,-16(fp)
   45a78:	10800804 	addi	r2,r2,32
   45a7c:	e0bffc15 	stw	r2,-16(fp)
   45a80:	e0fffc17 	ldw	r3,-16(fp)
   45a84:	e0bffd17 	ldw	r2,-12(fp)
   45a88:	18bff836 	bltu	r3,r2,45a6c <__alt_data_end+0xfffde96c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   45a8c:	e0bffe17 	ldw	r2,-8(fp)
   45a90:	108007cc 	andi	r2,r2,31
   45a94:	10000226 	beq	r2,zero,45aa0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   45a98:	e0bffc17 	ldw	r2,-16(fp)
   45a9c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   45aa0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   45aa4:	0001883a 	nop
   45aa8:	e037883a 	mov	sp,fp
   45aac:	df000017 	ldw	fp,0(sp)
   45ab0:	dec00104 	addi	sp,sp,4
   45ab4:	f800283a 	ret

00045ab8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   45ab8:	defffe04 	addi	sp,sp,-8
   45abc:	df000115 	stw	fp,4(sp)
   45ac0:	df000104 	addi	fp,sp,4
   45ac4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   45ac8:	e0bfff17 	ldw	r2,-4(fp)
   45acc:	10bffe84 	addi	r2,r2,-6
   45ad0:	10c00428 	cmpgeui	r3,r2,16
   45ad4:	18001a1e 	bne	r3,zero,45b40 <alt_exception_cause_generated_bad_addr+0x88>
   45ad8:	100690ba 	slli	r3,r2,2
   45adc:	00800134 	movhi	r2,4
   45ae0:	1096bc04 	addi	r2,r2,23280
   45ae4:	1885883a 	add	r2,r3,r2
   45ae8:	10800017 	ldw	r2,0(r2)
   45aec:	1000683a 	jmp	r2
   45af0:	00045b30 	cmpltui	zero,zero,4460
   45af4:	00045b30 	cmpltui	zero,zero,4460
   45af8:	00045b40 	call	45b4 <__alt_mem_onchip_memory2-0x3ba4c>
   45afc:	00045b40 	call	45b4 <__alt_mem_onchip_memory2-0x3ba4c>
   45b00:	00045b40 	call	45b4 <__alt_mem_onchip_memory2-0x3ba4c>
   45b04:	00045b30 	cmpltui	zero,zero,4460
   45b08:	00045b38 	rdprs	zero,zero,4460
   45b0c:	00045b40 	call	45b4 <__alt_mem_onchip_memory2-0x3ba4c>
   45b10:	00045b30 	cmpltui	zero,zero,4460
   45b14:	00045b30 	cmpltui	zero,zero,4460
   45b18:	00045b40 	call	45b4 <__alt_mem_onchip_memory2-0x3ba4c>
   45b1c:	00045b30 	cmpltui	zero,zero,4460
   45b20:	00045b38 	rdprs	zero,zero,4460
   45b24:	00045b40 	call	45b4 <__alt_mem_onchip_memory2-0x3ba4c>
   45b28:	00045b40 	call	45b4 <__alt_mem_onchip_memory2-0x3ba4c>
   45b2c:	00045b30 	cmpltui	zero,zero,4460
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   45b30:	00800044 	movi	r2,1
   45b34:	00000306 	br	45b44 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   45b38:	0005883a 	mov	r2,zero
   45b3c:	00000106 	br	45b44 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   45b40:	0005883a 	mov	r2,zero
  }
}
   45b44:	e037883a 	mov	sp,fp
   45b48:	df000017 	ldw	fp,0(sp)
   45b4c:	dec00104 	addi	sp,sp,4
   45b50:	f800283a 	ret

00045b54 <atexit>:
   45b54:	200b883a 	mov	r5,r4
   45b58:	000f883a 	mov	r7,zero
   45b5c:	000d883a 	mov	r6,zero
   45b60:	0009883a 	mov	r4,zero
   45b64:	0045c1c1 	jmpi	45c1c <__register_exitproc>

00045b68 <exit>:
   45b68:	defffe04 	addi	sp,sp,-8
   45b6c:	000b883a 	mov	r5,zero
   45b70:	dc000015 	stw	r16,0(sp)
   45b74:	dfc00115 	stw	ra,4(sp)
   45b78:	2021883a 	mov	r16,r4
   45b7c:	0045d340 	call	45d34 <__call_exitprocs>
   45b80:	00800134 	movhi	r2,4
   45b84:	109e8c04 	addi	r2,r2,31280
   45b88:	11000017 	ldw	r4,0(r2)
   45b8c:	20800f17 	ldw	r2,60(r4)
   45b90:	10000126 	beq	r2,zero,45b98 <exit+0x30>
   45b94:	103ee83a 	callr	r2
   45b98:	8009883a 	mov	r4,r16
   45b9c:	0045eb40 	call	45eb4 <_exit>

00045ba0 <memcmp>:
   45ba0:	01c000c4 	movi	r7,3
   45ba4:	3980192e 	bgeu	r7,r6,45c0c <memcmp+0x6c>
   45ba8:	2144b03a 	or	r2,r4,r5
   45bac:	11c4703a 	and	r2,r2,r7
   45bb0:	10000f26 	beq	r2,zero,45bf0 <memcmp+0x50>
   45bb4:	20800003 	ldbu	r2,0(r4)
   45bb8:	28c00003 	ldbu	r3,0(r5)
   45bbc:	10c0151e 	bne	r2,r3,45c14 <memcmp+0x74>
   45bc0:	31bfff84 	addi	r6,r6,-2
   45bc4:	01ffffc4 	movi	r7,-1
   45bc8:	00000406 	br	45bdc <memcmp+0x3c>
   45bcc:	20800003 	ldbu	r2,0(r4)
   45bd0:	28c00003 	ldbu	r3,0(r5)
   45bd4:	31bfffc4 	addi	r6,r6,-1
   45bd8:	10c00e1e 	bne	r2,r3,45c14 <memcmp+0x74>
   45bdc:	21000044 	addi	r4,r4,1
   45be0:	29400044 	addi	r5,r5,1
   45be4:	31fff91e 	bne	r6,r7,45bcc <__alt_data_end+0xfffdeacc>
   45be8:	0005883a 	mov	r2,zero
   45bec:	f800283a 	ret
   45bf0:	20c00017 	ldw	r3,0(r4)
   45bf4:	28800017 	ldw	r2,0(r5)
   45bf8:	18bfee1e 	bne	r3,r2,45bb4 <__alt_data_end+0xfffdeab4>
   45bfc:	31bfff04 	addi	r6,r6,-4
   45c00:	21000104 	addi	r4,r4,4
   45c04:	29400104 	addi	r5,r5,4
   45c08:	39bff936 	bltu	r7,r6,45bf0 <__alt_data_end+0xfffdeaf0>
   45c0c:	303fe91e 	bne	r6,zero,45bb4 <__alt_data_end+0xfffdeab4>
   45c10:	003ff506 	br	45be8 <__alt_data_end+0xfffdeae8>
   45c14:	10c5c83a 	sub	r2,r2,r3
   45c18:	f800283a 	ret

00045c1c <__register_exitproc>:
   45c1c:	defffa04 	addi	sp,sp,-24
   45c20:	dc000315 	stw	r16,12(sp)
   45c24:	04000134 	movhi	r16,4
   45c28:	841e8c04 	addi	r16,r16,31280
   45c2c:	80c00017 	ldw	r3,0(r16)
   45c30:	dc400415 	stw	r17,16(sp)
   45c34:	dfc00515 	stw	ra,20(sp)
   45c38:	18805217 	ldw	r2,328(r3)
   45c3c:	2023883a 	mov	r17,r4
   45c40:	10003726 	beq	r2,zero,45d20 <__register_exitproc+0x104>
   45c44:	10c00117 	ldw	r3,4(r2)
   45c48:	010007c4 	movi	r4,31
   45c4c:	20c00e16 	blt	r4,r3,45c88 <__register_exitproc+0x6c>
   45c50:	1a000044 	addi	r8,r3,1
   45c54:	8800221e 	bne	r17,zero,45ce0 <__register_exitproc+0xc4>
   45c58:	18c00084 	addi	r3,r3,2
   45c5c:	18c7883a 	add	r3,r3,r3
   45c60:	18c7883a 	add	r3,r3,r3
   45c64:	12000115 	stw	r8,4(r2)
   45c68:	10c7883a 	add	r3,r2,r3
   45c6c:	19400015 	stw	r5,0(r3)
   45c70:	0005883a 	mov	r2,zero
   45c74:	dfc00517 	ldw	ra,20(sp)
   45c78:	dc400417 	ldw	r17,16(sp)
   45c7c:	dc000317 	ldw	r16,12(sp)
   45c80:	dec00604 	addi	sp,sp,24
   45c84:	f800283a 	ret
   45c88:	00800034 	movhi	r2,0
   45c8c:	10800004 	addi	r2,r2,0
   45c90:	10002626 	beq	r2,zero,45d2c <__register_exitproc+0x110>
   45c94:	01006404 	movi	r4,400
   45c98:	d9400015 	stw	r5,0(sp)
   45c9c:	d9800115 	stw	r6,4(sp)
   45ca0:	d9c00215 	stw	r7,8(sp)
   45ca4:	00000000 	call	0 <__alt_mem_onchip_memory2-0x40000>
   45ca8:	d9400017 	ldw	r5,0(sp)
   45cac:	d9800117 	ldw	r6,4(sp)
   45cb0:	d9c00217 	ldw	r7,8(sp)
   45cb4:	10001d26 	beq	r2,zero,45d2c <__register_exitproc+0x110>
   45cb8:	81000017 	ldw	r4,0(r16)
   45cbc:	10000115 	stw	zero,4(r2)
   45cc0:	02000044 	movi	r8,1
   45cc4:	22405217 	ldw	r9,328(r4)
   45cc8:	0007883a 	mov	r3,zero
   45ccc:	12400015 	stw	r9,0(r2)
   45cd0:	20805215 	stw	r2,328(r4)
   45cd4:	10006215 	stw	zero,392(r2)
   45cd8:	10006315 	stw	zero,396(r2)
   45cdc:	883fde26 	beq	r17,zero,45c58 <__alt_data_end+0xfffdeb58>
   45ce0:	18c9883a 	add	r4,r3,r3
   45ce4:	2109883a 	add	r4,r4,r4
   45ce8:	1109883a 	add	r4,r2,r4
   45cec:	21802215 	stw	r6,136(r4)
   45cf0:	01800044 	movi	r6,1
   45cf4:	12406217 	ldw	r9,392(r2)
   45cf8:	30cc983a 	sll	r6,r6,r3
   45cfc:	4992b03a 	or	r9,r9,r6
   45d00:	12406215 	stw	r9,392(r2)
   45d04:	21c04215 	stw	r7,264(r4)
   45d08:	01000084 	movi	r4,2
   45d0c:	893fd21e 	bne	r17,r4,45c58 <__alt_data_end+0xfffdeb58>
   45d10:	11006317 	ldw	r4,396(r2)
   45d14:	218cb03a 	or	r6,r4,r6
   45d18:	11806315 	stw	r6,396(r2)
   45d1c:	003fce06 	br	45c58 <__alt_data_end+0xfffdeb58>
   45d20:	18805304 	addi	r2,r3,332
   45d24:	18805215 	stw	r2,328(r3)
   45d28:	003fc606 	br	45c44 <__alt_data_end+0xfffdeb44>
   45d2c:	00bfffc4 	movi	r2,-1
   45d30:	003fd006 	br	45c74 <__alt_data_end+0xfffdeb74>

00045d34 <__call_exitprocs>:
   45d34:	defff504 	addi	sp,sp,-44
   45d38:	df000915 	stw	fp,36(sp)
   45d3c:	dd400615 	stw	r21,24(sp)
   45d40:	dc800315 	stw	r18,12(sp)
   45d44:	dfc00a15 	stw	ra,40(sp)
   45d48:	ddc00815 	stw	r23,32(sp)
   45d4c:	dd800715 	stw	r22,28(sp)
   45d50:	dd000515 	stw	r20,20(sp)
   45d54:	dcc00415 	stw	r19,16(sp)
   45d58:	dc400215 	stw	r17,8(sp)
   45d5c:	dc000115 	stw	r16,4(sp)
   45d60:	d9000015 	stw	r4,0(sp)
   45d64:	2839883a 	mov	fp,r5
   45d68:	04800044 	movi	r18,1
   45d6c:	057fffc4 	movi	r21,-1
   45d70:	00800134 	movhi	r2,4
   45d74:	109e8c04 	addi	r2,r2,31280
   45d78:	12000017 	ldw	r8,0(r2)
   45d7c:	45005217 	ldw	r20,328(r8)
   45d80:	44c05204 	addi	r19,r8,328
   45d84:	a0001c26 	beq	r20,zero,45df8 <__call_exitprocs+0xc4>
   45d88:	a0800117 	ldw	r2,4(r20)
   45d8c:	15ffffc4 	addi	r23,r2,-1
   45d90:	b8000d16 	blt	r23,zero,45dc8 <__call_exitprocs+0x94>
   45d94:	14000044 	addi	r16,r2,1
   45d98:	8421883a 	add	r16,r16,r16
   45d9c:	8421883a 	add	r16,r16,r16
   45da0:	84402004 	addi	r17,r16,128
   45da4:	a463883a 	add	r17,r20,r17
   45da8:	a421883a 	add	r16,r20,r16
   45dac:	e0001e26 	beq	fp,zero,45e28 <__call_exitprocs+0xf4>
   45db0:	80804017 	ldw	r2,256(r16)
   45db4:	e0801c26 	beq	fp,r2,45e28 <__call_exitprocs+0xf4>
   45db8:	bdffffc4 	addi	r23,r23,-1
   45dbc:	843fff04 	addi	r16,r16,-4
   45dc0:	8c7fff04 	addi	r17,r17,-4
   45dc4:	bd7ff91e 	bne	r23,r21,45dac <__alt_data_end+0xfffdecac>
   45dc8:	00800034 	movhi	r2,0
   45dcc:	10800004 	addi	r2,r2,0
   45dd0:	10000926 	beq	r2,zero,45df8 <__call_exitprocs+0xc4>
   45dd4:	a0800117 	ldw	r2,4(r20)
   45dd8:	1000301e 	bne	r2,zero,45e9c <__call_exitprocs+0x168>
   45ddc:	a0800017 	ldw	r2,0(r20)
   45de0:	10003226 	beq	r2,zero,45eac <__call_exitprocs+0x178>
   45de4:	a009883a 	mov	r4,r20
   45de8:	98800015 	stw	r2,0(r19)
   45dec:	00000000 	call	0 <__alt_mem_onchip_memory2-0x40000>
   45df0:	9d000017 	ldw	r20,0(r19)
   45df4:	a03fe41e 	bne	r20,zero,45d88 <__alt_data_end+0xfffdec88>
   45df8:	dfc00a17 	ldw	ra,40(sp)
   45dfc:	df000917 	ldw	fp,36(sp)
   45e00:	ddc00817 	ldw	r23,32(sp)
   45e04:	dd800717 	ldw	r22,28(sp)
   45e08:	dd400617 	ldw	r21,24(sp)
   45e0c:	dd000517 	ldw	r20,20(sp)
   45e10:	dcc00417 	ldw	r19,16(sp)
   45e14:	dc800317 	ldw	r18,12(sp)
   45e18:	dc400217 	ldw	r17,8(sp)
   45e1c:	dc000117 	ldw	r16,4(sp)
   45e20:	dec00b04 	addi	sp,sp,44
   45e24:	f800283a 	ret
   45e28:	a0800117 	ldw	r2,4(r20)
   45e2c:	80c00017 	ldw	r3,0(r16)
   45e30:	10bfffc4 	addi	r2,r2,-1
   45e34:	15c01426 	beq	r2,r23,45e88 <__call_exitprocs+0x154>
   45e38:	80000015 	stw	zero,0(r16)
   45e3c:	183fde26 	beq	r3,zero,45db8 <__alt_data_end+0xfffdecb8>
   45e40:	95c8983a 	sll	r4,r18,r23
   45e44:	a0806217 	ldw	r2,392(r20)
   45e48:	a5800117 	ldw	r22,4(r20)
   45e4c:	2084703a 	and	r2,r4,r2
   45e50:	10000b26 	beq	r2,zero,45e80 <__call_exitprocs+0x14c>
   45e54:	a0806317 	ldw	r2,396(r20)
   45e58:	2088703a 	and	r4,r4,r2
   45e5c:	20000c1e 	bne	r4,zero,45e90 <__call_exitprocs+0x15c>
   45e60:	89400017 	ldw	r5,0(r17)
   45e64:	d9000017 	ldw	r4,0(sp)
   45e68:	183ee83a 	callr	r3
   45e6c:	a0800117 	ldw	r2,4(r20)
   45e70:	15bfbf1e 	bne	r2,r22,45d70 <__alt_data_end+0xfffdec70>
   45e74:	98800017 	ldw	r2,0(r19)
   45e78:	153fcf26 	beq	r2,r20,45db8 <__alt_data_end+0xfffdecb8>
   45e7c:	003fbc06 	br	45d70 <__alt_data_end+0xfffdec70>
   45e80:	183ee83a 	callr	r3
   45e84:	003ff906 	br	45e6c <__alt_data_end+0xfffded6c>
   45e88:	a5c00115 	stw	r23,4(r20)
   45e8c:	003feb06 	br	45e3c <__alt_data_end+0xfffded3c>
   45e90:	89000017 	ldw	r4,0(r17)
   45e94:	183ee83a 	callr	r3
   45e98:	003ff406 	br	45e6c <__alt_data_end+0xfffded6c>
   45e9c:	a0800017 	ldw	r2,0(r20)
   45ea0:	a027883a 	mov	r19,r20
   45ea4:	1029883a 	mov	r20,r2
   45ea8:	003fb606 	br	45d84 <__alt_data_end+0xfffdec84>
   45eac:	0005883a 	mov	r2,zero
   45eb0:	003ffb06 	br	45ea0 <__alt_data_end+0xfffdeda0>

00045eb4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   45eb4:	defffd04 	addi	sp,sp,-12
   45eb8:	df000215 	stw	fp,8(sp)
   45ebc:	df000204 	addi	fp,sp,8
   45ec0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   45ec4:	0001883a 	nop
   45ec8:	e0bfff17 	ldw	r2,-4(fp)
   45ecc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   45ed0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   45ed4:	10000226 	beq	r2,zero,45ee0 <_exit+0x2c>
    ALT_SIM_FAIL();
   45ed8:	002af070 	cmpltui	zero,zero,43969
   45edc:	00000106 	br	45ee4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   45ee0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   45ee4:	003fff06 	br	45ee4 <__alt_data_end+0xfffdede4>
